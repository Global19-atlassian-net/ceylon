package com.redhat.ceylon.compiler.java.test.statement.loop.optim;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Members({@.com.redhat.ceylon.compiler.java.metadata.Member(klass = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)})
class Correct implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    Correct() {
        final long expected = 55L;
        long lhs$3 = expected;
        long rhs$4 = notOptimizedIteration$priv$();
        if (lhs$3 == rhs$4) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == notOptimizedIteration()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$3), .ceylon.language.Integer.instance(rhs$4)));
        }
        long lhs$14 = expected;
        long rhs$15 = rangeOpIteration$priv$();
        if (lhs$14 == rhs$15) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeOpIteration()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$14), .ceylon.language.Integer.instance(rhs$15)));
        }
        long lhs$25 = expected;
        long rhs$26 = rangeOpIterationReverse$priv$();
        if (lhs$25 == rhs$26) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeOpIterationReverse()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$25), .ceylon.language.Integer.instance(rhs$26)));
        }
        long lhs$30 = expected;
        long rhs$31 = rangeIteration$priv$();
        if (lhs$30 == rhs$31) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIteration()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$30), .ceylon.language.Integer.instance(rhs$31)));
        }
        long lhs$35 = expected;
        long rhs$36 = rangeIterationReverse$priv$();
        if (lhs$35 == rhs$36) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationReverse()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$35), .ceylon.language.Integer.instance(rhs$36)));
        }
        long lhs$40 = expected;
        long rhs$41 = rangeIteration2$priv$();
        if (lhs$40 == rhs$41) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIteration2()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$40), .ceylon.language.Integer.instance(rhs$41)));
        }
        long lhs$45 = expected;
        long rhs$46 = rangeIterationReverse2$priv$();
        if (lhs$45 == rhs$46) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationReverse2()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$45), .ceylon.language.Integer.instance(rhs$46)));
        }
        long lhs$51 = expected;
        long rhs$52 = arrayIterationStatic$priv$();
        if (lhs$51 == rhs$52) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arrayIterationStatic()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$51), .ceylon.language.Integer.instance(rhs$52)));
        }
        long lhs$66 = expected;
        long rhs$67 = javaArrayIterationStatic$priv$();
        if (lhs$66 == rhs$67) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == javaArrayIterationStatic()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$66), .ceylon.language.Integer.instance(rhs$67)));
        }
        long lhs$72 = expected;
        long rhs$73 = tupleIterationStatic$priv$();
        if (lhs$72 == rhs$73) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == tupleIterationStatic()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$72), .ceylon.language.Integer.instance(rhs$73)));
        }
        long lhs$82 = expected;
        long rhs$83 = rangeIterationDynamic$priv$();
        if (lhs$82 == rhs$83) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == rangeIterationDynamic()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$82), .ceylon.language.Integer.instance(rhs$83)));
        }
        long lhs$84 = expected;
        long rhs$85 = arrayIterationDynamic$priv$();
        if (lhs$84 == rhs$85) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "expected == arrayIterationDynamic()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$84), .ceylon.language.Integer.instance(rhs$85)));
        }
    }
    
    private final long notOptimizedIteration$priv$() {
        long sum = 0L;
        boolean loopentered$0 = false;
        .java.lang.Object elem$1;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$2 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1), .ceylon.language.Integer.instance(10)).iterator();
        loop_0: while (!((elem$1 = i$iterator$$2.next()) instanceof .ceylon.language.Finished)) {
            loopentered$0 = true;
            final int i = .com.redhat.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)elem$1).longValue());
            sum += i;
        }
        if (!loopentered$0) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    private final long rangeOpIteration$priv$() {
        long sum = 0L;
        final int $ceylontmp$first$7 = 1;
        final int $ceylontmp$last$8 = 10;
        final boolean $ceylontmp$increasing$9 = .ceylon.language.Integer.offset($ceylontmp$last$8, $ceylontmp$first$7) >= 0;
        final int $ceylontmp$incr$10 = $ceylontmp$increasing$9 ? 1 : -1;
        int i$13 = $ceylontmp$first$7;
        int $ceylontmp$element$12 = $ceylontmp$first$7;
        boolean $ceylontmp$f$11 = false;
        loop_1: do {
            if ($ceylontmp$f$11) $ceylontmp$element$12 += $ceylontmp$incr$10;
            $ceylontmp$f$11 = true;
            i$13 = $ceylontmp$element$12;
            final int i = i$13;
            $ceylontmp$continue$6: do {
                sum += i;
            }             while (false);
        }         while ($ceylontmp$increasing$9 ? i$13 - $ceylontmp$last$8 != 0 : i$13 - $ceylontmp$last$8 != 0);
        return sum;
    }
    
    private final long rangeOpIterationReverse$priv$() {
        long sum = 0L;
        final int $ceylontmp$first$18 = 10;
        final int $ceylontmp$last$19 = 1;
        final boolean $ceylontmp$increasing$20 = .ceylon.language.Integer.offset($ceylontmp$last$19, $ceylontmp$first$18) >= 0;
        final int $ceylontmp$incr$21 = $ceylontmp$increasing$20 ? 1 : -1;
        int i$24 = $ceylontmp$first$18;
        int $ceylontmp$element$23 = $ceylontmp$first$18;
        boolean $ceylontmp$f$22 = false;
        loop_2: do {
            if ($ceylontmp$f$22) $ceylontmp$element$23 += $ceylontmp$incr$21;
            $ceylontmp$f$22 = true;
            i$24 = $ceylontmp$element$23;
            final int i = i$24;
            $ceylontmp$continue$17: do {
                sum += i;
            }             while (false);
        }         while ($ceylontmp$increasing$20 ? i$24 - $ceylontmp$last$19 != 0 : i$24 - $ceylontmp$last$19 != 0);
        return sum;
    }
    
    private final long rangeIteration$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.ceylon.language.Integer> range = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L));
        boolean loopentered$27 = false;
        .java.lang.Object elem$28;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$29 = range.iterator();
        loop_3: while (!((elem$28 = i$iterator$$29.next()) instanceof .ceylon.language.Finished)) {
            loopentered$27 = true;
            final long i = ((.ceylon.language.Integer)elem$28).longValue();
            sum += i;
        }
        if (!loopentered$27) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    private final long rangeIterationReverse$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.ceylon.language.Integer> range = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(10L));
        boolean loopentered$32 = false;
        .java.lang.Object elem$33;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$34 = range.iterator();
        loop_4: while (!((elem$33 = i$iterator$$34.next()) instanceof .ceylon.language.Finished)) {
            loopentered$32 = true;
            final long i = ((.ceylon.language.Integer)elem$33).longValue();
            sum += i;
        }
        if (!loopentered$32) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.com.redhat.ceylon.compiler.java.metadata.Name("MyOrdinal")
    @.com.redhat.ceylon.compiler.java.metadata.Container(
            klass = .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.class,
            isStatic = false)
    @.com.redhat.ceylon.compiler.java.metadata.SatisfiedTypes({"ceylon.language::Enumerable<com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal>"})
    class MyOrdinal implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Enumerable<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>, .java.io.Serializable {
        
        MyOrdinal(@.com.redhat.ceylon.compiler.java.metadata.Name("i")
        @.ceylon.language.SharedAnnotation$annotation$
        final long i) {
            this.i = i;
            this.$ceylon$language$Enumerable$this$ = new .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), this);
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        private final long i;
        
        @.ceylon.language.SharedAnnotation$annotation$
        public final long getI() {
            return this.i;
        }
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        protected final .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> $ceylon$language$Enumerable$this$;
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .ceylon.language.Enumerable$impl<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> $ceylon$language$Enumerable$impl() {
            return $ceylon$language$Enumerable$this$;
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public long offsetSign(final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return $ceylon$language$Enumerable$this$.offsetSign(other);
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal getPredecessor() {
            return (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)$ceylon$language$Enumerable$this$.getPredecessor();
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal getSuccessor() {
            return (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)$ceylon$language$Enumerable$this$.getSuccessor();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.java.lang.Override
        @.com.redhat.ceylon.common.NonNull
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo(
                value = "com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal",
                erased = true,
                untrusted = true)
        public final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal neighbour(@.com.redhat.ceylon.compiler.java.metadata.Name("n")
        final long n) {
            return new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(getI() + n);
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.java.lang.Override
        public final long offset(@.com.redhat.ceylon.compiler.java.metadata.Name("other")
        @.com.redhat.ceylon.common.NonNull
        @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("com.redhat.ceylon.compiler.java.test.statement.loop.optim::Correct.MyOrdinal")
        final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal other) {
            return getI() - other.getI();
        }
        
        @.java.lang.Override
        @.com.redhat.ceylon.compiler.java.metadata.Ignore
        public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class));
        }
    }
    
    private final long rangeIteration2$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range = .ceylon.language.span_.<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>span(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(1L), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(10L));
        boolean loopentered$37 = false;
        .java.lang.Object elem$38;
        .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> i$iterator$$39 = range.iterator();
        loop_5: while (!((elem$38 = i$iterator$$39.next()) instanceof .ceylon.language.Finished)) {
            loopentered$37 = true;
            final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal i = (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)elem$38;
            sum += i.getI();
        }
        if (!loopentered$37) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    private final long rangeIterationReverse2$priv$() {
        long sum = 0L;
        final .ceylon.language.Range<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> range = .ceylon.language.span_.<.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal>span(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal.class)), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(10L), new .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal(1L));
        boolean loopentered$42 = false;
        .java.lang.Object elem$43;
        .ceylon.language.Iterator<? extends .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal> i$iterator$$44 = range.iterator();
        loop_6: while (!((elem$43 = i$iterator$$44.next()) instanceof .ceylon.language.Finished)) {
            loopentered$42 = true;
            final .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal i = (.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.MyOrdinal)elem$43;
            sum += i.getI();
        }
        if (!loopentered$42) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    private final long arrayIterationStatic$priv$() {
        final .ceylon.language.Array<.ceylon.language.Integer> array = new .ceylon.language.Array<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)));
        long sum = 0L;
        final .java.lang.Object array$48 = array.toArray();
        final int length$49 = .com.redhat.ceylon.compiler.java.Util.arrayLength(array$48);
        loop_7: for (int i$50 = 0; i$50 < length$49; i$50++) {
            final long i = .com.redhat.ceylon.compiler.java.Util.getIntegerArray(array$48, i$50);
            sum += i;
        }
        return sum;
    }
    
    private final long javaArrayIterationStatic$priv$() {
        final int[] array = new int[10];
        final int $ceylontmp$first$55 = 1;
        final int $ceylontmp$last$56 = 10;
        final boolean $ceylontmp$increasing$57 = .ceylon.language.Integer.offset($ceylontmp$last$56, $ceylontmp$first$55) >= 0;
        final int $ceylontmp$incr$58 = $ceylontmp$increasing$57 ? 1 : -1;
        int index$61 = $ceylontmp$first$55;
        int $ceylontmp$element$60 = $ceylontmp$first$55;
        boolean $ceylontmp$f$59 = false;
        loop_8: do {
            if ($ceylontmp$f$59) $ceylontmp$element$60 += $ceylontmp$incr$58;
            $ceylontmp$f$59 = true;
            index$61 = $ceylontmp$element$60;
            final int index = index$61;
            $ceylontmp$continue$54: do {
                array[index - 1] = index;
            }             while (false);
        }         while ($ceylontmp$increasing$57 ? index$61 - $ceylontmp$last$56 != 0 : index$61 - $ceylontmp$last$56 != 0);
        long sum = 0L;
        final int[] array$63 = array;
        loop_9: for (int i$65 = 0; i$65 < array$63.length; i$65++) {
            final long i = array$63[i$65];
            sum += i;
        }
        return sum;
    }
    
    private final long tupleIterationStatic$priv$() {
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> array = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(0L),
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(4L),
                .ceylon.language.Integer.instance(5L),
                .ceylon.language.Integer.instance(6L),
                .ceylon.language.Integer.instance(7L),
                .ceylon.language.Integer.instance(8L),
                .ceylon.language.Integer.instance(9L),
                .ceylon.language.Integer.instance(10L)});
        long sum = 0L;
        boolean loopentered$68 = false;
        .java.lang.Object elem$69;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$70 = array.iterator();
        loop_10: while (!((elem$69 = i$iterator$$70.next()) instanceof .ceylon.language.Finished)) {
            loopentered$68 = true;
            final .ceylon.language.Integer i = (.ceylon.language.Integer)elem$69;
            (
                let
                {
                    .ceylon.language.Integer $ceylontmp$op$71 = .ceylon.language.Integer.instance(sum).plus(i);
                    sum = $ceylontmp$op$71.longValue();
                }
                returning $ceylontmp$op$71;
            );
        }
        if (!loopentered$68) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        return sum;
    }
    
    private final long iterationDynamic$priv$(@.com.redhat.ceylon.compiler.java.metadata.Name("iterable")
    @.com.redhat.ceylon.common.NonNull
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("{ceylon.language::Integer*}")
    final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable) {
        long sum = 0L;
        final .ceylon.language.Iterable<? extends .ceylon.language.Integer, ? extends .java.lang.Object> iterable$76 = iterable;
        final boolean isArray$77 = iterable$76 instanceof .ceylon.language.Array;
        final boolean isTuple$78 = iterable$76 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$76).$getArray$() != null;
        .java.lang.Object elem$75 = null;
        int i$79 = 0;
        final int length$80;
        if (isArray$77 || isTuple$78) {
            length$80 = (int)iterable$76.getSize();
        } else {
            length$80 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> i$iterator$$81 = isTuple$78 || isArray$77 ? null : iterable$76.iterator();
        loop_11: while (isTuple$78 || isArray$77 ? i$79 < length$80 : !((elem$75 = i$iterator$$81.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$78) elem$75 = iterable$76.getFromFirst(i$79++);
            final long i = isArray$77 ? .com.redhat.ceylon.compiler.java.Util.getIntegerArray(((.ceylon.language.Array)iterable$76).toArray(), i$79++) : ((.ceylon.language.Integer)elem$75).longValue();
            sum += i;
        }
        return sum;
    }
    
    private final long rangeIterationDynamic$priv$() {
        final .ceylon.language.Range<.ceylon.language.Integer> iterable = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L));
        return iterationDynamic$priv$(iterable);
    }
    
    private final long arrayIterationDynamic$priv$() {
        final .ceylon.language.Array<.ceylon.language.Integer> iterable = new .ceylon.language.Array<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L), .ceylon.language.Integer.instance(10L)));
        return iterationDynamic$priv$(iterable);
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.statement.loop.optim.Correct.class);
}