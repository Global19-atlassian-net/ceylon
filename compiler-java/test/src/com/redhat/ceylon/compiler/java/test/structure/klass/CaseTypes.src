package com.redhat.ceylon.compiler.java.test.structure.klass;

public abstract class CaseTypes implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    public CaseTypes(final .java.lang.String name) {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.CaseTypes.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.CaseTypes.class);
}
public final class foo_ extends .com.redhat.ceylon.compiler.java.test.structure.klass.CaseTypes implements .java.io.Serializable {
    
    private foo_() {
        super("foo");
    }
    
    private .java.lang.Object readResolve() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.foo_.get_();
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.foo_.class);
    private static final .com.redhat.ceylon.compiler.java.test.structure.klass.foo_ $object$;
    private static volatile boolean $init$$object$ = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            $object$ = new .com.redhat.ceylon.compiler.java.test.structure.klass.foo_();
            .com.redhat.ceylon.compiler.java.test.structure.klass.foo_.$init$$object$ = true;
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            $object$ = null;
            .com.redhat.ceylon.compiler.java.test.structure.klass.foo_.$init$$object$ = false;
        }
    }
    
    public static .com.redhat.ceylon.compiler.java.test.structure.klass.foo_ get_() {
        if (.com.redhat.ceylon.compiler.java.test.structure.klass.foo_.$init$$object$) {
            return .com.redhat.ceylon.compiler.java.test.structure.klass.foo_.$object$;
        } else {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'foo\' before it was set");
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.foo_.$TypeDescriptor$;
    }
}
public final class bar_ extends .com.redhat.ceylon.compiler.java.test.structure.klass.CaseTypes implements .java.io.Serializable {
    
    private bar_() {
        super("bar");
    }
    
    private .java.lang.Object readResolve() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.bar_.get_();
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.bar_.class);
    private static final .com.redhat.ceylon.compiler.java.test.structure.klass.bar_ $object$;
    private static volatile boolean $init$$object$ = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            $object$ = new .com.redhat.ceylon.compiler.java.test.structure.klass.bar_();
            .com.redhat.ceylon.compiler.java.test.structure.klass.bar_.$init$$object$ = true;
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            $object$ = null;
            .com.redhat.ceylon.compiler.java.test.structure.klass.bar_.$init$$object$ = false;
        }
    }
    
    public static .com.redhat.ceylon.compiler.java.test.structure.klass.bar_ get_() {
        if (.com.redhat.ceylon.compiler.java.test.structure.klass.bar_.$init$$object$) {
            return .com.redhat.ceylon.compiler.java.test.structure.klass.bar_.$object$;
        } else {
            if ($initException$ != null) .com.redhat.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'bar\' before it was set");
        }
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.bar_.$TypeDescriptor$;
    }
}
public abstract class CaseTypes2 implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected CaseTypes2() {
        super();
    }
    
    public CaseTypes2(final .java.lang.String name) {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.CaseTypes2.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.CaseTypes2.class);
}
public class Foo extends .com.redhat.ceylon.compiler.java.test.structure.klass.CaseTypes2 {
    
    public Foo() {
        super("Foo");
    }
    
    public static void main(.java.lang.String[] args) {
        .com.redhat.ceylon.compiler.java.Util.storeArgs(args);
        new .com.redhat.ceylon.compiler.java.test.structure.klass.Foo();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.Foo.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.Foo.class);
}
public class Bar extends .com.redhat.ceylon.compiler.java.test.structure.klass.CaseTypes2 {
    
    public Bar() {
        super("Bar");
    }
    
    public static void main(.java.lang.String[] args) {
        .com.redhat.ceylon.compiler.java.Util.storeArgs(args);
        new .com.redhat.ceylon.compiler.java.test.structure.klass.Bar();
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.klass.Bar.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.Bar.class);
}
public interface ICaseTypes {
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.ICaseTypes.class);
}
public interface IFoo extends .com.redhat.ceylon.compiler.java.test.structure.klass.ICaseTypes {
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.IFoo.class);
}
public interface IBar extends .com.redhat.ceylon.compiler.java.test.structure.klass.ICaseTypes {
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.klass.IBar.class);
}