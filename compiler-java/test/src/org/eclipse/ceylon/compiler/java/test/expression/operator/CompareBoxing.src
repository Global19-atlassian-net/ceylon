package org.eclipse.ceylon.compiler.java.test.expression.operator;

final class compareBoxing_ {
    
    private compareBoxing_() {
    }
    
    static <T extends .ceylon.language.Comparable<? super T>>void compareBoxing(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final long i, final double f, final .java.lang.String s, final .ceylon.language.Comparable<? super .ceylon.language.Integer> intSelf, final .ceylon.language.Comparable<? super .ceylon.language.Float> floatSelf, final .ceylon.language.Comparable<? super .ceylon.language.String> stringSelf, final T t, final .ceylon.language.Comparable<? super T> tSelf) {
        boolean cmp = false;
        .ceylon.language.Comparison ord = null;
        ord = .ceylon.language.Integer.compare(i, i);
        cmp = i < i;
        ord = .ceylon.language.Float.compare(f, f);
        cmp = f < f;
        ord = .ceylon.language.String.compare(s, s);
        cmp = .ceylon.language.String.smallerThan(s, s);
        ord = ((T)t).compare((T)t);
        cmp = ((T)t).smallerThan((T)t);
        ord = intSelf.compare(.ceylon.language.Integer.instance(i));
        cmp = intSelf.smallerThan(.ceylon.language.Integer.instance(i));
        ord = floatSelf.compare(.ceylon.language.Float.instance(f));
        cmp = floatSelf.smallerThan(.ceylon.language.Float.instance(f));
        ord = stringSelf.compare(.ceylon.language.String.instance(s));
        cmp = stringSelf.smallerThan(.ceylon.language.String.instance(s));
        ord = ((.ceylon.language.Comparable<? super T>)(.ceylon.language.Comparable)tSelf).compare((T)t);
        cmp = ((.ceylon.language.Comparable<? super T>)(.ceylon.language.Comparable)tSelf).smallerThan((T)t);
        long lhs$0 = ((.ceylon.language.Integer)(.java.lang.Object)((.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)})).getFirst()).longValue();
        long rhs$1 = 0L;
        if (lhs$0 > rhs$1) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "[1].first>0") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$0), .ceylon.language.Integer.instance(rhs$1)));
        }
    }
}