package org.eclipse.ceylon.compiler.java.test.expression.literal;

class SequenceLiteral implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    SequenceLiteral() {
    }
    
    public final void m() {
        final .ceylon.language.Sequential<? extends .ceylon.language.String> sequence = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b")});
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> iterable = new .org.eclipse.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, null, .ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"));
        final .ceylon.language.Empty empty = .ceylon.language.empty_.get_();
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> iterableComp = new .org.eclipse.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$, new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                    {
                        $iterator$0 = sequence.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.String> $iterator$0;
                    private .ceylon.language.String s;
                    private boolean s$exhausted$;
                    
                    private final boolean s() {
                        final .java.lang.Object $ceylontmp$item$0 = $iterator$0.next();
                        s$exhausted$ = $ceylontmp$item$0 == .ceylon.language.finished_.get_();
                        if (s$exhausted$) {
                            return false;
                        } else {
                            s = (.ceylon.language.String)$ceylontmp$item$0;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.String s = this.s;
                            return s;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        });
        final .ceylon.language.Sequential<? extends .ceylon.language.String> sequenceComp = new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                    {
                        $iterator$0 = sequence.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.String> $iterator$0;
                    private .ceylon.language.String s;
                    private boolean s$exhausted$;
                    
                    private final boolean s() {
                        final .java.lang.Object $ceylontmp$item$1 = $iterator$0.next();
                        s$exhausted$ = $ceylontmp$item$1 == .ceylon.language.finished_.get_();
                        if (s$exhausted$) {
                            return false;
                        } else {
                            s = (.ceylon.language.String)$ceylontmp$item$1;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.String s = this.s;
                            return s;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence();
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> iterableComp2 = new .org.eclipse.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                    {
                        $iterator$0 = sequence.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.String> $iterator$0;
                    private .ceylon.language.String s;
                    private boolean s$exhausted$;
                    
                    private final boolean s() {
                        final .java.lang.Object $ceylontmp$item$2 = $iterator$0.next();
                        s$exhausted$ = $ceylontmp$item$2 == .ceylon.language.finished_.get_();
                        if (s$exhausted$) {
                            return false;
                        } else {
                            s = (.ceylon.language.String)$ceylontmp$item$2;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.String s = this.s;
                            return s;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }, .ceylon.language.String.instance("a"));
        final .ceylon.language.Sequential<? extends .ceylon.language.String> sequenceComp2 = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("a")}, new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                    {
                        $iterator$0 = sequence.iterator();
                    }
                    private final .ceylon.language.Iterator<? extends .ceylon.language.String> $iterator$0;
                    private .ceylon.language.String s;
                    private boolean s$exhausted$;
                    
                    private final boolean s() {
                        final .java.lang.Object $ceylontmp$item$3 = $iterator$0.next();
                        s$exhausted$ = $ceylontmp$item$3 == .ceylon.language.finished_.get_();
                        if (s$exhausted$) {
                            return false;
                        } else {
                            s = (.ceylon.language.String)$ceylontmp$item$3;
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.String s = this.s;
                            return s;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }.sequence());
        final .ceylon.language.Sequence<? extends .ceylon.language.String> triplet = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("hello"),
                .ceylon.language.String.instance("world"),
                .ceylon.language.String.instance("goodbye")});
        final .ceylon.language.Sequence<? extends .ceylon.language.String> spreadSequence = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("hello")}, sequence);
        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> spreadIterable = new .org.eclipse.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, iterable, .ceylon.language.String.instance("hello"));
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.expression.literal.SequenceLiteral.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.literal.SequenceLiteral.class);
}