package org.eclipse.ceylon.compiler.java.test.structure.method;

abstract class ActualMethodShortcut implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    ActualMethodShortcut() {
    }
    
    public abstract .java.lang.Object print1();
    
    public abstract .java.lang.Object print2(final .java.lang.String s);
    
    public abstract .java.lang.Object foo(final .java.lang.String s);
    
    public abstract .java.lang.String foo2(final .java.lang.String s);
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.method.ActualMethodShortcut.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.ActualMethodShortcut.class);
}
class ActualMethodShortcutSub extends .org.eclipse.ceylon.compiler.java.test.structure.method.ActualMethodShortcut {
    
    ActualMethodShortcutSub() {
        super();
        this.print2$specifier$ = (
            let
            {
                final .ceylon.language.process_ $instance$ = .ceylon.language.process_.get_();
            }
            returning new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$), "Anything(String=)", (short)-1){
                
                @.java.lang.Override
                public .java.lang.Object $call$() {
                    return (
                        let
                        {
                            $instance$.writeLine();
                        }
                        returning null;
                    );
                }
                
                @.java.lang.Override
                public .java.lang.Object $call$(final .java.lang.Object $param$0) {
                    final .java.lang.String $ceylontmp$line = ((.ceylon.language.String)$param$0).toString();
                    return (
                        let
                        {
                            $instance$.writeLine($ceylontmp$line);
                        }
                        returning null;
                    );
                }
            };
        );
    }
    
    @.java.lang.Override
    public final .java.lang.Object print1() {
        .ceylon.language.process_.get_().writeLine("hello");
        return null;
    }
    private final .ceylon.language.Callable<? extends .java.lang.Object> print2$specifier$;
    
    @.java.lang.Override
    public final .java.lang.Object print2(final .java.lang.String s) {
        return print2$specifier$.$call$(.ceylon.language.String.instance(s));
    }
    
    @.java.lang.Override
    public final .java.lang.Object foo(final .java.lang.String s) {
        .ceylon.language.print_.print(.ceylon.language.String.instance(s));
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.String foo2(final .java.lang.String s) {
        return s;
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.method.ActualMethodShortcutSub.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.ActualMethodShortcutSub.class);
}