package org.eclipse.ceylon.compiler.java.test.annotations;

@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@interface ClassWithInitializerAnnotation$annotation$ {
}
@.ceylon.language.FinalAnnotation$annotation$
@.ceylon.language.AnnotationAnnotation$annotation$
final class ClassWithInitializerAnnotation implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.OptionalAnnotation<.org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializerAnnotation, .ceylon.language.meta.declaration.ClassWithInitializerDeclaration, .java.lang.Object>, .java.io.Serializable {
    
    ClassWithInitializerAnnotation(.org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializerAnnotation$annotation$ anno) {
        this();
    }
    
    ClassWithInitializerAnnotation() {
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializerAnnotation.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializerAnnotation.class);
    
    @.java.lang.Override
    public .java.lang.Class<? extends .java.lang.annotation.Annotation> annotationType() {
        return .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializerAnnotation$annotation$.class;
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {},
        primary = .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializerAnnotation.class)
final class classWithInitializerAnnotation_ {
    
    private classWithInitializerAnnotation_() {
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    static .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializerAnnotation classWithInitializerAnnotation() {
        return new .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializerAnnotation();
    }
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({.java.lang.annotation.ElementType.TYPE})
@interface ClassWithConstructorsAnnotation$annotation$ {
}
@.ceylon.language.FinalAnnotation$annotation$
@.ceylon.language.AnnotationAnnotation$annotation$
final class ClassWithConstructorsAnnotation implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.OptionalAnnotation<.org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructorsAnnotation, .ceylon.language.meta.declaration.ClassWithConstructorsDeclaration, .java.lang.Object>, .java.io.Serializable {
    
    ClassWithConstructorsAnnotation(.org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructorsAnnotation$annotation$ anno) {
        this();
    }
    
    ClassWithConstructorsAnnotation() {
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructorsAnnotation.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructorsAnnotation.class);
    
    @.java.lang.Override
    public .java.lang.Class<? extends .java.lang.annotation.Annotation> annotationType() {
        return .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructorsAnnotation$annotation$.class;
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {},
        primary = .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructorsAnnotation.class)
final class classWithConstructorsAnnotation_ {
    
    private classWithConstructorsAnnotation_() {
    }
    
    @.ceylon.language.AnnotationAnnotation$annotation$
    static .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructorsAnnotation classWithConstructorsAnnotation() {
        return new .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructorsAnnotation();
    }
}
@.org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializerAnnotation$annotation$
class ClassWithInitializer implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    ClassWithInitializer() {
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializer.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.annotations.ClassWithInitializer.class);
}
@.org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructorsAnnotation$annotation$
class ClassWithConstructors implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    @.ceylon.language.SharedAnnotation$annotation$
    public ClassWithConstructors() {
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructors.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.annotations.ClassWithConstructors.class);
}