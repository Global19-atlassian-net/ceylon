package org.eclipse.ceylon.compiler.java.test.expression.ref;

@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Members({
        @.org.eclipse.ceylon.compiler.java.metadata.Member(klass = .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class),
        @.org.eclipse.ceylon.compiler.java.metadata.Member(klass = .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class),
        @.org.eclipse.ceylon.compiler.java.metadata.Member(klass = .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class),
        @.org.eclipse.ceylon.compiler.java.metadata.Member(klass = .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)})
class MemberClassConstructorRef implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MemberClassConstructorRef() {
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple Simple$new$(final .java.lang.String s1$param$) {
        return new Simple(s1$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple Simple$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$nullary $name$) {
        return new Simple($name$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("nullary")
    public static final class Simple$nullary {
        
        Simple$nullary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$nullary Simple$nullary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple Simple$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$unary $name$, final .java.lang.String s1$param$) {
        return new Simple($name$, s1$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("unary")
    public static final class Simple$unary {
        
        Simple$unary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$unary Simple$unary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple Simple$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$binary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        return new Simple($name$, s1$param$, s2$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("binary")
    public static final class Simple$binary {
        
        Simple$binary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$binary Simple$binary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple Simple$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$ternary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$) {
        return new Simple($name$, s1$param$, s2$param$, s3$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("ternary")
    public static final class Simple$ternary {
        
        Simple$ternary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$ternary Simple$ternary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple Simple$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$nary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$, final .java.lang.String s4$param$) {
        return new Simple($name$, s1$param$, s2$param$, s3$param$, s4$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("nary")
    public static final class Simple$nary {
        
        Simple$nary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$nary Simple$nary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.ceylon.language.SharedAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.Container(
            klass = .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.class,
            isStatic = false)
    @.org.eclipse.ceylon.compiler.java.metadata.Class(constructors = true)
    public class Simple implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        @.org.eclipse.ceylon.common.NonNull
        private final .java.lang.String string;
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.java.lang.Override
        @.org.eclipse.ceylon.common.NonNull
        public final .java.lang.String toString() {
            return this.string;
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        public Simple(@.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$) {
            string = new .java.lang.StringBuilder().append("Simple.Simple(").append(s1$param$).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("nullary")
        public Simple(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$nullary $name$) {
            string = "Simple.Nullary()";
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("unary")
        public Simple(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$unary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$) {
            string = new .java.lang.StringBuilder().append("Simple.Unary(").append(s1$param$).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("binary")
        public Simple(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$binary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s2$param$) {
            string = new .java.lang.StringBuilder().append("Simple.Binary(").append(s1$param$).append(",").append(s2$param$).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("ternary")
        public Simple(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$ternary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s2$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s3")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s3$param$) {
            string = new .java.lang.StringBuilder().append("Simple.Ternary(").append(s1$param$).append(",").append(s2$param$).append(",").append(s3$param$).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("nary")
        public Simple(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$nary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s2$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s3")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s3$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s4")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s4$param$) {
            string = new .java.lang.StringBuilder().append("Simple.Nary(").append(s1$param$).append(",").append(s2$param$).append(",").append(s3$param$).append(",").append(s4$param$).append(")").toString();
        }
        
        @.java.lang.Override
        @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class));
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    public final void simple() {
        .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>> defRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Simple(String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Simple(String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        return $instance$.Simple$new$(s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$0 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        .ceylon.language.String rhs$1 = .ceylon.language.String.instance("Simple.Simple(s1)");
        if (lhs$0.equals(rhs$1)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)(\"s1\").string == \"Simple.Simple(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$0, rhs$1));
        }
        defRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Simple(String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Simple(String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        return $instance$.Simple$new$(s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$2 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        .ceylon.language.String rhs$3 = .ceylon.language.String.instance("Simple.Simple(s1)");
        if (lhs$2.equals(rhs$3)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)(\"s1\").string == \"Simple.Simple(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$2, rhs$3));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple> defRef2 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Simple(String)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple $call$(final .java.lang.Object $param$0) {
                final .java.lang.String $ceylontmp$s1 = ((.ceylon.language.String)$param$0).toString();
                return .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.this.Simple$new$($ceylontmp$s1);
            }
        };
        .ceylon.language.String lhs$4 = .ceylon.language.String.instance(defRef2.$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        .ceylon.language.String rhs$5 = .ceylon.language.String.instance("Simple.Simple(s1)");
        if (lhs$4.equals(rhs$5)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef2(\"s1\").string == \"Simple.Simple(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$4, rhs$5));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>> nullaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .ceylon.language.Empty.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Simple.nullary()(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassConstructorRef.Simple.nullary()", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple $call$() {
                        return $instance$.Simple$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$nullary);
                    }
                };
            }
        };
        .ceylon.language.String lhs$6 = .ceylon.language.String.instance(nullaryRef.$call$((.java.lang.Object)this).$call$().toString());
        .ceylon.language.String rhs$7 = .ceylon.language.String.instance("Simple.Nullary()");
        if (lhs$6.equals(rhs$7)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nullaryRef(this)().string == \"Simple.Nullary()\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$6, rhs$7));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple> nullaryRef2 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassConstructorRef.Simple.nullary()", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple $call$() {
                return Simple$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$nullary);
            }
        };
        .ceylon.language.String lhs$8 = .ceylon.language.String.instance(nullaryRef2.$call$().toString());
        .ceylon.language.String rhs$9 = .ceylon.language.String.instance("Simple.Nullary()");
        if (lhs$8.equals(rhs$9)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nullaryRef2().string == \"Simple.Nullary()\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$8, rhs$9));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Simple.unary(String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Simple.unary(String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        return $instance$.Simple$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$unary, s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$10 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        .ceylon.language.String rhs$11 = .ceylon.language.String.instance("Simple.Unary(s1)");
        if (lhs$10.equals(rhs$11)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "unaryRef(this)(\"s1\").string == \"Simple.Unary(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$10, rhs$11));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Simple.binary(String, String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Simple.binary(String, String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        return $instance$.Simple$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$binary, s1$param$, s2$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$12 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2")).toString());
        .ceylon.language.String rhs$13 = .ceylon.language.String.instance("Simple.Binary(s1,s2)");
        if (lhs$12.equals(rhs$13)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "binaryRef(this)(\"s1\", \"s2\").string == \"Simple.Binary(s1,s2)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$12, rhs$13));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Simple.ternary(String, String, String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Simple.ternary(String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$2).toString();
                        return $instance$.Simple$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$ternary, s1$param$, s2$param$, s3$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$14 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3")).toString());
        .ceylon.language.String rhs$15 = .ceylon.language.String.instance("Simple.Ternary(s1,s2,s3)");
        if (lhs$14.equals(rhs$15)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ternaryRef(this)(\"s1\", \"s2\", \"s3\").string == \"Simple.Ternary(s1,s2,s3)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$14, rhs$15));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Simple.nary(String, String, String, String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Simple.nary(String, String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4$param$ = ((.ceylon.language.String)$param$0[3]).toString();
                        return $instance$.Simple$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Simple$nary, s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$16 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4")).toString());
        .ceylon.language.String rhs$17 = .ceylon.language.String.instance("Simple.Nary(s1,s2,s3,s4)");
        if (lhs$16.equals(rhs$17)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\").string == \"Simple.Nary(s1,s2,s3,s4)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$16, rhs$17));
        }
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(final .java.lang.String s1$param$) {
        return new Defaulted(s1$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$s1() {
        return "s1";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$() {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$18 = Defaulted$s1();
            }
            returning new Defaulted($ceylontmp$s1$18);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nullary $name$) {
        return new Defaulted($name$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("nullary")
    public static final class Defaulted$nullary {
        
        Defaulted$nullary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nullary Defaulted$nullary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$unary $name$, final .java.lang.String s1$param$) {
        return new Defaulted($name$, s1$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("unary")
    public static final class Defaulted$unary {
        
        Defaulted$unary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$unary Defaulted$unary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$unary$s1() {
        return "s1";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$unary $name$) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$19 = Defaulted$unary$s1();
            }
            returning new Defaulted($name$, $ceylontmp$s1$19);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$binary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        return new Defaulted($name$, s1$param$, s2$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("binary")
    public static final class Defaulted$binary {
        
        Defaulted$binary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$binary Defaulted$binary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$binary$s1() {
        return "s1";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$binary $name$) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$20 = Defaulted$binary$s1();
                .java.lang.String $ceylontmp$s2$21 = Defaulted$binary$s2($ceylontmp$s1$20);
            }
            returning new Defaulted($name$, $ceylontmp$s1$20, $ceylontmp$s2$21);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$binary$s2(final .java.lang.String s1$param$) {
        return "s2";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$binary $name$, final .java.lang.String s1$param$) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s2$22 = Defaulted$binary$s2(s1$param$);
            }
            returning new Defaulted($name$, s1$param$, $ceylontmp$s2$22);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$ternary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$) {
        return new Defaulted($name$, s1$param$, s2$param$, s3$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("ternary")
    public static final class Defaulted$ternary {
        
        Defaulted$ternary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$ternary Defaulted$ternary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$ternary$s1() {
        return "s1";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$ternary $name$) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$23 = Defaulted$ternary$s1();
                .java.lang.String $ceylontmp$s2$24 = Defaulted$ternary$s2($ceylontmp$s1$23);
                .java.lang.String $ceylontmp$s3$25 = Defaulted$ternary$s3($ceylontmp$s1$23, $ceylontmp$s2$24);
            }
            returning new Defaulted($name$, $ceylontmp$s1$23, $ceylontmp$s2$24, $ceylontmp$s3$25);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$ternary$s2(final .java.lang.String s1$param$) {
        return "s2";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$ternary $name$, final .java.lang.String s1$param$) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s2$26 = Defaulted$ternary$s2(s1$param$);
                .java.lang.String $ceylontmp$s3$27 = Defaulted$ternary$s3(s1$param$, $ceylontmp$s2$26);
            }
            returning new Defaulted($name$, s1$param$, $ceylontmp$s2$26, $ceylontmp$s3$27);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$ternary$s3(final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        return "s3";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$ternary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s3$28 = Defaulted$ternary$s3(s1$param$, s2$param$);
            }
            returning new Defaulted($name$, s1$param$, s2$param$, $ceylontmp$s3$28);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$, final .java.lang.String s4$param$) {
        return new Defaulted($name$, s1$param$, s2$param$, s3$param$, s4$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("nary")
    public static final class Defaulted$nary {
        
        Defaulted$nary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nary Defaulted$nary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$nary$s1() {
        return "s1";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nary $name$) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$29 = Defaulted$nary$s1();
                .java.lang.String $ceylontmp$s2$30 = Defaulted$nary$s2($ceylontmp$s1$29);
                .java.lang.String $ceylontmp$s3$31 = Defaulted$nary$s3($ceylontmp$s1$29, $ceylontmp$s2$30);
                .java.lang.String $ceylontmp$s4$32 = Defaulted$nary$s4($ceylontmp$s1$29, $ceylontmp$s2$30, $ceylontmp$s3$31);
            }
            returning new Defaulted($name$, $ceylontmp$s1$29, $ceylontmp$s2$30, $ceylontmp$s3$31, $ceylontmp$s4$32);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$nary$s2(final .java.lang.String s1$param$) {
        return "s2";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nary $name$, final .java.lang.String s1$param$) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s2$33 = Defaulted$nary$s2(s1$param$);
                .java.lang.String $ceylontmp$s3$34 = Defaulted$nary$s3(s1$param$, $ceylontmp$s2$33);
                .java.lang.String $ceylontmp$s4$35 = Defaulted$nary$s4(s1$param$, $ceylontmp$s2$33, $ceylontmp$s3$34);
            }
            returning new Defaulted($name$, s1$param$, $ceylontmp$s2$33, $ceylontmp$s3$34, $ceylontmp$s4$35);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$nary$s3(final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        return "s3";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s3$36 = Defaulted$nary$s3(s1$param$, s2$param$);
                .java.lang.String $ceylontmp$s4$37 = Defaulted$nary$s4(s1$param$, s2$param$, $ceylontmp$s3$36);
            }
            returning new Defaulted($name$, s1$param$, s2$param$, $ceylontmp$s3$36, $ceylontmp$s4$37);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public final .java.lang.String Defaulted$nary$s4(final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$) {
        return "s4";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted Defaulted$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s4$38 = Defaulted$nary$s4(s1$param$, s2$param$, s3$param$);
            }
            returning new Defaulted($name$, s1$param$, s2$param$, s3$param$, $ceylontmp$s4$38);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.ceylon.language.SharedAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.Container(
            klass = .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.class,
            isStatic = false)
    @.org.eclipse.ceylon.compiler.java.metadata.Class(constructors = true)
    public class Defaulted implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        @.org.eclipse.ceylon.common.NonNull
        private final .java.lang.String string;
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.java.lang.Override
        @.org.eclipse.ceylon.common.NonNull
        public final .java.lang.String toString() {
            return this.string;
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        public Defaulted(@.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$) {
            string = new .java.lang.StringBuilder().append("Defaulted.Defaulted(").append(s1$param$).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("nullary")
        public Defaulted(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nullary $name$) {
            string = "Defaulted.Nullary()";
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("unary")
        public Defaulted(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$unary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$) {
            string = new .java.lang.StringBuilder().append("Defaulted.Unary(").append(s1$param$).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("binary")
        public Defaulted(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$binary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s2$param$) {
            string = new .java.lang.StringBuilder().append("Defaulted.Binary(").append(s1$param$).append(",").append(s2$param$).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("ternary")
        public Defaulted(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$ternary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s2$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s3")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s3$param$) {
            string = new .java.lang.StringBuilder().append("Defaulted.Ternary(").append(s1$param$).append(",").append(s2$param$).append(",").append(s3$param$).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("nary")
        public Defaulted(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s2$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s3")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s3$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s4")
        @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s4$param$) {
            string = new .java.lang.StringBuilder().append("Defaulted.Nary(").append(s1$param$).append(",").append(s2$param$).append(",").append(s3$param$).append(",").append(s4$param$).append(")").toString();
        }
        
        @.java.lang.Override
        @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class));
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    public final void defaulted() {
        .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>> defRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted(String=)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted(String=)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$() {
                        final .java.lang.String s1$param$ = $instance$.Defaulted$s1();
                        return $calltyped$(s1$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1$param$);
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $calltyped$(final .java.lang.String s1$param$) {
                        return $instance$.Defaulted$new$(s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$39 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$call$().toString());
        .ceylon.language.String rhs$40 = .ceylon.language.String.instance("Defaulted.Defaulted(s1)");
        if (lhs$39.equals(rhs$40)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)().string == \"Defaulted.Defaulted(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$39, rhs$40));
        }
        .ceylon.language.String lhs$41 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("S1")).toString());
        .ceylon.language.String rhs$42 = .ceylon.language.String.instance("Defaulted.Defaulted(S1)");
        if (lhs$41.equals(rhs$42)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)(\"S1\").string == \"Defaulted.Defaulted(S1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$41, rhs$42));
        }
        defRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted(String=)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted(String=)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$() {
                        final .java.lang.String s1$param$ = $instance$.Defaulted$s1();
                        return $calltyped$(s1$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1$param$);
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $calltyped$(final .java.lang.String s1$param$) {
                        return $instance$.Defaulted$new$(s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$43 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$call$().toString());
        .ceylon.language.String rhs$44 = .ceylon.language.String.instance("Defaulted.Defaulted(s1)");
        if (lhs$43.equals(rhs$44)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)().string == \"Defaulted.Defaulted(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$43, rhs$44));
        }
        .ceylon.language.String lhs$45 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("S1")).toString());
        .ceylon.language.String rhs$46 = .ceylon.language.String.instance("Defaulted.Defaulted(S1)");
        if (lhs$45.equals(rhs$46)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)(\"S1\").string == \"Defaulted.Defaulted(S1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$45, rhs$46));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted> defRef2 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted(String=)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$() {
                return .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.this.Defaulted$new$();
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0) {
                final .java.lang.String $ceylontmp$s1 = ((.ceylon.language.String)$param$0).toString();
                return .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.this.Defaulted$new$($ceylontmp$s1);
            }
        };
        .ceylon.language.String lhs$47 = .ceylon.language.String.instance(defRef2.$call$().toString());
        .ceylon.language.String rhs$48 = .ceylon.language.String.instance("Defaulted.Defaulted(s1)");
        if (lhs$47.equals(rhs$48)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef2().string == \"Defaulted.Defaulted(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$47, rhs$48));
        }
        .ceylon.language.String lhs$49 = .ceylon.language.String.instance(defRef2.$call$((.java.lang.Object).ceylon.language.String.instance("S1")).toString());
        .ceylon.language.String rhs$50 = .ceylon.language.String.instance("Defaulted.Defaulted(S1)");
        if (lhs$49.equals(rhs$50)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef2(\"S1\").string == \"Defaulted.Defaulted(S1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$49, rhs$50));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>> nullaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .ceylon.language.Empty.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted.nullary()(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassConstructorRef.Defaulted.nullary()", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$() {
                        return $instance$.Defaulted$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nullary);
                    }
                };
            }
        };
        .ceylon.language.String lhs$51 = .ceylon.language.String.instance(nullaryRef.$call$((.java.lang.Object)this).$call$().toString());
        .ceylon.language.String rhs$52 = .ceylon.language.String.instance("Defaulted.Nullary()");
        if (lhs$51.equals(rhs$52)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nullaryRef(this)().string == \"Defaulted.Nullary()\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$51, rhs$52));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted> nullaryRef2 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassConstructorRef.Defaulted.nullary()", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$() {
                return Defaulted$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nullary);
            }
        };
        .ceylon.language.String lhs$53 = .ceylon.language.String.instance(nullaryRef2.$call$().toString());
        .ceylon.language.String rhs$54 = .ceylon.language.String.instance("Defaulted.Nullary()");
        if (lhs$53.equals(rhs$54)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nullaryRef2().string == \"Defaulted.Nullary()\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$53, rhs$54));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted.unary(String=)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted.unary(String=)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$() {
                        final .java.lang.String s1$param$ = $instance$.Defaulted$unary$s1();
                        return $calltyped$(s1$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1$param$);
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $calltyped$(final .java.lang.String s1$param$) {
                        return $instance$.Defaulted$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$unary, s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$55 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        .ceylon.language.String rhs$56 = .ceylon.language.String.instance("Defaulted.Unary(s1)");
        if (lhs$55.equals(rhs$56)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "unaryRef(this)(\"s1\").string == \"Defaulted.Unary(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$55, rhs$56));
        }
        .ceylon.language.String lhs$57 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("S1")).toString());
        .ceylon.language.String rhs$58 = .ceylon.language.String.instance("Defaulted.Unary(S1)");
        if (lhs$57.equals(rhs$58)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "unaryRef(this)(\"S1\").string == \"Defaulted.Unary(S1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$57, rhs$58));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted.binary(String=, String=)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted.binary(String=, String=)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$() {
                        final .java.lang.String s1$param$ = $instance$.Defaulted$binary$s1();
                        final .java.lang.String s2$param$ = $instance$.Defaulted$binary$s2(s1$param$);
                        return $calltyped$(s1$param$, s2$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = $instance$.Defaulted$binary$s2(s1$param$);
                        return $calltyped$(s1$param$, s2$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        return $calltyped$(s1$param$, s2$param$);
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $calltyped$(final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
                        return $instance$.Defaulted$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$binary, s1$param$, s2$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$59 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2")).toString());
        .ceylon.language.String rhs$60 = .ceylon.language.String.instance("Defaulted.Binary(s1,s2)");
        if (lhs$59.equals(rhs$60)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "binaryRef(this)(\"s1\", \"s2\").string == \"Defaulted.Binary(s1,s2)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$59, rhs$60));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted.ternary(String=, String=, String=)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted.ternary(String=, String=, String=)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$() {
                        final .java.lang.String s1$param$ = $instance$.Defaulted$ternary$s1();
                        final .java.lang.String s2$param$ = $instance$.Defaulted$ternary$s2(s1$param$);
                        final .java.lang.String s3$param$ = $instance$.Defaulted$ternary$s3(s1$param$, s2$param$);
                        return $calltyped$(s1$param$, s2$param$, s3$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = $instance$.Defaulted$ternary$s2(s1$param$);
                        final .java.lang.String s3$param$ = $instance$.Defaulted$ternary$s3(s1$param$, s2$param$);
                        return $calltyped$(s1$param$, s2$param$, s3$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3$param$ = $instance$.Defaulted$ternary$s3(s1$param$, s2$param$);
                        return $calltyped$(s1$param$, s2$param$, s3$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$2).toString();
                        return $calltyped$(s1$param$, s2$param$, s3$param$);
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $calltyped$(final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$) {
                        return $instance$.Defaulted$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$ternary, s1$param$, s2$param$, s3$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$61 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3")).toString());
        .ceylon.language.String rhs$62 = .ceylon.language.String.instance("Defaulted.Ternary(s1,s2,s3)");
        if (lhs$61.equals(rhs$62)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ternaryRef(this)(\"s1\", \"s2\", \"s3\").string == \"Defaulted.Ternary(s1,s2,s3)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$61, rhs$62));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted.nary(String=, String=, String=, String=)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Defaulted.nary(String=, String=, String=, String=)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$() {
                        final .java.lang.String s1$param$ = $instance$.Defaulted$nary$s1();
                        final .java.lang.String s2$param$ = $instance$.Defaulted$nary$s2(s1$param$);
                        final .java.lang.String s3$param$ = $instance$.Defaulted$nary$s3(s1$param$, s2$param$);
                        final .java.lang.String s4$param$ = $instance$.Defaulted$nary$s4(s1$param$, s2$param$, s3$param$);
                        return $calltyped$(s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = $instance$.Defaulted$nary$s2(s1$param$);
                        final .java.lang.String s3$param$ = $instance$.Defaulted$nary$s3(s1$param$, s2$param$);
                        final .java.lang.String s4$param$ = $instance$.Defaulted$nary$s4(s1$param$, s2$param$, s3$param$);
                        return $calltyped$(s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3$param$ = $instance$.Defaulted$nary$s3(s1$param$, s2$param$);
                        final .java.lang.String s4$param$ = $instance$.Defaulted$nary$s4(s1$param$, s2$param$, s3$param$);
                        return $calltyped$(s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$2).toString();
                        final .java.lang.String s4$param$ = $instance$.Defaulted$nary$s4(s1$param$, s2$param$, s3$param$);
                        return $calltyped$(s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1$param$ = $param$0.length > 0 ? ((.ceylon.language.String)$param$0[0]).toString() : $instance$.Defaulted$nary$s1();
                        final .java.lang.String s2$param$ = $param$0.length > 1 ? ((.ceylon.language.String)$param$0[1]).toString() : $instance$.Defaulted$nary$s2(s1$param$);
                        final .java.lang.String s3$param$ = $param$0.length > 2 ? ((.ceylon.language.String)$param$0[2]).toString() : $instance$.Defaulted$nary$s3(s1$param$, s2$param$);
                        final .java.lang.String s4$param$ = $param$0.length > 3 ? ((.ceylon.language.String)$param$0[3]).toString() : $instance$.Defaulted$nary$s4(s1$param$, s2$param$, s3$param$);
                        return $calltyped$(s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted $calltyped$(final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$, final .java.lang.String s4$param$) {
                        return $instance$.Defaulted$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Defaulted$nary, s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$63 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4")).toString());
        .ceylon.language.String rhs$64 = .ceylon.language.String.instance("Defaulted.Nary(s1,s2,s3,s4)");
        if (lhs$63.equals(rhs$64)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\").string == \"Defaulted.Nary(s1,s2,s3,s4)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$63, rhs$64));
        }
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$) {
        return new Sequenced(s1$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$() {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s1$65 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new Sequenced($ceylontmp$s1$65);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$nullary $name$) {
        return new Sequenced($name$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("nullary")
    public static final class Sequenced$nullary {
        
        Sequenced$nullary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$nullary Sequenced$nullary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$unary $name$, final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$) {
        return new Sequenced($name$, s1$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("unary")
    public static final class Sequenced$unary {
        
        Sequenced$unary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$unary Sequenced$unary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$unary $name$) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s1$66 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new Sequenced($name$, $ceylontmp$s1$66);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$binary $name$, final .java.lang.String s1$param$, final .ceylon.language.Sequential<? extends .ceylon.language.String> s2$param$) {
        return new Sequenced($name$, s1$param$, s2$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("binary")
    public static final class Sequenced$binary {
        
        Sequenced$binary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$binary Sequenced$binary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$binary $name$, final .java.lang.String s1$param$) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s2$67 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new Sequenced($name$, s1$param$, $ceylontmp$s2$67);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$ternary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .ceylon.language.Sequential<? extends .ceylon.language.String> s3$param$) {
        return new Sequenced($name$, s1$param$, s2$param$, s3$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("ternary")
    public static final class Sequenced$ternary {
        
        Sequenced$ternary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$ternary Sequenced$ternary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$ternary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s3$68 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new Sequenced($name$, s1$param$, s2$param$, $ceylontmp$s3$68);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$nary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$, final .ceylon.language.Sequential<? extends .ceylon.language.String> s4$param$) {
        return new Sequenced($name$, s1$param$, s2$param$, s3$param$, s4$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("nary")
    public static final class Sequenced$nary {
        
        Sequenced$nary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$nary Sequenced$nary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced Sequenced$new$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$nary $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s4$69 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new Sequenced($name$, s1$param$, s2$param$, s3$param$, $ceylontmp$s4$69);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.ceylon.language.SharedAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.Container(
            klass = .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.class,
            isStatic = false)
    @.org.eclipse.ceylon.compiler.java.metadata.Class(constructors = true)
    public class Sequenced implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        @.org.eclipse.ceylon.common.NonNull
        private final .java.lang.String string;
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.java.lang.Override
        @.org.eclipse.ceylon.common.NonNull
        public final .java.lang.String toString() {
            return this.string;
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        public Sequenced(@.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.Sequenced
        @.org.eclipse.ceylon.common.NonNull
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String[]")
        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$) {
            string = new .java.lang.StringBuilder().append("Sequenced.Sequenced(").append(s1$param$.toString()).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("nullary")
        public Sequenced(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$nullary $name$) {
            string = "Sequenced.Nullary()";
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("unary")
        public Sequenced(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$unary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.Sequenced
        @.org.eclipse.ceylon.common.NonNull
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String[]")
        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$) {
            string = new .java.lang.StringBuilder().append("Sequenced.Unary(").append(s1$param$.toString()).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("binary")
        public Sequenced(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$binary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.compiler.java.metadata.Sequenced
        @.org.eclipse.ceylon.common.NonNull
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String[]")
        final .ceylon.language.Sequential<? extends .ceylon.language.String> s2$param$) {
            string = new .java.lang.StringBuilder().append("Sequenced.Binary(").append(s1$param$).append(",").append(s2$param$.toString()).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("ternary")
        public Sequenced(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$ternary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s2$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s3")
        @.org.eclipse.ceylon.compiler.java.metadata.Sequenced
        @.org.eclipse.ceylon.common.NonNull
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String[]")
        final .ceylon.language.Sequential<? extends .ceylon.language.String> s3$param$) {
            string = new .java.lang.StringBuilder().append("Sequenced.Ternary(").append(s1$param$).append(",").append(s2$param$).append(",").append(s3$param$.toString()).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("nary")
        public Sequenced(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$nary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s2$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s3")
        @.org.eclipse.ceylon.common.NonNull
        final .java.lang.String s3$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s4")
        @.org.eclipse.ceylon.compiler.java.metadata.Sequenced
        @.org.eclipse.ceylon.common.NonNull
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String[]")
        final .ceylon.language.Sequential<? extends .ceylon.language.String> s4$param$) {
            string = new .java.lang.StringBuilder().append("Sequenced.Nary(").append(s1$param$).append(",").append(s2$param$).append(",").append(s3$param$).append(",").append(s4$param$.toString()).append(")").toString();
        }
        
        @.java.lang.Override
        @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class));
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    public final void sequenced() {
        .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>> defRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced(String*)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced(String*)", (short)0){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$() {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$ = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0;
                        return $calltyped$(s1$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$0}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$0}, $param$1));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$0,
                                $param$1}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1}, $param$2));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$0,
                                $param$1,
                                $param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1,
                                (.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $calltyped$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$) {
                        return $instance$.Sequenced$new$(s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$70 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("s1")}, .ceylon.language.empty_.get_())).toString());
        .ceylon.language.String rhs$71 = .ceylon.language.String.instance("Sequenced.Sequenced([s1])");
        if (lhs$70.equals(rhs$71)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)(\"s1\").string == \"Sequenced.Sequenced([s1])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$70, rhs$71));
        }
        .ceylon.language.String lhs$72 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        .ceylon.language.String rhs$73 = .ceylon.language.String.instance("Sequenced.Sequenced([])");
        if (lhs$72.equals(rhs$73)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)().string == \"Sequenced.Sequenced([])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$72, rhs$73));
        }
        defRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced(String*)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced(String*)", (short)0){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$() {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$ = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0;
                        return $calltyped$(s1$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$0}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$0}, $param$1));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$0,
                                $param$1}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1}, $param$2));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$0,
                                $param$1,
                                $param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1,
                                (.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $calltyped$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$) {
                        return $instance$.Sequenced$new$(s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$74 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("s1")}, .ceylon.language.empty_.get_())).toString());
        .ceylon.language.String rhs$75 = .ceylon.language.String.instance("Sequenced.Sequenced([s1])");
        if (lhs$74.equals(rhs$75)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)(\"s1\").string == \"Sequenced.Sequenced([s1])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$74, rhs$75));
        }
        .ceylon.language.String lhs$76 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        .ceylon.language.String rhs$77 = .ceylon.language.String.instance("Sequenced.Sequenced([])");
        if (lhs$76.equals(rhs$77)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)().string == \"Sequenced.Sequenced([])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$76, rhs$77));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced> defRef2 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced(String*)", (short)0){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$() {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                return $calltyped$(s1$param$$variadic$);
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .ceylon.language.Sequential $param$0) {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$ = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0;
                return $calltyped$(s1$param$);
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$0}, .ceylon.language.empty_.get_());
                return $calltyped$(s1$param$$variadic$);
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$0}, $param$1));
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                        $param$0,
                        $param$1}, .ceylon.language.empty_.get_());
                return $calltyped$(s1$param$$variadic$);
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                        (.ceylon.language.String)$param$0,
                        (.ceylon.language.String)$param$1}, $param$2));
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                        $param$0,
                        $param$1,
                        $param$2}, .ceylon.language.empty_.get_());
                return $calltyped$(s1$param$$variadic$);
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                        (.ceylon.language.String)$param$0,
                        (.ceylon.language.String)$param$1,
                        (.ceylon.language.String)$param$2}, $param$3));
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object... $param$0) {
                return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object... $param$0) {
                return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0));
            }
            
            private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $calltyped$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$) {
                return .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.this.Sequenced$new$(s1$param$);
            }
        };
        .ceylon.language.String lhs$78 = .ceylon.language.String.instance(defRef2.$callvariadic$((.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("s1")}, .ceylon.language.empty_.get_())).toString());
        .ceylon.language.String rhs$79 = .ceylon.language.String.instance("Sequenced.Sequenced([s1])");
        if (lhs$78.equals(rhs$79)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef2(\"s1\").string == \"Sequenced.Sequenced([s1])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$78, rhs$79));
        }
        .ceylon.language.String lhs$80 = .ceylon.language.String.instance(defRef2.$callvariadic$((.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        .ceylon.language.String rhs$81 = .ceylon.language.String.instance("Sequenced.Sequenced([])");
        if (lhs$80.equals(rhs$81)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef2().string == \"Sequenced.Sequenced([])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$80, rhs$81));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>> nullaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .ceylon.language.Empty.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced.nullary()(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassConstructorRef.Sequenced.nullary()", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$() {
                        return $instance$.Sequenced$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$nullary);
                    }
                };
            }
        };
        .ceylon.language.String lhs$82 = .ceylon.language.String.instance(nullaryRef.$call$((.java.lang.Object)this).$call$().toString());
        .ceylon.language.String rhs$83 = .ceylon.language.String.instance("Sequenced.Nullary()");
        if (lhs$82.equals(rhs$83)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nullaryRef(this)().string == \"Sequenced.Nullary()\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$82, rhs$83));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced> nullaryRef2 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassConstructorRef.Sequenced.nullary()", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$() {
                return Sequenced$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$nullary);
            }
        };
        .ceylon.language.String lhs$84 = .ceylon.language.String.instance(nullaryRef2.$call$().toString());
        .ceylon.language.String rhs$85 = .ceylon.language.String.instance("Sequenced.Nullary()");
        if (lhs$84.equals(rhs$85)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nullaryRef2().string == \"Sequenced.Nullary()\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$84, rhs$85));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced.unary(String*)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced.unary(String*)", (short)0){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$() {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$ = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0;
                        return $calltyped$(s1$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$0}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$0}, $param$1));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$0,
                                $param$1}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1}, $param$2));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$0,
                                $param$1,
                                $param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1,
                                (.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $calltyped$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s1$param$) {
                        return $instance$.Sequenced$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$unary, s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$86 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("s1")}, .ceylon.language.empty_.get_())).toString());
        .ceylon.language.String rhs$87 = .ceylon.language.String.instance("Sequenced.Unary([s1])");
        if (lhs$86.equals(rhs$87)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "unaryRef(this)(\"s1\").string == \"Sequenced.Unary([s1])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$86, rhs$87));
        }
        .ceylon.language.String lhs$88 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        .ceylon.language.String rhs$89 = .ceylon.language.String.instance("Sequenced.Unary([])");
        if (lhs$88.equals(rhs$89)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "unaryRef(this)().string == \"Sequenced.Unary([])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$88, rhs$89));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced.binary(String, String*)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced.binary(String, String*)", (short)1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0.get(.ceylon.language.Integer.instance(0))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s2$param$ = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0.spanFrom(.ceylon.language.Integer.instance(1));
                        return $calltyped$(s1$param$, s2$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s2$param$$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1$param$, s2$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s2$param$ = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$1;
                        return $calltyped$(s1$param$, s2$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s2$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$1}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$, s2$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1$param$, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$1}, $param$2));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s2$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$1,
                                $param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$, s2$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1$param$, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$1,
                                (.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0[0]).toString();
                        return $calltyped$(s1$param$, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 1, $param$0.length - 1, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0[0]).toString();
                        return $calltyped$(s1$param$, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 1, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $calltyped$(final .java.lang.String s1$param$, final .ceylon.language.Sequential<? extends .ceylon.language.String> s2$param$) {
                        return $instance$.Sequenced$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$binary, s1$param$, s2$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$90 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("s2")}, .ceylon.language.empty_.get_())).toString());
        .ceylon.language.String rhs$91 = .ceylon.language.String.instance("Sequenced.Binary(s1,[s2])");
        if (lhs$90.equals(rhs$91)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "binaryRef(this)(\"s1\", \"s2\").string == \"Sequenced.Binary(s1,[s2])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$90, rhs$91));
        }
        .ceylon.language.String lhs$92 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        .ceylon.language.String rhs$93 = .ceylon.language.String.instance("Sequenced.Binary(s1,[])");
        if (lhs$92.equals(rhs$93)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "binaryRef(this)(\"s1\").string == \"Sequenced.Binary(s1,[])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$92, rhs$93));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced.ternary(String, String, String*)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced.ternary(String, String, String*)", (short)2){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1.get(.ceylon.language.Integer.instance(1))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s3$param$ = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$1.spanFrom(.ceylon.language.Integer.instance(2));
                        return $calltyped$(s1$param$, s2$param$, s3$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s3$param$$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1$param$, s2$param$, s3$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s3$param$ = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$2;
                        return $calltyped$(s1$param$, s2$param$, s3$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s3$param$$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1$param$, s2$param$, s3$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        return $calltyped$(s1$param$, s2$param$, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$0[1]).toString();
                        return $calltyped$(s1$param$, s2$param$, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$0[1]).toString();
                        return $calltyped$(s1$param$, s2$param$, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 2, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $calltyped$(final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .ceylon.language.Sequential<? extends .ceylon.language.String> s3$param$) {
                        return $instance$.Sequenced$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$ternary, s1$param$, s2$param$, s3$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$94 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("s3")}, .ceylon.language.empty_.get_())).toString());
        .ceylon.language.String rhs$95 = .ceylon.language.String.instance("Sequenced.Ternary(s1,s2,[s3])");
        if (lhs$94.equals(rhs$95)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ternaryRef(this)(\"s1\", \"s2\", \"s3\").string == \"Sequenced.Ternary(s1,s2,[s3])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$94, rhs$95));
        }
        .ceylon.language.String lhs$96 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        .ceylon.language.String rhs$97 = .ceylon.language.String.instance("Sequenced.Ternary(s1,s2,[])");
        if (lhs$96.equals(rhs$97)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ternaryRef(this)(\"s1\", \"s2\").string == \"Sequenced.Ternary(s1,s2,[])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$96, rhs$97));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced.nary(String, String, String, String*)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Sequenced.nary(String, String, String, String*)", (short)3){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$2.get(.ceylon.language.Integer.instance(2))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s4$param$ = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$2.spanFrom(.ceylon.language.Integer.instance(3));
                        return $calltyped$(s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$2).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s4$param$$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1$param$, s2$param$, s3$param$, s4$param$$variadic$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$2).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s4$param$ = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$3;
                        return $calltyped$(s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$0[2]).toString();
                        return $calltyped$(s1$param$, s2$param$, s3$param$, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 3, $param$0.length - 3, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$0[2]).toString();
                        return $calltyped$(s1$param$, s2$param$, s3$param$, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 3, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced $calltyped$(final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$, final .ceylon.language.Sequential<? extends .ceylon.language.String> s4$param$) {
                        return $instance$.Sequenced$new$(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Sequenced$nary, s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$98 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("s4")}, .ceylon.language.empty_.get_())).toString());
        .ceylon.language.String rhs$99 = .ceylon.language.String.instance("Sequenced.Nary(s1,s2,s3,[s4])");
        if (lhs$98.equals(rhs$99)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\").string == \"Sequenced.Nary(s1,s2,s3,[s4])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$98, rhs$99));
        }
        .ceylon.language.String lhs$100 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        .ceylon.language.String rhs$101 = .ceylon.language.String.instance("Sequenced.Nary(s1,s2,s3,[])");
        if (lhs$100.equals(rhs$101)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "naryRef(this)(\"s1\", \"s2\", \"s3\").string == \"Sequenced.Nary(s1,s2,s3,[])\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$100, rhs$101));
        }
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public <T>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<T> Parameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final T s1$param$) {
        return new Parameterized<T>($reified$T, s1$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public <T>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<T> Parameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$nullary $name$) {
        return new Parameterized<T>($reified$T, $name$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("nullary")
    public static final class Parameterized$nullary {
        
        Parameterized$nullary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$nullary Parameterized$nullary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public <T>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<T> Parameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$unary $name$, final T s1$param$) {
        return new Parameterized<T>($reified$T, $name$, s1$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("unary")
    public static final class Parameterized$unary {
        
        Parameterized$unary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$unary Parameterized$unary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public <T>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<T> Parameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$binary $name$, final T s1$param$, final T s2$param$) {
        return new Parameterized<T>($reified$T, $name$, s1$param$, s2$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("binary")
    public static final class Parameterized$binary {
        
        Parameterized$binary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$binary Parameterized$binary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public <T>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<T> Parameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$ternary $name$, final T s1$param$, final T s2$param$, final T s3$param$) {
        return new Parameterized<T>($reified$T, $name$, s1$param$, s2$param$, s3$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("ternary")
    public static final class Parameterized$ternary {
        
        Parameterized$ternary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$ternary Parameterized$ternary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public <T>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<T> Parameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$nary $name$, final T s1$param$, final T s2$param$, final T s3$param$, final T s4$param$) {
        return new Parameterized<T>($reified$T, $name$, s1$param$, s2$param$, s3$param$, s4$param$);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("nary")
    public static final class Parameterized$nary {
        
        Parameterized$nary() {
        }
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$nary Parameterized$nary = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.ceylon.language.SharedAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.Container(
            klass = .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.class,
            isStatic = false)
    @.org.eclipse.ceylon.compiler.java.metadata.TypeParameters({@.org.eclipse.ceylon.compiler.java.metadata.TypeParameter(
            value = "T",
            variance = .org.eclipse.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {"ceylon.language::Object"},
            caseTypes = {})})
    @.org.eclipse.ceylon.compiler.java.metadata.Class(constructors = true)
    public class Parameterized<T> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
        @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        @.org.eclipse.ceylon.common.NonNull
        private final .java.lang.String string;
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.ceylon.language.ActualAnnotation$annotation$
        @.java.lang.Override
        @.org.eclipse.ceylon.common.NonNull
        public final .java.lang.String toString() {
            return this.string;
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        public Parameterized(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s1$param$) {
            this.$reified$T = $reified$T;
            string = new .java.lang.StringBuilder().append("Parameterized.Parameterized(").append(s1$param$.toString()).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("nullary")
        public Parameterized(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$nullary $name$) {
            this.$reified$T = $reified$T;
            string = "Parameterized.Nullary()";
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("unary")
        public Parameterized(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$unary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s1$param$) {
            this.$reified$T = $reified$T;
            string = new .java.lang.StringBuilder().append("Parameterized.Unary(").append(s1$param$.toString()).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("binary")
        public Parameterized(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$binary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s2$param$) {
            this.$reified$T = $reified$T;
            string = new .java.lang.StringBuilder().append("Parameterized.Binary(").append(s1$param$.toString()).append(",").append(s2$param$.toString()).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("ternary")
        public Parameterized(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$ternary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s2$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s3")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s3$param$) {
            this.$reified$T = $reified$T;
            string = new .java.lang.StringBuilder().append("Parameterized.Ternary(").append(s1$param$.toString()).append(",").append(s2$param$.toString()).append(",").append(s3$param$.toString()).append(")").toString();
        }
        
        @.ceylon.language.SharedAnnotation$annotation$
        @.org.eclipse.ceylon.compiler.java.metadata.Name("nary")
        public Parameterized(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
        final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$nary $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s2$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s3")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s3$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s4")
        @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
        final T s4$param$) {
            this.$reified$T = $reified$T;
            string = new .java.lang.StringBuilder().append("Parameterized.Nary(").append(s1$param$.toString()).append(",").append(s2$param$.toString()).append(",").append(s3$param$.toString()).append(",").append(s4$param$.toString()).append(")").toString();
        }
        
        @.java.lang.Override
        @.org.eclipse.ceylon.compiler.java.metadata.Ignore
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, $reified$T));
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    public final void parameterized() {
        .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>> defRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>(String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>(String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.String s1$param$ = (.ceylon.language.String)$param$0;
                        return $instance$.Parameterized$new$(.ceylon.language.String.$TypeDescriptor$, s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$102 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        .ceylon.language.String rhs$103 = .ceylon.language.String.instance("Parameterized.Parameterized(s1)");
        if (lhs$102.equals(rhs$103)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)(\"s1\").string == \"Parameterized.Parameterized(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$102, rhs$103));
        }
        defRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>(String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>(String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.String s1$param$ = (.ceylon.language.String)$param$0;
                        return $instance$.Parameterized$new$(.ceylon.language.String.$TypeDescriptor$, s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$104 = .ceylon.language.String.instance(defRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        .ceylon.language.String rhs$105 = .ceylon.language.String.instance("Parameterized.Parameterized(s1)");
        if (lhs$104.equals(rhs$105)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef(this)(\"s1\").string == \"Parameterized.Parameterized(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$104, rhs$105));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>> defRef2 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>(String)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.String $ceylontmp$s1 = (.ceylon.language.String)$param$0;
                return .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.this.Parameterized$new$(.ceylon.language.String.$TypeDescriptor$, $ceylontmp$s1);
            }
        };
        .ceylon.language.String lhs$106 = .ceylon.language.String.instance(defRef2.$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        .ceylon.language.String rhs$107 = .ceylon.language.String.instance("Parameterized.Parameterized(s1)");
        if (lhs$106.equals(rhs$107)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "defRef2(\"s1\").string == \"Parameterized.Parameterized(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$106, rhs$107));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>> nullaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .ceylon.language.Empty.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>.nullary()(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassConstructorRef.Parameterized<String>.nullary()", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String> $call$() {
                        return $instance$.Parameterized$new$(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$nullary);
                    }
                };
            }
        };
        .ceylon.language.String lhs$108 = .ceylon.language.String.instance(nullaryRef.$call$((.java.lang.Object)this).$call$().toString());
        .ceylon.language.String rhs$109 = .ceylon.language.String.instance("Parameterized.Nullary()");
        if (lhs$108.equals(rhs$109)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nullaryRef(this)().string == \"Parameterized.Nullary()\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$108, rhs$109));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>> nullaryRef2 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassConstructorRef.Parameterized<String>.nullary()", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String> $call$() {
                return Parameterized$new$(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$nullary);
            }
        };
        .ceylon.language.String lhs$110 = .ceylon.language.String.instance(nullaryRef2.$call$().toString());
        .ceylon.language.String rhs$111 = .ceylon.language.String.instance("Parameterized.Nullary()");
        if (lhs$110.equals(rhs$111)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nullaryRef2().string == \"Parameterized.Nullary()\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$110, rhs$111));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>.unary(String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>.unary(String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.String s1$param$ = (.ceylon.language.String)$param$0;
                        return $instance$.Parameterized$new$(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$unary, s1$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$112 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        .ceylon.language.String rhs$113 = .ceylon.language.String.instance("Parameterized.Unary(s1)");
        if (lhs$112.equals(rhs$113)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "unaryRef(this)(\"s1\").string == \"Parameterized.Unary(s1)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$112, rhs$113));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>.binary(String, String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>.binary(String, String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String> $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .ceylon.language.String s1$param$ = (.ceylon.language.String)$param$0;
                        final .ceylon.language.String s2$param$ = (.ceylon.language.String)$param$1;
                        return $instance$.Parameterized$new$(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$binary, s1$param$, s2$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$114 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2")).toString());
        .ceylon.language.String rhs$115 = .ceylon.language.String.instance("Parameterized.Binary(s1,s2)");
        if (lhs$114.equals(rhs$115)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "binaryRef(this)(\"s1\", \"s2\").string == \"Parameterized.Binary(s1,s2)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$114, rhs$115));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>.ternary(String, String, String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>.ternary(String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String> $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .ceylon.language.String s1$param$ = (.ceylon.language.String)$param$0;
                        final .ceylon.language.String s2$param$ = (.ceylon.language.String)$param$1;
                        final .ceylon.language.String s3$param$ = (.ceylon.language.String)$param$2;
                        return $instance$.Parameterized$new$(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$ternary, s1$param$, s2$param$, s3$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$116 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3")).toString());
        .ceylon.language.String rhs$117 = .ceylon.language.String.instance("Parameterized.Ternary(s1,s2,s3)");
        if (lhs$116.equals(rhs$117)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ternaryRef(this)(\"s1\", \"s2\", \"s3\").string == \"Parameterized.Ternary(s1,s2,s3)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$116, rhs$117));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>.nary(String, String, String, String)(MemberClassConstructorRef)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassConstructorRef.Parameterized<String>.nary(String, String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized<.ceylon.language.String> $call$(final .java.lang.Object... $param$0) {
                        final .ceylon.language.String s1$param$ = (.ceylon.language.String)$param$0[0];
                        final .ceylon.language.String s2$param$ = (.ceylon.language.String)$param$0[1];
                        final .ceylon.language.String s3$param$ = (.ceylon.language.String)$param$0[2];
                        final .ceylon.language.String s4$param$ = (.ceylon.language.String)$param$0[3];
                        return $instance$.Parameterized$new$(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.Parameterized$nary, s1$param$, s2$param$, s3$param$, s4$param$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$118 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4")).toString());
        .ceylon.language.String rhs$119 = .ceylon.language.String.instance("Parameterized.Nary(s1,s2,s3,s4)");
        if (lhs$118.equals(rhs$119)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\").string == \"Parameterized.Nary(s1,s2,s3,s4)\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$118, rhs$119));
        }
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.$TypeDescriptor$;
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef.class);
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Method
final class memberClassConstructorRef_ {
    
    private memberClassConstructorRef_() {
    }
    
    static void memberClassConstructorRef() {
        final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef o = new .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassConstructorRef();
        o.simple();
        o.defaulted();
        o.sequenced();
        o.parameterized();
    }
}