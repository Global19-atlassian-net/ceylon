package org.eclipse.ceylon.compiler.java.test.expression.comprehensions;

final class comp1_ {
    
    private comp1_() {
    }
    private static final .ceylon.language.Sequential<? extends .ceylon.language.String> $object$;
    private static volatile boolean $init$$object$ = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            $object$ = (.ceylon.language.Sequence<? extends .ceylon.language.String>)(.ceylon.language.Sequence)new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
                
                public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                    return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                        {
                            $iterator$0 = .ceylon.language.String.split("hello world").iterator();
                        }
                        private final .ceylon.language.Iterator<? extends .ceylon.language.String> $iterator$0;
                        private .ceylon.language.String str;
                        private boolean str$exhausted$;
                        
                        private final boolean str() {
                            final .java.lang.Object $ceylontmp$item$0 = $iterator$0.next();
                            str$exhausted$ = $ceylontmp$item$0 == .ceylon.language.finished_.get_();
                            if (str$exhausted$) {
                                return false;
                            } else {
                                str = (.ceylon.language.String)$ceylontmp$item$0;
                                return true;
                            }
                        }
                        
                        public final .java.lang.Object next() {
                            if (this.str()) {
                                final .ceylon.language.String str = this.str;
                                return str;
                            } else return .ceylon.language.finished_.get_();
                        }
                    };
                }
            }.sequence();
            .org.eclipse.ceylon.compiler.java.test.expression.comprehensions.comp1_.$init$$object$ = true;
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            $object$ = null;
            .org.eclipse.ceylon.compiler.java.test.expression.comprehensions.comp1_.$init$$object$ = false;
        }
    }
    
    public static .ceylon.language.Sequential<? extends .ceylon.language.String> get_() {
        if (.org.eclipse.ceylon.compiler.java.test.expression.comprehensions.comp1_.$init$$object$) {
            return .org.eclipse.ceylon.compiler.java.test.expression.comprehensions.comp1_.$object$;
        } else {
            if ($initException$ != null) .org.eclipse.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'comp1\' before it was set");
        }
    }
}