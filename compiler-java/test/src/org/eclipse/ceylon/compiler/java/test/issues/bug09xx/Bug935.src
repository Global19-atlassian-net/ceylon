package org.eclipse.ceylon.compiler.java.test.issues.bug09xx;

final class bug_935_collectMatches_ {
    
    private bug_935_collectMatches_() {
    }
    
    static <Element>.ceylon.language.Sequence bug_935_collectMatches(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element, final .ceylon.language.Sequential<? extends Element> data, final .ceylon.language.Callable<? extends .ceylon.language.Integer> search) {
        final VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>> ok = new VariableBox<.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>>((.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        final VariableBox<.ceylon.language.Sequential<? extends Element>> ko = new VariableBox<.ceylon.language.Sequential<? extends Element>>((.ceylon.language.Sequential<? extends Element>)(.ceylon.language.Sequential).ceylon.language.empty_.get_());
        final .ceylon.language.Iterable<? extends Element, ? extends .java.lang.Object> iterable$2 = data;
        final boolean isTuple$3 = iterable$2 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$2).$getArray$() != null;
        .java.lang.Object elem$1 = null;
        int i$4 = 0;
        final int length$5;
        if (isTuple$3) {
            length$5 = (int)iterable$2.getSize();
        } else {
            length$5 = 0;
        }
        .ceylon.language.Iterator<? extends Element> element$iterator$$6 = isTuple$3 ? null : iterable$2.iterator();
        loop_0: while (isTuple$3 ? i$4 < length$5 : !((elem$1 = element$iterator$$6.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$3) elem$1 = iterable$2.getFromFirst(i$4++);
            final Element element = (Element)elem$1;
            final long result = search.$call$((.java.lang.Object)element).longValue();
            if (result > 0L) {
                ok.ref = (.ceylon.language.Sequence<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$, $reified$Element), new .java.lang.Object[]{(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, $reified$Element), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(result),
                        element})}, (.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>)(.ceylon.language.Sequential)ok.ref);
            } else {
                ko.ref = (.ceylon.language.Sequence<? extends Element>).ceylon.language.Tuple.instance($reified$Element, new .java.lang.Object[]{element}, ko.ref);
            }
        }
        return (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequence.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$, $reified$Element)), .ceylon.language.Empty.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequence.class, $reified$Element)), new .java.lang.Object[]{
                ((.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>)(.ceylon.language.Sequential)ok.ref).sequence(),
                ko.ref.sequence()});
    }
}
final class bug_935_test_ {
    
    private bug_935_test_() {
    }
    
    static void bug_935_test() {
        final .ceylon.language.Sequence results = .org.eclipse.ceylon.compiler.java.test.issues.bug09xx.bug_935_collectMatches_.<.ceylon.language.String>bug_935_collectMatches(.ceylon.language.String.$TypeDescriptor$, (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("Merry Christmas"),
                .ceylon.language.String.instance("Happy Holidays")}), new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "Integer(String)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0) {
                final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                return .ceylon.language.Integer.instance(.ceylon.language.String.getSize(s));
            }
        });
        .ceylon.language.print_.print(.ceylon.language.String.instance("Uppercase letters: "));
        final .ceylon.language.Iterable<? extends .ceylon.language.Sequence<? extends .java.lang.Object>, ? extends .java.lang.Object> iterable$10 = (.ceylon.language.Sequential<? extends .ceylon.language.Sequence<? extends .java.lang.Object>>)(.ceylon.language.Sequential)results.getFromFirst(0L);
        final boolean isTuple$11 = iterable$10 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$10).$getArray$() != null;
        .java.lang.Object elem$9 = null;
        int i$12 = 0;
        final int length$13;
        if (isTuple$11) {
            length$13 = (int)iterable$10.getSize();
        } else {
            length$13 = 0;
        }
        .ceylon.language.Iterator<? extends .ceylon.language.Sequence<? extends .java.lang.Object>> result$iterator$$14 = isTuple$11 ? null : iterable$10.iterator();
        loop_1: while (isTuple$11 ? i$12 < length$13 : !((elem$9 = result$iterator$$14.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$11) elem$9 = iterable$10.getFromFirst(i$12++);
            final .ceylon.language.Sequence result = (.ceylon.language.Sequence)elem$9;
            .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("Size: ").append(((.ceylon.language.Integer)result.getFromFirst(0L)).toString()).append(", for: \'").append(((.ceylon.language.String)result.getFromFirst(1L)).toString()).append("\'").toString()));
        }
    }
}