package org.eclipse.ceylon.compiler.java.test.issues.bug18xx;

class Bug1831B implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    Bug1831B() {
    }
    
    public final .java.lang.String qname() {
        return "";
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.issues.bug18xx.Bug1831B.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.issues.bug18xx.Bug1831B.class);
}
final class f_ {
    
    private f_() {
    }
    
    static void f(final .ceylon.language.Sequential<? extends .org.eclipse.ceylon.compiler.java.test.issues.bug18xx.Bug1831B> bs) {
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> v = (
            let
            {
                final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> spread$0$iterable$ = (
                    let
                    {
                        final .ceylon.language.Iterable<? extends .org.eclipse.ceylon.compiler.java.test.issues.bug18xx.Bug1831B, ? extends .java.lang.Object> spread$1$iterable$ = bs;
                    }
                    returning new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                        
                        @.java.lang.Override
                        public final .ceylon.language.Iterator<? extends .ceylon.language.String> iterator() {
                            return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                                final .ceylon.language.Iterator<? extends .org.eclipse.ceylon.compiler.java.test.issues.bug18xx.Bug1831B> spread$1$iterator$ = spread$1$iterable$.iterator();
                                
                                @.java.lang.Override
                                public final .java.lang.Object next() {
                                    .java.lang.Object spread$1$element$;
                                    if (!((spread$1$element$ = spread$1$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                        spread$1$element$ = .ceylon.language.String.instance(((.org.eclipse.ceylon.compiler.java.test.issues.bug18xx.Bug1831B)spread$1$element$).qname());
                                    }
                                    return spread$1$element$;
                                }
                            };
                        }
                    }.sequence();
                );
            }
            returning new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iterator() {
                    return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .ceylon.language.String> spread$0$iterator$ = spread$0$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$0$element$;
                            if (!((spread$0$element$ = spread$0$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$0$element$ = .ceylon.language.Integer.instance(((.ceylon.language.String)spread$0$element$).getSize());
                            }
                            return spread$0$element$;
                        }
                    };
                }
            }.sequence();
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> v2 = (
            let
            {
                final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> spread$2$iterable$ = (
                    let
                    {
                        final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> spread$3$iterable$ = bs;
                    }
                    returning new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                        
                        @.java.lang.Override
                        public final .ceylon.language.Iterator<? extends .ceylon.language.String> iterator() {
                            return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                                final .ceylon.language.Iterator<? extends .java.lang.Object> spread$3$iterator$ = spread$3$iterable$.iterator();
                                
                                @.java.lang.Override
                                public final .java.lang.Object next() {
                                    .java.lang.Object spread$3$element$;
                                    if (!((spread$3$element$ = spread$3$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                        spread$3$element$ = .ceylon.language.String.instance(spread$3$element$.toString());
                                    }
                                    return spread$3$element$;
                                }
                            };
                        }
                    }.sequence();
                );
            }
            returning new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iterator() {
                    return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .ceylon.language.String> spread$2$iterator$ = spread$2$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$2$element$;
                            if (!((spread$2$element$ = spread$2$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$2$element$ = .ceylon.language.Integer.instance(((.ceylon.language.String)spread$2$element$).getSize());
                            }
                            return spread$2$element$;
                        }
                    };
                }
            }.sequence();
        );
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> v3 = (
            let
            {
                final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> spread$4$iterable$ = (
                    let
                    {
                        final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> spread$5$iterable$ = (
                            let
                            {
                                final .ceylon.language.Iterable<? extends .org.eclipse.ceylon.compiler.java.test.issues.bug18xx.Bug1831B, ? extends .java.lang.Object> spread$6$iterable$ = bs;
                            }
                            returning new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                                
                                @.java.lang.Override
                                public final .ceylon.language.Iterator<? extends .ceylon.language.String> iterator() {
                                    return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                                        final .ceylon.language.Iterator<? extends .org.eclipse.ceylon.compiler.java.test.issues.bug18xx.Bug1831B> spread$6$iterator$ = spread$6$iterable$.iterator();
                                        
                                        @.java.lang.Override
                                        public final .java.lang.Object next() {
                                            .java.lang.Object spread$6$element$;
                                            if (!((spread$6$element$ = spread$6$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                                spread$6$element$ = .ceylon.language.String.instance(((.org.eclipse.ceylon.compiler.java.test.issues.bug18xx.Bug1831B)spread$6$element$).qname());
                                            }
                                            return spread$6$element$;
                                        }
                                    };
                                }
                            }.sequence();
                        );
                        final long spread$5$arg$0 = 1L;
                    }
                    returning new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                        
                        @.java.lang.Override
                        public final .ceylon.language.Iterator<? extends .ceylon.language.String> iterator() {
                            return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                                final .ceylon.language.Iterator<? extends .ceylon.language.String> spread$5$iterator$ = spread$5$iterable$.iterator();
                                
                                @.java.lang.Override
                                public final .java.lang.Object next() {
                                    .java.lang.Object spread$5$element$;
                                    if (!((spread$5$element$ = spread$5$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                        spread$5$element$ = ((.ceylon.language.String)spread$5$element$).initial(spread$5$arg$0);
                                    }
                                    return spread$5$element$;
                                }
                            };
                        }
                    }.sequence();
                );
            }
            returning new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
                
                @.java.lang.Override
                public final .ceylon.language.Iterator<? extends .ceylon.language.Integer> iterator() {
                    return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                        final .ceylon.language.Iterator<? extends .ceylon.language.String> spread$4$iterator$ = spread$4$iterable$.iterator();
                        
                        @.java.lang.Override
                        public final .java.lang.Object next() {
                            .java.lang.Object spread$4$element$;
                            if (!((spread$4$element$ = spread$4$iterator$.next()) instanceof .ceylon.language.Finished)) {
                                spread$4$element$ = .ceylon.language.Integer.instance(((.ceylon.language.String)spread$4$element$).getSize());
                            }
                            return spread$4$element$;
                        }
                    };
                }
            }.sequence();
        );
    }
}