package org.eclipse.ceylon.compiler.java.test.structure.klass;

@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.ceylon.language.SerializableAnnotation$annotation$
@.org.eclipse.ceylon.compiler.java.metadata.TypeParameters({@.org.eclipse.ceylon.compiler.java.metadata.TypeParameter(
        value = "Value",
        variance = .org.eclipse.ceylon.compiler.java.metadata.Variance.NONE,
        satisfies = {"ceylon.language::Object"},
        caseTypes = {})})
class GenericWrapper<Value> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable, .org.eclipse.ceylon.compiler.java.runtime.serialization.Serializable {
    
    @.org.eclipse.ceylon.compiler.java.metadata.Jpa
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    protected GenericWrapper(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Value) {
        this((.org.eclipse.ceylon.compiler.java.runtime.serialization.$Serialization$)null, $reified$Value);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public GenericWrapper(final .org.eclipse.ceylon.compiler.java.runtime.serialization.$Serialization$ ignored, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Value) {
        this.$reified$Value = $reified$Value;
        this.val = null;
    }
    
    GenericWrapper(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Value, @.org.eclipse.ceylon.compiler.java.metadata.Name("val")
    @.org.eclipse.ceylon.common.Nullable
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("Value?")
    @.ceylon.language.SharedAnnotation$annotation$
    final Value val) {
        this.$reified$Value = $reified$Value;
        this.val = val;
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Value;
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.common.Nullable
    private final Value val;
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.org.eclipse.ceylon.common.Nullable
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("Value?")
    public final Value getVal() {
        return this.val;
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.java.lang.Override
    @.org.eclipse.ceylon.common.NonNull
    @.org.eclipse.ceylon.compiler.java.metadata.Transient
    public final .java.lang.String toString() {
        return (
            let
            {
                .ceylon.language.String $ceylontmp$1 = (
                    let
                    {
                        .java.lang.Object safe$0 = getVal();
                    }
                    returning safe$0 != null ? .ceylon.language.String.instance(safe$0.toString()) : null;
                );
            }
            returning $ceylontmp$1 != null ? $ceylontmp$1 : .ceylon.language.String.instance("null");
        ).toString();
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.klass.GenericWrapper.class, $reified$Value);
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .java.util.Collection<.ceylon.language.serialization.ReachableReference> $references$() {
        .java.util.Collection<.ceylon.language.serialization.ReachableReference> reference = new .java.util.ArrayList<.ceylon.language.serialization.ReachableReference>();
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).org.eclipse.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.org.eclipse.ceylon.compiler.java.test.structure.klass.GenericWrapper.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "val")));
        return reference;
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .java.lang.Object $get$(final .ceylon.language.serialization.ReachableReference reference) {
        switch (((.ceylon.language.serialization.Member)reference).getAttribute().getQualifiedName()) {
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::GenericWrapper.val": 
            return this.val;
        
        default: 
            throw new .java.lang.RuntimeException("unknown attribute");
        
        }
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public void $set$(final .ceylon.language.serialization.ReachableReference reference, final .java.lang.Object instance) {
        final .java.lang.invoke.MethodHandles.Lookup lookup = .java.lang.invoke.MethodHandles.lookup();
        if (reference instanceof .ceylon.language.serialization.Member) switch (((.ceylon.language.serialization.Member)reference).getAttribute().getQualifiedName()) {
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::GenericWrapper.val": 
            .org.eclipse.ceylon.compiler.java.Util.setter(lookup, "val").invokeExact(this, (Value)(Value)instance);
            break;
        
        default: 
            throw new .java.lang.RuntimeException("unknown attribute");
        
        } else throw new .ceylon.language.AssertionError("unexpected reachable reference " + reference);
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.ceylon.language.SerializableAnnotation$annotation$
@.org.eclipse.ceylon.compiler.java.metadata.Class(extendsType = "org.eclipse.ceylon.compiler.java.test.structure.klass::GenericWrapper<ceylon.language::String>")
class GenericWrapperSub extends .org.eclipse.ceylon.compiler.java.test.structure.klass.GenericWrapper<.ceylon.language.String> implements .org.eclipse.ceylon.compiler.java.runtime.serialization.Serializable {
    
    @.org.eclipse.ceylon.compiler.java.metadata.Jpa
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    protected GenericWrapperSub() {
        this((.org.eclipse.ceylon.compiler.java.runtime.serialization.$Serialization$)null);
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public GenericWrapperSub(final .org.eclipse.ceylon.compiler.java.runtime.serialization.$Serialization$ ignored) {
        super(ignored, .ceylon.language.String.$TypeDescriptor$);
    }
    
    GenericWrapperSub(@.org.eclipse.ceylon.compiler.java.metadata.Name("s")
    @.org.eclipse.ceylon.common.NonNull
    final .java.lang.String s) {
        super(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance(s));
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.klass.GenericWrapperSub.$TypeDescriptor$;
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.klass.GenericWrapperSub.class);
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .java.util.Collection<.ceylon.language.serialization.ReachableReference> $references$() {
        .java.util.Collection<.ceylon.language.serialization.ReachableReference> reference = super.$references$();
        return reference;
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .java.lang.Object $get$(final .ceylon.language.serialization.ReachableReference reference) {
        switch (((.ceylon.language.serialization.Member)reference).getAttribute().getQualifiedName()) {
        default: 
            return super.$get$(reference);
        
        }
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public void $set$(final .ceylon.language.serialization.ReachableReference reference, final .java.lang.Object instance) {
        if (reference instanceof .ceylon.language.serialization.Member) switch (((.ceylon.language.serialization.Member)reference).getAttribute().getQualifiedName()) {
        default: 
            super.$set$(reference, instance);
        
        } else throw new .ceylon.language.AssertionError("unexpected reachable reference " + reference);
    }
}