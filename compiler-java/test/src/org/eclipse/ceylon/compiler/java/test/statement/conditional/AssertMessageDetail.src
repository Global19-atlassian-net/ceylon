package org.eclipse.ceylon.compiler.java.test.statement.conditional;

final class assertMessageDetailGeneric_ {
    
    private assertMessageDetailGeneric_() {
    }
    
    static <Element>void assertMessageDetailGeneric(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element, final Element zero) {
        final .java.lang.Object one = .ceylon.language.Integer.instance(1L);
        try {
            final .java.lang.String one$1;
            .java.lang.Object one$0 = null;
            if ((one$0 = one) instanceof .ceylon.language.String) {
                one$1 = ((.ceylon.language.String)one$0).toString();
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is String one") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(false, .ceylon.language.String.$TypeDescriptor$, one$0));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\texpression has type ceylon.language::Integer which is not a subtype of ceylon.language::String"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\texpression has type ceylon.language::Integer which is not a subtype of ceylon.language::String\")"));
            }
        }
        try {
            if (.org.eclipse.ceylon.compiler.java.Util.isReified(null, $reified$Element)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Element null") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(false, $reified$Element, null));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\texpression has type ceylon.language::null which is not a subtype of ceylon.language::Integer"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\texpression has type ceylon.language::null which is not a subtype of ceylon.language::Integer\")"));
            }
        }
        try {
            if (!(one instanceof .ceylon.language.Integer)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "!is Integer one") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(true, .ceylon.language.Integer.$TypeDescriptor$, one));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\texpression has type ceylon.language::Integer"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\texpression has type ceylon.language::Integer\")"));
            }
        }
        try {
            if (!.org.eclipse.ceylon.compiler.java.Util.isReified(one, $reified$Element)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "!is Element one") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(true, $reified$Element, one));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\texpression has type ceylon.language::Integer"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\texpression has type ceylon.language::Integer\")"));
            }
        }
        try {
            if (!(one instanceof .ceylon.language.Integer)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "!is Integer one") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(true, .ceylon.language.Integer.$TypeDescriptor$, one));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\texpression has type ceylon.language::Integer"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\texpression has type ceylon.language::Integer\")"));
            }
        }
        try {
            .java.lang.Object is$6 = one;
            if (is$6 instanceof .ceylon.language.String) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "one is String") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(false, .ceylon.language.String.$TypeDescriptor$, is$6));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\texpression has type ceylon.language::Integer which is not a subtype of ceylon.language::String"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\texpression has type ceylon.language::Integer which is not a subtype of ceylon.language::String\")"));
            }
        }
        try {
            .ceylon.language.String is$7 = .ceylon.language.String.instance("");
            if (.org.eclipse.ceylon.compiler.java.Util.isReified(is$7, $reified$Element)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"\" is Element") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(false, $reified$Element, is$7));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\texpression has type ceylon.language::String which is not a subtype of ceylon.language::Integer"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\texpression has type ceylon.language::String which is not a subtype of ceylon.language::Integer\")"));
            }
        }
        final Element zero$9;
        .java.lang.Object zero$8 = null;
        if ((zero$8 = zero) != null) {
            zero$9 = (Element)zero$8;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Object zero") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(false, .ceylon.language.Object.$TypeDescriptor$, zero$8));
        }
        try {
            .ceylon.language.String lhs$10 = .ceylon.language.String.instance("foo");
            .ceylon.language.String rhs$11 = .ceylon.language.String.instance("bar");
            if (lhs$10.equals(rhs$11)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"foo\" == \"bar\"") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$10, rhs$11));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is foo"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is foo\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is bar"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is bar\")"));
            }
        }
        try {
            .ceylon.language.String lhs$12 = .ceylon.language.String.instance("foo");
            Element rhs$13 = zero$9;
            if (lhs$12.equals(rhs$13)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"foo\" == zero") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$12, rhs$13));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is foo"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is foo\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 0"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 0\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression has type ceylon.language::String"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression has type ceylon.language::String\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression has type ceylon.language::Integer"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression has type ceylon.language::Integer\")"));
            }
        }
        try {
            Element lhs$14 = zero$9;
            .ceylon.language.Integer rhs$15 = .ceylon.language.Integer.instance(1L);
            if (lhs$14.equals(rhs$15)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "zero == 1") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$14, rhs$15));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 0"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 0\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 1\")"));
            }
        }
        try {
            .ceylon.language.Integer lhs$16 = .ceylon.language.Integer.instance(1L);
            Element rhs$17 = zero$9;
            if (lhs$16.equals(rhs$17)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "1 == zero") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$16, rhs$17));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 1\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 0"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 0\")"));
            }
        }
        try {
            long lhs$18 = 1L;
            long rhs$19 = 1L;
            if (!(lhs$18 == rhs$19)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "1 != 1") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$18), .ceylon.language.Integer.instance(rhs$19)));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 1\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 1\")"));
            }
        }
        try {
            long lhs$20 = 1L;
            long rhs$21 = 1L;
            if (!(lhs$20 == rhs$21)) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "!(1 == 1)") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$20), .ceylon.language.Integer.instance(rhs$21)));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 1\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 1\")"));
            }
        }
        try {
            long lhs$22 = 1L;
            long rhs$23 = 0L;
            if (lhs$22 == rhs$23) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "!(1 != 0)") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$22), .ceylon.language.Integer.instance(rhs$23)));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 1\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 0"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 0\")"));
            }
        }
        try {
            final int smallInt = 0;
            long lhs$24 = 1L;
            long rhs$25 = smallInt;
            if (lhs$24 == rhs$25) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "1 == smallInt") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$24), .ceylon.language.Integer.instance(rhs$25)));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 1\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 0"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 0\")"));
            }
        }
        try {
            final .ceylon.language.Integer x = .ceylon.language.Integer.instance(0L);
            final .java.lang.Object y = .ceylon.language.Integer.instance(1L);
            final long y$29;
            final long x$27;
            .ceylon.language.Integer x$26 = null;
            if ((x$26 = x) != null) {
                x$27 = x$26.longValue();
                .java.lang.Object y$28 = null;
                if ((y$28 = y) instanceof .ceylon.language.Integer) {
                    y$29 = ((.ceylon.language.Integer)y$28).longValue();
                    long lhs$30 = x$27;
                    long rhs$31 = y$29;
                    if (lhs$30 == rhs$31) {
                    } else {
                        throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tunviolated " + "exists x" + .java.lang.System.lineSeparator() + "\tunviolated " + "is Integer y" + .java.lang.System.lineSeparator() + "\tviolated " + "x==y") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$30), .ceylon.language.Integer.instance(rhs$31)));
                    }
                } else {
                    throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tunviolated " + "exists x" + .java.lang.System.lineSeparator() + "\tviolated " + "is Integer y" + .java.lang.System.lineSeparator() + "\tuntested " + "x==y") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(false, .ceylon.language.Integer.$TypeDescriptor$, y$28));
                }
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "exists x" + .java.lang.System.lineSeparator() + "\tuntested " + "is Integer y" + .java.lang.System.lineSeparator() + "\tuntested " + "x==y"));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 0"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 0\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 1\")"));
            }
        }
        try {
            long lhs$32 = 1L;
            long rhs$33 = 0L;
            if (lhs$32 < rhs$33) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "1<0") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$32), .ceylon.language.Integer.instance(rhs$33)));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 1\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 0"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 0\")"));
            }
        }
        try {
            long lhs$34 = 1L;
            long rhs$35 = 0L;
            if (lhs$34 <= rhs$35) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "1<=0") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$34), .ceylon.language.Integer.instance(rhs$35)));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 1\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 0"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 0\")"));
            }
        }
        try {
            long lhs$36 = 0L;
            long rhs$37 = 1L;
            if (lhs$36 > rhs$37) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "0>1") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$36), .ceylon.language.Integer.instance(rhs$37)));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 0"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 0\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 1\")"));
            }
        }
        try {
            long lhs$38 = 0L;
            long rhs$39 = 1L;
            if (lhs$38 >= rhs$39) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "0>=1") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(.ceylon.language.Integer.instance(lhs$38), .ceylon.language.Integer.instance(rhs$39)));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 0"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 0\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 1\")"));
            }
        }
        try {
            int lhs$40 = 1;
            int middle$41 = 2;
            int rhs$42 = 2;
            if (lhs$40 < middle$41 && middle$41 < rhs$42) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "1<2<2") + .org.eclipse.ceylon.compiler.java.Util.assertWithinOpFailed(.ceylon.language.Integer.instance(lhs$40), .ceylon.language.Integer.instance(middle$41), .ceylon.language.Integer.instance(rhs$42)));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tmiddle expression is 2"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tmiddle expression is 2\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tright-hand expression is 2"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tright-hand expression is 2\")"));
            }
        }
        try {
            int lhs$43 = 1;
            int middle$44 = 1;
            int rhs$45 = 2;
            if (lhs$43 < middle$44 && middle$44 < rhs$45) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "1<1<2") + .org.eclipse.ceylon.compiler.java.Util.assertWithinOpFailed(.ceylon.language.Integer.instance(lhs$43), .ceylon.language.Integer.instance(middle$44), .ceylon.language.Integer.instance(rhs$45)));
            }
            throw new .ceylon.language.Exception(null, null);
        } catch (final .ceylon.language.AssertionError e) {
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tleft-hand expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tleft-hand expression is 1\")"));
            }
            if (.ceylon.language.String.contains(.org.eclipse.ceylon.compiler.java.Util.throwableMessage(e), .ceylon.language.String.instance("\t\tmiddle expression is 1"))) {
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "e.message.contains(\"\\t\\tmiddle expression is 1\")"));
            }
        }
    }
}
final class assertMessageDetail_ {
    
    private assertMessageDetail_() {
    }
    
    static void assertMessageDetail() {
        .org.eclipse.ceylon.compiler.java.test.statement.conditional.assertMessageDetailGeneric_.<.ceylon.language.Integer>assertMessageDetailGeneric(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(0L));
    }
}