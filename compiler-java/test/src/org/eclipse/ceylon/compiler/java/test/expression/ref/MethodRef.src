package org.eclipse.ceylon.compiler.java.test.expression.ref;

class MethodRef implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MethodRef() {
    }
    
    public final .java.lang.String nullary() {
        return "nullary()";
    }
    
    public final .java.lang.String unary(final .java.lang.String s) {
        return new .java.lang.StringBuilder().append("unary(").append(s).append(")").toString();
    }
    
    public final .java.lang.String binary(final .java.lang.String s1, final .java.lang.String s2) {
        return new .java.lang.StringBuilder().append("binary(").append(s1).append(", ").append(s2).append(")").toString();
    }
    
    public final .java.lang.String ternary(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return new .java.lang.StringBuilder().append("ternary(").append(s1).append(", ").append(s2).append(", ").append(s3).append(")").toString();
    }
    
    public final .java.lang.String nary(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
        return new .java.lang.StringBuilder().append("nary(").append(s1).append(", ").append(s2).append(", ").append(s3).append(", ").append(s4).append(")").toString();
    }
    
    public final void simple() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> nullaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String()(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$, "String()", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$() {
                        return .ceylon.language.String.instance($instance$.nullary());
                    }
                };
            }
        };
        .ceylon.language.String lhs$0 = .ceylon.language.String.instance("nullary()");
        .ceylon.language.String rhs$1 = nullaryRef.$call$((.java.lang.Object)this).$call$();
        if (lhs$0.equals(rhs$1)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullary()\" == nullaryRef(this)()") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$0, rhs$1));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                        return .ceylon.language.String.instance($instance$.unary(s));
                    }
                };
            }
        };
        .ceylon.language.String lhs$2 = .ceylon.language.String.instance("unary(u)");
        .ceylon.language.String rhs$3 = unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("u"));
        if (lhs$2.equals(rhs$3)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unary(u)\" == unaryRef(this)(\"u\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$2, rhs$3));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String, String)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        return .ceylon.language.String.instance($instance$.binary(s1, s2));
                    }
                };
            }
        };
        .ceylon.language.String lhs$4 = .ceylon.language.String.instance("binary(b1, b2)");
        .ceylon.language.String rhs$5 = binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("b1"), .ceylon.language.String.instance("b2"));
        if (lhs$4.equals(rhs$5)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binary(b1, b2)\" == binaryRef(this)(\"b1\", \"b2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$4, rhs$5));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String, String, String)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        return .ceylon.language.String.instance($instance$.ternary(s1, s2, s3));
                    }
                };
            }
        };
        .ceylon.language.String lhs$6 = .ceylon.language.String.instance("ternary(t1, t2, t3)");
        .ceylon.language.String rhs$7 = ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1"), .ceylon.language.String.instance("t2"), .ceylon.language.String.instance("t3"));
        if (lhs$6.equals(rhs$7)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternary(t1, t2, t3)\" == ternaryRef(this)(\"t1\", \"t2\", \"t3\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$6, rhs$7));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String, String, String, String)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return .ceylon.language.String.instance($instance$.nary(s1, s2, s3, s4));
                    }
                };
            }
        };
        .ceylon.language.String lhs$8 = .ceylon.language.String.instance("nary(n1, n2, n3, n4)");
        .ceylon.language.String rhs$9 = naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2"), .ceylon.language.String.instance("n3"), .ceylon.language.String.instance("n4"));
        if (lhs$8.equals(rhs$9)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nary(n1, n2, n3, n4)\" == naryRef(this)(\"n1\", \"n2\", \"n3\", \"n4\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$8, rhs$9));
        }
    }
    
    public final .java.lang.String unaryDefaulted() {
        return (
            let
            {
                .java.lang.String $ceylontmp$s$10 = unaryDefaulted$s();
            }
            returning unaryDefaulted$canonical$($ceylontmp$s$10);
        );
    }
    
    public final .java.lang.String unaryDefaulted$s() {
        return "s";
    }
    
    private .java.lang.String unaryDefaulted$canonical$(final .java.lang.String s) {
        return new .java.lang.StringBuilder().append("unaryDefaulted(").append(s).append(")").toString();
    }
    
    public final .java.lang.String unaryDefaulted(final .java.lang.String s) {
        return unaryDefaulted$canonical$(s);
    }
    
    public final .java.lang.String binaryDefaulted() {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$11 = binaryDefaulted$s1();
                .java.lang.String $ceylontmp$s2$12 = binaryDefaulted$s2($ceylontmp$s1$11);
            }
            returning binaryDefaulted$canonical$($ceylontmp$s1$11, $ceylontmp$s2$12);
        );
    }
    
    public final .java.lang.String binaryDefaulted$s1() {
        return "s1";
    }
    
    public final .java.lang.String binaryDefaulted(final .java.lang.String s1) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s2$13 = binaryDefaulted$s2(s1);
            }
            returning binaryDefaulted$canonical$(s1, $ceylontmp$s2$13);
        );
    }
    
    public final .java.lang.String binaryDefaulted$s2(final .java.lang.String s1) {
        return "s2";
    }
    
    private .java.lang.String binaryDefaulted$canonical$(final .java.lang.String s1, final .java.lang.String s2) {
        return new .java.lang.StringBuilder().append("binaryDefaulted(").append(s1).append(", ").append(s2).append(")").toString();
    }
    
    public final .java.lang.String binaryDefaulted(final .java.lang.String s1, final .java.lang.String s2) {
        return binaryDefaulted$canonical$(s1, s2);
    }
    
    public final .java.lang.String ternaryDefaulted() {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$14 = ternaryDefaulted$s1();
                .java.lang.String $ceylontmp$s2$15 = ternaryDefaulted$s2($ceylontmp$s1$14);
                .java.lang.String $ceylontmp$s3$16 = ternaryDefaulted$s3($ceylontmp$s1$14, $ceylontmp$s2$15);
            }
            returning ternaryDefaulted$canonical$($ceylontmp$s1$14, $ceylontmp$s2$15, $ceylontmp$s3$16);
        );
    }
    
    public final .java.lang.String ternaryDefaulted$s1() {
        return "s1";
    }
    
    public final .java.lang.String ternaryDefaulted(final .java.lang.String s1) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s2$17 = ternaryDefaulted$s2(s1);
                .java.lang.String $ceylontmp$s3$18 = ternaryDefaulted$s3(s1, $ceylontmp$s2$17);
            }
            returning ternaryDefaulted$canonical$(s1, $ceylontmp$s2$17, $ceylontmp$s3$18);
        );
    }
    
    public final .java.lang.String ternaryDefaulted$s2(final .java.lang.String s1) {
        return "s2";
    }
    
    public final .java.lang.String ternaryDefaulted(final .java.lang.String s1, final .java.lang.String s2) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s3$19 = ternaryDefaulted$s3(s1, s2);
            }
            returning ternaryDefaulted$canonical$(s1, s2, $ceylontmp$s3$19);
        );
    }
    
    public final .java.lang.String ternaryDefaulted$s3(final .java.lang.String s1, final .java.lang.String s2) {
        return "s3";
    }
    
    private .java.lang.String ternaryDefaulted$canonical$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return new .java.lang.StringBuilder().append("ternaryDefaulted(").append(s1).append(", ").append(s2).append(", ").append(s3).append(")").toString();
    }
    
    public final .java.lang.String ternaryDefaulted(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return ternaryDefaulted$canonical$(s1, s2, s3);
    }
    
    public final .java.lang.String naryDefaulted() {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$20 = naryDefaulted$s1();
                .java.lang.String $ceylontmp$s2$21 = naryDefaulted$s2($ceylontmp$s1$20);
                .java.lang.String $ceylontmp$s3$22 = naryDefaulted$s3($ceylontmp$s1$20, $ceylontmp$s2$21);
                .java.lang.String $ceylontmp$s4$23 = naryDefaulted$s4($ceylontmp$s1$20, $ceylontmp$s2$21, $ceylontmp$s3$22);
            }
            returning naryDefaulted$canonical$($ceylontmp$s1$20, $ceylontmp$s2$21, $ceylontmp$s3$22, $ceylontmp$s4$23);
        );
    }
    
    public final .java.lang.String naryDefaulted$s1() {
        return "s1";
    }
    
    public final .java.lang.String naryDefaulted(final .java.lang.String s1) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s2$24 = naryDefaulted$s2(s1);
                .java.lang.String $ceylontmp$s3$25 = naryDefaulted$s3(s1, $ceylontmp$s2$24);
                .java.lang.String $ceylontmp$s4$26 = naryDefaulted$s4(s1, $ceylontmp$s2$24, $ceylontmp$s3$25);
            }
            returning naryDefaulted$canonical$(s1, $ceylontmp$s2$24, $ceylontmp$s3$25, $ceylontmp$s4$26);
        );
    }
    
    public final .java.lang.String naryDefaulted$s2(final .java.lang.String s1) {
        return "s2";
    }
    
    public final .java.lang.String naryDefaulted(final .java.lang.String s1, final .java.lang.String s2) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s3$27 = naryDefaulted$s3(s1, s2);
                .java.lang.String $ceylontmp$s4$28 = naryDefaulted$s4(s1, s2, $ceylontmp$s3$27);
            }
            returning naryDefaulted$canonical$(s1, s2, $ceylontmp$s3$27, $ceylontmp$s4$28);
        );
    }
    
    public final .java.lang.String naryDefaulted$s3(final .java.lang.String s1, final .java.lang.String s2) {
        return "s3";
    }
    
    public final .java.lang.String naryDefaulted(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s4$29 = naryDefaulted$s4(s1, s2, s3);
            }
            returning naryDefaulted$canonical$(s1, s2, s3, $ceylontmp$s4$29);
        );
    }
    
    public final .java.lang.String naryDefaulted$s4(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return "s4";
    }
    
    private .java.lang.String naryDefaulted$canonical$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
        return new .java.lang.StringBuilder().append("naryDefaulted(").append(s1).append(", ").append(s2).append(", ").append(s3).append(", ").append(s4).append(")").toString();
    }
    
    public final .java.lang.String naryDefaulted(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
        return naryDefaulted$canonical$(s1, s2, s3, s4);
    }
    
    public final void defaulted() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String=)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$), "String(String=)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$() {
                        final .java.lang.String s = $instance$.unaryDefaulted$s();
                        return $calltyped$(s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s);
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s) {
                        return .ceylon.language.String.instance($instance$.unaryDefaulted(s));
                    }
                };
            }
        };
        .ceylon.language.String lhs$30 = .ceylon.language.String.instance("unaryDefaulted(u)");
        .ceylon.language.String rhs$31 = unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("u"));
        if (lhs$30.equals(rhs$31)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unaryDefaulted(u)\" == unaryRef(this)(\"u\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$30, rhs$31));
        }
        .ceylon.language.String lhs$32 = .ceylon.language.String.instance("unaryDefaulted(s)");
        .ceylon.language.String rhs$33 = unaryRef.$call$((.java.lang.Object)this).$call$();
        if (lhs$32.equals(rhs$33)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unaryDefaulted(s)\" == unaryRef(this)()") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$32, rhs$33));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String=, String=)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String=, String=)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$() {
                        final .java.lang.String s1 = $instance$.binaryDefaulted$s1();
                        final .java.lang.String s2 = $instance$.binaryDefaulted$s2(s1);
                        return $calltyped$(s1, s2);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = $instance$.binaryDefaulted$s2(s1);
                        return $calltyped$(s1, s2);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        return $calltyped$(s1, s2);
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2) {
                        return .ceylon.language.String.instance($instance$.binaryDefaulted(s1, s2));
                    }
                };
            }
        };
        .ceylon.language.String lhs$34 = .ceylon.language.String.instance("binaryDefaulted(b1, b2)");
        .ceylon.language.String rhs$35 = binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("b1"), .ceylon.language.String.instance("b2"));
        if (lhs$34.equals(rhs$35)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binaryDefaulted(b1, b2)\" == binaryRef(this)(\"b1\", \"b2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$34, rhs$35));
        }
        .ceylon.language.String lhs$36 = .ceylon.language.String.instance("binaryDefaulted(b1, s2)");
        .ceylon.language.String rhs$37 = binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("b1"));
        if (lhs$36.equals(rhs$37)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binaryDefaulted(b1, s2)\" == binaryRef(this)(\"b1\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$36, rhs$37));
        }
        .ceylon.language.String lhs$38 = .ceylon.language.String.instance("binaryDefaulted(s1, s2)");
        .ceylon.language.String rhs$39 = binaryRef.$call$((.java.lang.Object)this).$call$();
        if (lhs$38.equals(rhs$39)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binaryDefaulted(s1, s2)\" == binaryRef(this)()") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$38, rhs$39));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String=, String=, String=)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String=, String=, String=)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$() {
                        final .java.lang.String s1 = $instance$.ternaryDefaulted$s1();
                        final .java.lang.String s2 = $instance$.ternaryDefaulted$s2(s1);
                        final .java.lang.String s3 = $instance$.ternaryDefaulted$s3(s1, s2);
                        return $calltyped$(s1, s2, s3);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = $instance$.ternaryDefaulted$s2(s1);
                        final .java.lang.String s3 = $instance$.ternaryDefaulted$s3(s1, s2);
                        return $calltyped$(s1, s2, s3);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = $instance$.ternaryDefaulted$s3(s1, s2);
                        return $calltyped$(s1, s2, s3);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        return $calltyped$(s1, s2, s3);
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
                        return .ceylon.language.String.instance($instance$.ternaryDefaulted(s1, s2, s3));
                    }
                };
            }
        };
        .ceylon.language.String lhs$40 = .ceylon.language.String.instance("ternaryDefaulted(t1, t2, t3)");
        .ceylon.language.String rhs$41 = ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1"), .ceylon.language.String.instance("t2"), .ceylon.language.String.instance("t3"));
        if (lhs$40.equals(rhs$41)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternaryDefaulted(t1, t2, t3)\" == ternaryRef(this)(\"t1\", \"t2\", \"t3\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$40, rhs$41));
        }
        .ceylon.language.String lhs$42 = .ceylon.language.String.instance("ternaryDefaulted(t1, t2, s3)");
        .ceylon.language.String rhs$43 = ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1"), .ceylon.language.String.instance("t2"));
        if (lhs$42.equals(rhs$43)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternaryDefaulted(t1, t2, s3)\" == ternaryRef(this)(\"t1\", \"t2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$42, rhs$43));
        }
        .ceylon.language.String lhs$44 = .ceylon.language.String.instance("ternaryDefaulted(t1, s2, s3)");
        .ceylon.language.String rhs$45 = ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1"));
        if (lhs$44.equals(rhs$45)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternaryDefaulted(t1, s2, s3)\" == ternaryRef(this)(\"t1\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$44, rhs$45));
        }
        .ceylon.language.String lhs$46 = .ceylon.language.String.instance("ternaryDefaulted(s1, s2, s3)");
        .ceylon.language.String rhs$47 = ternaryRef.$call$((.java.lang.Object)this).$call$();
        if (lhs$46.equals(rhs$47)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternaryDefaulted(s1, s2, s3)\" == ternaryRef(this)()") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$46, rhs$47));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String=, String=, String=, String=)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String=, String=, String=, String=)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$() {
                        final .java.lang.String s1 = $instance$.naryDefaulted$s1();
                        final .java.lang.String s2 = $instance$.naryDefaulted$s2(s1);
                        final .java.lang.String s3 = $instance$.naryDefaulted$s3(s1, s2);
                        final .java.lang.String s4 = $instance$.naryDefaulted$s4(s1, s2, s3);
                        return $calltyped$(s1, s2, s3, s4);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = $instance$.naryDefaulted$s2(s1);
                        final .java.lang.String s3 = $instance$.naryDefaulted$s3(s1, s2);
                        final .java.lang.String s4 = $instance$.naryDefaulted$s4(s1, s2, s3);
                        return $calltyped$(s1, s2, s3, s4);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = $instance$.naryDefaulted$s3(s1, s2);
                        final .java.lang.String s4 = $instance$.naryDefaulted$s4(s1, s2, s3);
                        return $calltyped$(s1, s2, s3, s4);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .java.lang.String s4 = $instance$.naryDefaulted$s4(s1, s2, s3);
                        return $calltyped$(s1, s2, s3, s4);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = $param$0.length > 0 ? ((.ceylon.language.String)$param$0[0]).toString() : $instance$.naryDefaulted$s1();
                        final .java.lang.String s2 = $param$0.length > 1 ? ((.ceylon.language.String)$param$0[1]).toString() : $instance$.naryDefaulted$s2(s1);
                        final .java.lang.String s3 = $param$0.length > 2 ? ((.ceylon.language.String)$param$0[2]).toString() : $instance$.naryDefaulted$s3(s1, s2);
                        final .java.lang.String s4 = $param$0.length > 3 ? ((.ceylon.language.String)$param$0[3]).toString() : $instance$.naryDefaulted$s4(s1, s2, s3);
                        return $calltyped$(s1, s2, s3, s4);
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
                        return .ceylon.language.String.instance($instance$.naryDefaulted(s1, s2, s3, s4));
                    }
                };
            }
        };
        .ceylon.language.String lhs$48 = .ceylon.language.String.instance("naryDefaulted(n1, n2, n3, n4)");
        .ceylon.language.String rhs$49 = naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2"), .ceylon.language.String.instance("n3"), .ceylon.language.String.instance("n4"));
        if (lhs$48.equals(rhs$49)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryDefaulted(n1, n2, n3, n4)\" == naryRef(this)(\"n1\", \"n2\", \"n3\", \"n4\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$48, rhs$49));
        }
        .ceylon.language.String lhs$50 = .ceylon.language.String.instance("naryDefaulted(n1, n2, n3, s4)");
        .ceylon.language.String rhs$51 = naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2"), .ceylon.language.String.instance("n3"));
        if (lhs$50.equals(rhs$51)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryDefaulted(n1, n2, n3, s4)\" == naryRef(this)(\"n1\", \"n2\", \"n3\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$50, rhs$51));
        }
        .ceylon.language.String lhs$52 = .ceylon.language.String.instance("naryDefaulted(n1, n2, s3, s4)");
        .ceylon.language.String rhs$53 = naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2"));
        if (lhs$52.equals(rhs$53)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryDefaulted(n1, n2, s3, s4)\" == naryRef(this)(\"n1\", \"n2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$52, rhs$53));
        }
        .ceylon.language.String lhs$54 = .ceylon.language.String.instance("naryDefaulted(n1, s2, s3, s4)");
        .ceylon.language.String rhs$55 = naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"));
        if (lhs$54.equals(rhs$55)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryDefaulted(n1, s2, s3, s4)\" == naryRef(this)(\"n1\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$54, rhs$55));
        }
        .ceylon.language.String lhs$56 = .ceylon.language.String.instance("naryDefaulted(s1, s2, s3, s4)");
        .ceylon.language.String rhs$57 = naryRef.$call$((.java.lang.Object)this).$call$();
        if (lhs$56.equals(rhs$57)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryDefaulted(s1, s2, s3, s4)\" == naryRef(this)()") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$56, rhs$57));
        }
    }
    
    public final .java.lang.String nullarySequenced() {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$58 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning nullarySequenced$canonical$($ceylontmp$s$58);
        );
    }
    
    private .java.lang.String nullarySequenced$canonical$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return new .java.lang.StringBuilder().append("nullarySequenced(").append(s.toString()).append(")").toString();
    }
    
    public final .java.lang.String nullarySequenced(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return nullarySequenced$canonical$(s);
    }
    
    public final .java.lang.String unarySequenced(final .java.lang.String s1) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$59 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning unarySequenced$canonical$(s1, $ceylontmp$s$59);
        );
    }
    
    private .java.lang.String unarySequenced$canonical$(final .java.lang.String s1, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return new .java.lang.StringBuilder().append("unarySequenced(").append(s1).append("; ").append(s.toString()).append(")").toString();
    }
    
    public final .java.lang.String unarySequenced(final .java.lang.String s1, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return unarySequenced$canonical$(s1, s);
    }
    
    public final .java.lang.String binarySequenced(final .java.lang.String s1, final .java.lang.String s2) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$60 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning binarySequenced$canonical$(s1, s2, $ceylontmp$s$60);
        );
    }
    
    private .java.lang.String binarySequenced$canonical$(final .java.lang.String s1, final .java.lang.String s2, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return new .java.lang.StringBuilder().append("binarySequenced(").append(s1).append(", ").append(s2).append("; ").append(s.toString()).append(")").toString();
    }
    
    public final .java.lang.String binarySequenced(final .java.lang.String s1, final .java.lang.String s2, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return binarySequenced$canonical$(s1, s2, s);
    }
    
    public final .java.lang.String ternarySequenced(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$61 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning ternarySequenced$canonical$(s1, s2, s3, $ceylontmp$s$61);
        );
    }
    
    private .java.lang.String ternarySequenced$canonical$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return new .java.lang.StringBuilder().append("ternarySequenced(").append(s1).append(", ").append(s2).append(", ").append(s3).append("; ").append(s.toString()).append(")").toString();
    }
    
    public final .java.lang.String ternarySequenced(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return ternarySequenced$canonical$(s1, s2, s3, s);
    }
    
    public final .java.lang.String narySequenced(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$62 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning narySequenced$canonical$(s1, s2, s3, s4, $ceylontmp$s$62);
        );
    }
    
    private .java.lang.String narySequenced$canonical$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return new .java.lang.StringBuilder().append("narySequenced(").append(s1).append(", ").append(s2).append(", ").append(s3).append(", ").append(s4).append("; ").append(s.toString()).append(")").toString();
    }
    
    public final .java.lang.String narySequenced(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return narySequenced$canonical$(s1, s2, s3, s4, s);
    }
    
    public final void sequenced() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> nullaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String*)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$), "String(String*)", (short)0){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$() {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0;
                        return $calltyped$(s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$0}, .ceylon.language.empty_.get_());
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$0}, $param$1));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$0,
                                $param$1}, .ceylon.language.empty_.get_());
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1}, $param$2));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$0,
                                $param$1,
                                $param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1,
                                (.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance($instance$.nullarySequenced(s));
                    }
                };
            }
        };
        .ceylon.language.String lhs$63 = .ceylon.language.String.instance("nullarySequenced([])");
        .ceylon.language.String rhs$64 = nullaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequential).ceylon.language.empty_.get_());
        if (lhs$63.equals(rhs$64)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullarySequenced([])\" == nullaryRef(this)()") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$63, rhs$64));
        }
        .ceylon.language.String lhs$65 = .ceylon.language.String.instance("nullarySequenced([r1])");
        .ceylon.language.String rhs$66 = nullaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("r1")}, .ceylon.language.empty_.get_()));
        if (lhs$65.equals(rhs$66)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullarySequenced([r1])\" == nullaryRef(this)(\"r1\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$65, rhs$66));
        }
        .ceylon.language.String lhs$67 = .ceylon.language.String.instance("nullarySequenced([r1, r2])");
        .ceylon.language.String rhs$68 = nullaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")}, .ceylon.language.empty_.get_()));
        if (lhs$67.equals(rhs$68)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullarySequenced([r1, r2])\" == nullaryRef(this)(\"r1\", \"r2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$67, rhs$68));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String, String*)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String*)", (short)1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0.get(.ceylon.language.Integer.instance(0))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0.spanFrom(.ceylon.language.Integer.instance(1));
                        return $calltyped$(s1, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$1;
                        return $calltyped$(s1, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$1}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$1}, $param$2));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$1,
                                $param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$1,
                                (.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 1, $param$0.length - 1, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 1, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance($instance$.unarySequenced(s1, s));
                    }
                };
            }
        };
        .ceylon.language.String lhs$69 = .ceylon.language.String.instance("unarySequenced(s; [])");
        .ceylon.language.String rhs$70 = unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s"), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        if (lhs$69.equals(rhs$70)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unarySequenced(s; [])\" == unaryRef(this)(\"s\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$69, rhs$70));
        }
        .ceylon.language.String lhs$71 = .ceylon.language.String.instance("unarySequenced(s; [r1])");
        .ceylon.language.String rhs$72 = unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("r1")}, .ceylon.language.empty_.get_()));
        if (lhs$71.equals(rhs$72)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unarySequenced(s; [r1])\" == unaryRef(this)(\"s\", \"r1\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$71, rhs$72));
        }
        .ceylon.language.String lhs$73 = .ceylon.language.String.instance("unarySequenced(s; [r1, r2])");
        .ceylon.language.String rhs$74 = unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")}, .ceylon.language.empty_.get_()));
        if (lhs$73.equals(rhs$74)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unarySequenced(s; [r1, r2])\" == unaryRef(this)(\"s\", \"r1\", \"r2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$73, rhs$74));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String, String, String*)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String*)", (short)2){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1.get(.ceylon.language.Integer.instance(1))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$1.spanFrom(.ceylon.language.Integer.instance(2));
                        return $calltyped$(s1, s2, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s2, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$2;
                        return $calltyped$(s1, s2, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1, s2, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 2, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance($instance$.binarySequenced(s1, s2, s));
                    }
                };
            }
        };
        .ceylon.language.String lhs$75 = .ceylon.language.String.instance("binarySequenced(s1, s2; [])");
        .ceylon.language.String rhs$76 = binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        if (lhs$75.equals(rhs$76)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binarySequenced(s1, s2; [])\" == binaryRef(this)(\"s1\", \"s2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$75, rhs$76));
        }
        .ceylon.language.String lhs$77 = .ceylon.language.String.instance("binarySequenced(s1, s2; [r1])");
        .ceylon.language.String rhs$78 = binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("r1")}, .ceylon.language.empty_.get_()));
        if (lhs$77.equals(rhs$78)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binarySequenced(s1, s2; [r1])\" == binaryRef(this)(\"s1\", \"s2\", \"r1\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$77, rhs$78));
        }
        .ceylon.language.String lhs$79 = .ceylon.language.String.instance("binarySequenced(s1, s2; [r1, r2])");
        .ceylon.language.String rhs$80 = binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")}, .ceylon.language.empty_.get_()));
        if (lhs$79.equals(rhs$80)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binarySequenced(s1, s2; [r1, r2])\" == binaryRef(this)(\"s1\", \"s2\", \"r1\", \"r2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$79, rhs$80));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String, String, String, String*)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String, String*)", (short)3){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2.get(.ceylon.language.Integer.instance(2))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$2.spanFrom(.ceylon.language.Integer.instance(3));
                        return $calltyped$(s1, s2, s3, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s2, s3, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$3;
                        return $calltyped$(s1, s2, s3, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        return $calltyped$(s1, s2, s3, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 3, $param$0.length - 3, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        return $calltyped$(s1, s2, s3, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 3, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance($instance$.ternarySequenced(s1, s2, s3, s));
                    }
                };
            }
        };
        .ceylon.language.String lhs$81 = .ceylon.language.String.instance("ternarySequenced(s1, s2, s3; [])");
        .ceylon.language.String rhs$82 = ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        if (lhs$81.equals(rhs$82)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternarySequenced(s1, s2, s3; [])\" == ternaryRef(this)(\"s1\", \"s2\", \"s3\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$81, rhs$82));
        }
        .ceylon.language.String lhs$83 = .ceylon.language.String.instance("ternarySequenced(s1, s2, s3; [r1])");
        .ceylon.language.String rhs$84 = ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("r1")}, .ceylon.language.empty_.get_()));
        if (lhs$83.equals(rhs$84)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternarySequenced(s1, s2, s3; [r1])\" == ternaryRef(this)(\"s1\", \"s2\", \"s3\", \"r1\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$83, rhs$84));
        }
        .ceylon.language.String lhs$85 = .ceylon.language.String.instance("ternarySequenced(s1, s2, s3; [r1, r2])");
        .ceylon.language.String rhs$86 = ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")}, .ceylon.language.empty_.get_()));
        if (lhs$85.equals(rhs$86)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternarySequenced(s1, s2, s3; [r1, r2])\" == ternaryRef(this)(\"s1\", \"s2\", \"s3\", \"r1\", \"r2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$85, rhs$86));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String, String, String, String, String*)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String, String, String*)", (short)4){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$3.get(.ceylon.language.Integer.instance(3))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$3.spanFrom(.ceylon.language.Integer.instance(4));
                        return $calltyped$(s1, s2, s3, s4, s);
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return $calltyped$(s1, s2, s3, s4, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 4, $param$0.length - 4, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .ceylon.language.String $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return $calltyped$(s1, s2, s3, s4, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 4, $param$0));
                    }
                    
                    private .ceylon.language.String $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return .ceylon.language.String.instance($instance$.narySequenced(s1, s2, s3, s4, s));
                    }
                };
            }
        };
        .ceylon.language.String lhs$87 = .ceylon.language.String.instance("narySequenced(s1, s2, s3, s4; [])");
        .ceylon.language.String rhs$88 = naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), (.ceylon.language.Sequential).ceylon.language.empty_.get_());
        if (lhs$87.equals(rhs$88)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"narySequenced(s1, s2, s3, s4; [])\" == naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$87, rhs$88));
        }
        .ceylon.language.String lhs$89 = .ceylon.language.String.instance("narySequenced(s1, s2, s3, s4; [r1])");
        .ceylon.language.String rhs$90 = naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("r1")}, .ceylon.language.empty_.get_()));
        if (lhs$89.equals(rhs$90)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"narySequenced(s1, s2, s3, s4; [r1])\" == naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\", \"r1\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$89, rhs$90));
        }
        .ceylon.language.String lhs$91 = .ceylon.language.String.instance("narySequenced(s1, s2, s3, s4; [r1, r2])");
        .ceylon.language.String rhs$92 = naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")}, .ceylon.language.empty_.get_()));
        if (lhs$91.equals(rhs$92)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"narySequenced(s1, s2, s3, s4; [r1, r2])\" == naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\", \"r1\", \"r2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$91, rhs$92));
        }
    }
    
    public final .ceylon.language.Callable<? extends .ceylon.language.String> unaryUnaryMpl(final .java.lang.String s) {
        return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "String(Integer)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                final long i = ((.ceylon.language.Integer)$param$0).longValue();
                return .ceylon.language.String.instance(new .java.lang.StringBuilder().append("unaryUnaryMpl(").append(s).append(", ").append(i).append(")").toString());
            }
        };
    }
    
    public final void mpl() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>>> unaryUnaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(Integer)(String)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(Integer)(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                        return $instance$.unaryUnaryMpl(s);
                    }
                };
            }
        };
        .ceylon.language.String lhs$93 = .ceylon.language.String.instance("unaryUnaryMpl(s, 1)");
        .ceylon.language.String rhs$94 = unaryUnaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("s")).$call$((.java.lang.Object).ceylon.language.Integer.instance(1L));
        if (lhs$93.equals(rhs$94)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unaryUnaryMpl(s, 1)\" == unaryUnaryRef(this)(\"s\")(1)") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$93, rhs$94));
        }
    }
    
    public final void assortedLanguage() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.Boolean>> objectEqualsRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.Boolean>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.Boolean.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$), "Boolean(Object)(Object)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.Boolean> $call$(final .java.lang.Object $param$0) {
                final .java.lang.Object $instance$ = $param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Boolean>(.ceylon.language.Boolean.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$), "Boolean(Object)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.Boolean $call$(final .java.lang.Object $param$0) {
                        final .java.lang.Object that = $param$0;
                        return .ceylon.language.Boolean.instance($instance$.equals(that));
                    }
                };
            }
        };
        if (objectEqualsRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object)this).booleanValue()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "objectEqualsRef(this)(this)"));
        }
        if (!objectEqualsRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("")).booleanValue()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "!objectEqualsRef(this)(\"\")"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.Boolean>> stringEqualsRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.Boolean>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.Boolean.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "Boolean(Object)(String)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.Boolean> $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.String $instance$ = (.ceylon.language.String)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Boolean>(.ceylon.language.Boolean.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Object.$TypeDescriptor$), "Boolean(Object)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.Boolean $call$(final .java.lang.Object $param$0) {
                        final .java.lang.Object that = $param$0;
                        return .ceylon.language.Boolean.instance($instance$.equals(that));
                    }
                };
            }
        };
        if (stringEqualsRef.$call$((.java.lang.Object).ceylon.language.String.instance("")).$call$((.java.lang.Object).ceylon.language.String.instance("")).booleanValue()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stringEqualsRef(\"\")(\"\")"));
        }
        if (!stringEqualsRef.$call$((.java.lang.Object).ceylon.language.String.instance("")).$call$((.java.lang.Object)this).booleanValue()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "!stringEqualsRef(\"\")(this)"));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.Integer>> integerPlus = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.Integer>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.Integer.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "Integer(Integer)(Integer)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.Integer> $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.Integer $instance$ = (.ceylon.language.Integer)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "Integer(Integer)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.Integer $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.Integer other = (.ceylon.language.Integer)$param$0;
                        return $instance$.plus(other);
                    }
                };
            }
        };
        .ceylon.language.Integer lhs$95 = .ceylon.language.Integer.instance(2L);
        .ceylon.language.Integer rhs$96 = integerPlus.$call$((.java.lang.Object).ceylon.language.Integer.instance(1L)).$call$((.java.lang.Object).ceylon.language.Integer.instance(1L));
        if (lhs$95.equals(rhs$96)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "2 == integerPlus(1)(1)") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$95, rhs$96));
        }
        .ceylon.language.Integer lhs$97 = .ceylon.language.Integer.instance(1L);
        .ceylon.language.Integer rhs$98 = integerPlus.$call$((.java.lang.Object).ceylon.language.Integer.instance(0L)).$call$((.java.lang.Object).ceylon.language.Integer.instance(1L));
        if (lhs$97.equals(rhs$98)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "1 == integerPlus(0)(1)") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$97, rhs$98));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> stringPlus = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)(String)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.String $instance$ = (.ceylon.language.String)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.String other = (.ceylon.language.String)$param$0;
                        return $instance$.plus(other);
                    }
                };
            }
        };
        .ceylon.language.String lhs$99 = .ceylon.language.String.instance("foobar");
        .ceylon.language.String rhs$100 = stringPlus.$call$((.java.lang.Object).ceylon.language.String.instance("foo")).$call$((.java.lang.Object).ceylon.language.String.instance("bar"));
        if (lhs$99.equals(rhs$100)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"foobar\" == stringPlus(\"foo\")(\"bar\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$99, rhs$100));
        }
        if (stringEqualsRef.$call$((.java.lang.Object).ceylon.language.String.instance("foobar")).$call$((.java.lang.Object)stringPlus.$call$((.java.lang.Object).ceylon.language.String.instance("foo")).$call$((.java.lang.Object).ceylon.language.String.instance("bar"))).booleanValue()) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "stringEqualsRef(\"foobar\")(stringPlus(\"foo\")(\"bar\"))"));
        }
    }
    
    public final <T1>.java.lang.String nullaryParameterized(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1) {
        return "nullary()";
    }
    
    public final <T1>.java.lang.String unaryParameterized(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final T1 s) {
        return new .java.lang.StringBuilder().append("unary(").append(s.toString()).append(")").toString();
    }
    
    public final <T1, T2>.java.lang.String binaryParameterized(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2, final T1 s1, final T2 s2) {
        return new .java.lang.StringBuilder().append("binary(").append(s1.toString()).append(", ").append(s2.toString()).append(")").toString();
    }
    
    public final <T1, T2, T3>.java.lang.String ternaryParameterized(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T3, final T1 s1, final T2 s2, final T3 s3) {
        return new .java.lang.StringBuilder().append("ternary(").append(s1.toString()).append(", ").append(s2.toString()).append(", ").append(s3.toString()).append(")").toString();
    }
    
    public final <T1, T2, T3, T4>.java.lang.String naryParameterized(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T3, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T4, final T1 s1, final T2 s2, final T3 s3, final T4 s4) {
        return new .java.lang.StringBuilder().append("nary(").append(s1.toString()).append(", ").append(s2.toString()).append(", ").append(s3.toString()).append(", ").append(s4.toString()).append(")").toString();
    }
    
    public final <X>void parameterizedMethod(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X, final X x) {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> nullaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String()(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$, "String()", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$() {
                        return .ceylon.language.String.instance($instance$.nullaryParameterized(.ceylon.language.String.$TypeDescriptor$));
                    }
                };
            }
        };
        .ceylon.language.String lhs$101 = .ceylon.language.String.instance("nullary()");
        .ceylon.language.String rhs$102 = nullaryRef.$call$((.java.lang.Object)this).$call$();
        if (lhs$101.equals(rhs$102)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullary()\" == nullaryRef(this)()") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$101, rhs$102));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> nullaryXRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String()(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$, "String()", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$() {
                        return .ceylon.language.String.instance($instance$.nullaryParameterized($reified$X));
                    }
                };
            }
        };
        .ceylon.language.String lhs$103 = .ceylon.language.String.instance("nullary()");
        .ceylon.language.String rhs$104 = nullaryXRef.$call$((.java.lang.Object)this).$call$();
        if (lhs$103.equals(rhs$104)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullary()\" == nullaryXRef(this)()") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$103, rhs$104));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.String s = (.ceylon.language.String)$param$0;
                        return .ceylon.language.String.instance($instance$.unaryParameterized(.ceylon.language.String.$TypeDescriptor$, s));
                    }
                };
            }
        };
        .ceylon.language.String lhs$105 = .ceylon.language.String.instance("unary(u)");
        .ceylon.language.String rhs$106 = unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("u"));
        if (lhs$105.equals(rhs$106)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unary(u)\" == unaryRef(this)(\"u\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$105, rhs$106));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> unaryXRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$X)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(X)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$X), "String(X)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final X s = (X)$param$0;
                        return .ceylon.language.String.instance($instance$.unaryParameterized($reified$X, s));
                    }
                };
            }
        };
        .ceylon.language.String lhs$107 = .ceylon.language.String.instance("unary(foo)");
        .ceylon.language.String rhs$108 = unaryXRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object)x);
        if (lhs$107.equals(rhs$108)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unary(foo)\" == unaryXRef(this)(x)") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$107, rhs$108));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String, String)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .ceylon.language.String s1 = (.ceylon.language.String)$param$0;
                        final .ceylon.language.String s2 = (.ceylon.language.String)$param$1;
                        return .ceylon.language.String.instance($instance$.binaryParameterized(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, s1, s2));
                    }
                };
            }
        };
        .ceylon.language.String lhs$109 = .ceylon.language.String.instance("binary(b1, b2)");
        .ceylon.language.String rhs$110 = binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("b1"), .ceylon.language.String.instance("b2"));
        if (lhs$109.equals(rhs$110)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binary(b1, b2)\" == binaryRef(this)(\"b1\", \"b2\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$109, rhs$110));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String, String, String)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .ceylon.language.String s1 = (.ceylon.language.String)$param$0;
                        final .ceylon.language.String s2 = (.ceylon.language.String)$param$1;
                        final .ceylon.language.String s3 = (.ceylon.language.String)$param$2;
                        return .ceylon.language.String.instance($instance$.ternaryParameterized(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, s1, s2, s3));
                    }
                };
            }
        };
        .ceylon.language.String lhs$111 = .ceylon.language.String.instance("ternary(t1, t2, t3)");
        .ceylon.language.String rhs$112 = ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1"), .ceylon.language.String.instance("t2"), .ceylon.language.String.instance("t3"));
        if (lhs$111.equals(rhs$112)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternary(t1, t2, t3)\" == ternaryRef(this)(\"t1\", \"t2\", \"t3\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$111, rhs$112));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$), "String(String, String, String, String)(MethodRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "String(String, String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object... $param$0) {
                        final .ceylon.language.String s1 = (.ceylon.language.String)$param$0[0];
                        final .ceylon.language.String s2 = (.ceylon.language.String)$param$0[1];
                        final .ceylon.language.String s3 = (.ceylon.language.String)$param$0[2];
                        final .ceylon.language.String s4 = (.ceylon.language.String)$param$0[3];
                        return .ceylon.language.String.instance($instance$.naryParameterized(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, s1, s2, s3, s4));
                    }
                };
            }
        };
        .ceylon.language.String lhs$113 = .ceylon.language.String.instance("nary(n1, n2, n3, n4)");
        .ceylon.language.String rhs$114 = naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2"), .ceylon.language.String.instance("n3"), .ceylon.language.String.instance("n4"));
        if (lhs$113.equals(rhs$114)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nary(n1, n2, n3, n4)\" == naryRef(this)(\"n1\", \"n2\", \"n3\", \"n4\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$113, rhs$114));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.Inner Inner$new$(final .java.lang.String s) {
        return new Inner(s);
    }
    
    public class Inner implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected Inner(final .java.lang.String s) {
            this.s = s;
        }
        private final .java.lang.String s;
        
        private final .java.lang.String getS$priv$() {
            return this.s;
        }
        
        public final .java.lang.String m(final .java.lang.String s2) {
            return new .java.lang.StringBuilder().append("Inner(").append(getS$priv$()).append(").m(").append(s2).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.Inner.class));
        }
    }
    
    public final void innerClass() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .ceylon.language.String>> innerMRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.Inner.class))), "String(String)(MethodRef.Inner)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.Inner $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.Inner)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "String(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0).toString();
                        return .ceylon.language.String.instance($instance$.m(s2));
                    }
                };
            }
        };
        .ceylon.language.String lhs$115 = .ceylon.language.String.instance("Inner(foo).m(bar)");
        .ceylon.language.String rhs$116 = innerMRef.$call$((.java.lang.Object)Inner$new$("foo")).$call$((.java.lang.Object).ceylon.language.String.instance("bar"));
        if (lhs$115.equals(rhs$116)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"Inner(foo).m(bar)\" == innerMRef(Inner(\"foo\"))(\"bar\")") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$115, rhs$116));
        }
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef.class);
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Method
final class methodRef_ {
    
    private methodRef_() {
    }
    
    static void methodRef() {
        final .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef mr = new .org.eclipse.ceylon.compiler.java.test.expression.ref.MethodRef();
        mr.simple();
        mr.defaulted();
        mr.sequenced();
        mr.mpl();
        mr.assortedLanguage();
        mr.<.ceylon.language.String>parameterizedMethod(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("foo"));
        mr.innerClass();
    }
}