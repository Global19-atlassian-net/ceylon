package org.eclipse.ceylon.compiler.java.test.interop;

class OptionalInterface<X> extends .org.eclipse.ceylon.compiler.java.test.interop.JavaClass implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface {
    
    protected OptionalInterface(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X) {
        super();
        this.$reified$X = $reified$X;
        this.prop1 = null;
        this.prop2 = null;
        this.stringProp1 = null;
        this.stringProp2 = null;
        this.bla = null;
        this.prop3 = null;
        this.prop4 = null;
    }
    
    OptionalInterface(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X, final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface x) {
        super();
        this.$reified$X = $reified$X;
        this.prop1 = x;
        this.prop2 = null;
        this.stringProp1 = "asd";
        this.stringProp2 = null;
        this.bla = null;
        this.prop3 = x;
        this.prop4 = x;
    }
    private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X;
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface method(final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface x) {
        final .java.lang.Object o1 = .org.eclipse.ceylon.compiler.java.Util.checkNull(x.getProp1());
        final .java.lang.Object o2 = .org.eclipse.ceylon.compiler.java.Util.checkNull(x.method(x));
        x.setProp1(x);
        x.setProp1(null);
        x.setProp1(x.getProp1());
        x.method(x.getProp1());
        method(.org.eclipse.ceylon.compiler.java.Util.checkNull(x.getProp1()));
        return .org.eclipse.ceylon.compiler.java.Util.checkNull(.org.eclipse.ceylon.compiler.java.Util.checkNull(x.getProp1()).getProp1());
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface method2(final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface x) {
        .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface x$1;
        if ((x$1 = x) != null) {
            final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface x$2 = x$1;
            .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface z$4;
            if ((z$4 = x$2.getProp1()) != null) {
                final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface z$5 = z$4;
            }
            final boolean b1 = x$2.getProp1() != null;
            final .ceylon.language.Sequential<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> existsInComprehension1 = new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface, .java.lang.Object>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class), .ceylon.language.Null.$TypeDescriptor$){
                
                public final .ceylon.language.Iterator<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> iterator() {
                    return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class)){
                        {
                            $iterator$0 = new .org.eclipse.ceylon.compiler.java.language.LazyIterable<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface, .java.lang.Object>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, false){
                                
                                @.java.lang.Override
                                protected final .java.lang.Object $evaluate$(int $index$) {
                                    switch ($index$) {
                                    case 0: 
                                        return x$2;
                                    
                                    default: 
                                        return null;
                                    
                                    }
                                }
                            }.iterator();
                        }
                        private final .ceylon.language.Iterator<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> $iterator$0;
                        private .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface obj;
                        private boolean obj$exhausted$;
                        
                        private final boolean obj() {
                            final .java.lang.Object $ceylontmp$item$6 = $iterator$0.next();
                            obj$exhausted$ = $ceylontmp$item$6 == .ceylon.language.finished_.get_();
                            if (obj$exhausted$) {
                                return false;
                            } else {
                                obj = (.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface)$ceylontmp$item$6;
                                return true;
                            }
                        }
                        private .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface z$8;
                        
                        private final boolean $next$1() {
                            ifcomp_1: while (true) {
                                if (!this.obj()) break ifcomp_1;
                                final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface obj = this.obj;
                                .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface z$7 = null;
                                if ((z$7 = obj.getProp1()) != null) {
                                    z$8 = z$7;
                                    break ifcomp_1;
                                }
                            }
                            return !obj$exhausted$;
                        }
                        
                        public final .java.lang.Object next() {
                            if (this.$next$1()) {
                                final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface z$8 = this.z$8;
                                final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface obj = this.obj;
                                return z$8;
                            } else return .ceylon.language.finished_.get_();
                        }
                    };
                }
            }.sequence();
            .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface z$10;
            if ((z$10 = x$2.method(x$2)) != null) {
                final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface z$11 = z$10;
            }
            final boolean b2 = x$2.method(x$2) != null;
            final .ceylon.language.Sequential<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> existsInComprehension2 = new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface, .java.lang.Object>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class), .ceylon.language.Null.$TypeDescriptor$){
                
                public final .ceylon.language.Iterator<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> iterator() {
                    return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class)){
                        {
                            $iterator$0 = new .org.eclipse.ceylon.compiler.java.language.LazyIterable<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface, .java.lang.Object>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 1, false){
                                
                                @.java.lang.Override
                                protected final .java.lang.Object $evaluate$(int $index$) {
                                    switch ($index$) {
                                    case 0: 
                                        return x$2;
                                    
                                    default: 
                                        return null;
                                    
                                    }
                                }
                            }.iterator();
                        }
                        private final .ceylon.language.Iterator<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> $iterator$0;
                        private .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface obj;
                        private boolean obj$exhausted$;
                        
                        private final boolean obj() {
                            final .java.lang.Object $ceylontmp$item$12 = $iterator$0.next();
                            obj$exhausted$ = $ceylontmp$item$12 == .ceylon.language.finished_.get_();
                            if (obj$exhausted$) {
                                return false;
                            } else {
                                obj = (.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface)$ceylontmp$item$12;
                                return true;
                            }
                        }
                        private .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface z$14;
                        
                        private final boolean $next$1() {
                            ifcomp_1: while (true) {
                                if (!this.obj()) break ifcomp_1;
                                final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface obj = this.obj;
                                .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface z$13 = null;
                                if ((z$13 = obj.method(x$2)) != null) {
                                    z$14 = z$13;
                                    break ifcomp_1;
                                }
                            }
                            return !obj$exhausted$;
                        }
                        
                        public final .java.lang.Object next() {
                            if (this.$next$1()) {
                                final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface z$14 = this.z$14;
                                final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface obj = this.obj;
                                return z$14;
                            } else return .ceylon.language.finished_.get_();
                        }
                    };
                }
            }.sequence();
            final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface elseOp1 = (
                let
                {
                    .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface $ceylontmp$15 = x$2.getProp1();
                }
                returning $ceylontmp$15 != null ? $ceylontmp$15 : x$2;
            );
            final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface elseOp2 = (
                let
                {
                    .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface $ceylontmp$16 = x$2.method(x$2);
                }
                returning $ceylontmp$16 != null ? $ceylontmp$16 : x$2;
            );
            final .java.lang.Object correspondenceCheck = .org.eclipse.ceylon.compiler.java.Util.checkNull(x$2.getCorrespondence()).get(x$2);
            final .ceylon.language.Sequential<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> seqCheck = (.ceylon.language.Sequence<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class), new .java.lang.Object[]{.org.eclipse.ceylon.compiler.java.Util.checkNull(x$2.getProp1())});
            final .ceylon.language.Sequential<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> seqNoCheck = (.ceylon.language.Sequence<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class), new .java.lang.Object[]{.org.eclipse.ceylon.compiler.java.Util.checkNull(x$2.getProp1())});
            final .ceylon.language.Sequential<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> seqCheckSpread = (.ceylon.language.Sequence<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class), new .java.lang.Object[]{.org.eclipse.ceylon.compiler.java.Util.checkNull(x$2.getProp1())});
            final .ceylon.language.Sequential<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> seqNoCheckSpread = (.ceylon.language.Sequence<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class), new .java.lang.Object[]{.org.eclipse.ceylon.compiler.java.Util.checkNull(x$2.getProp1())});
            final .ceylon.language.Sequential<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> comprehensionCheck = (.ceylon.language.Sequence<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface>)(.ceylon.language.Sequence)new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface, .java.lang.Object>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
                
                public final .ceylon.language.Iterator<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> iterator() {
                    return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class)){
                        {
                            $iterator$0 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1), .ceylon.language.Integer.instance(2)).iterator();
                        }
                        private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                        private .ceylon.language.Integer i;
                        private boolean i$exhausted$;
                        
                        private final boolean i() {
                            final .java.lang.Object $ceylontmp$item$17 = $iterator$0.next();
                            i$exhausted$ = $ceylontmp$item$17 == .ceylon.language.finished_.get_();
                            if (i$exhausted$) {
                                return false;
                            } else {
                                i = (.ceylon.language.Integer)$ceylontmp$item$17;
                                return true;
                            }
                        }
                        
                        public final .java.lang.Object next() {
                            if (this.i()) {
                                final .ceylon.language.Integer i = this.i;
                                return .org.eclipse.ceylon.compiler.java.Util.checkNull(x$2.getProp1());
                            } else return .ceylon.language.finished_.get_();
                        }
                    };
                }
            }.sequence();
            final .ceylon.language.Sequential<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> comprehensionNoCheck = (.ceylon.language.Sequence<? extends .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface>)(.ceylon.language.Sequence)new .org.eclipse.ceylon.compiler.java.language.AbstractIterable<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface, .java.lang.Object>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType){
                
                public final .ceylon.language.Iterator<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface> iterator() {
                    return new .org.eclipse.ceylon.compiler.java.language.AbstractIterator<.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface.class)){
                        {
                            $iterator$0 = .ceylon.language.span_.<.ceylon.language.Integer>span(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Integer.instance(1), .ceylon.language.Integer.instance(2)).iterator();
                        }
                        private final .ceylon.language.Iterator<? extends .ceylon.language.Integer> $iterator$0;
                        private .ceylon.language.Integer i;
                        private boolean i$exhausted$;
                        
                        private final boolean i() {
                            final .java.lang.Object $ceylontmp$item$18 = $iterator$0.next();
                            i$exhausted$ = $ceylontmp$item$18 == .ceylon.language.finished_.get_();
                            if (i$exhausted$) {
                                return false;
                            } else {
                                i = (.ceylon.language.Integer)$ceylontmp$item$18;
                                return true;
                            }
                        }
                        
                        public final .java.lang.Object next() {
                            if (this.i()) {
                                final .ceylon.language.Integer i = this.i;
                                return .org.eclipse.ceylon.compiler.java.Util.checkNull(x$2.getProp1());
                            } else return .ceylon.language.finished_.get_();
                        }
                    };
                }
            }.sequence();
            return .org.eclipse.ceylon.compiler.java.Util.checkNull(x$2.getProp1()).getProp1();
        }
        final .java.lang.Object x$19 = x;
        return null;
    }
    
    @.java.lang.Override
    public final .java.lang.String stringMethod(final .java.lang.String x) {
        return x;
    }
    
    @.java.lang.Override
    public final .java.lang.String stringMethod2(final .java.lang.String x) {
        return x;
    }
    private .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface prop1;
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface getProp1() {
        return this.prop1;
    }
    
    @.java.lang.Override
    public final void setProp1(final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface prop1) {
        this.prop1 = prop1;
    }
    private .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface prop2;
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface getProp2() {
        return this.prop2;
    }
    
    @.java.lang.Override
    public final void setProp2(final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface prop2) {
        this.prop2 = prop2;
    }
    private .java.lang.String stringProp1;
    
    @.java.lang.Override
    public final .java.lang.String getStringProp1() {
        return this.stringProp1;
    }
    
    @.java.lang.Override
    public final void setStringProp1(final .java.lang.String stringProp1) {
        this.stringProp1 = stringProp1;
    }
    private .java.lang.String stringProp2;
    
    @.java.lang.Override
    public final .java.lang.String getStringProp2() {
        return this.stringProp2;
    }
    
    @.java.lang.Override
    public final void setStringProp2(final .java.lang.String stringProp2) {
        this.stringProp2 = stringProp2;
    }
    private .ceylon.language.String bla;
    
    private final .ceylon.language.String getBla$priv$() {
        return this.bla;
    }
    
    private final void setBla$priv$(final .ceylon.language.String bla) {
        this.bla = bla;
    }
    
    @.java.lang.Override
    public final .java.lang.String getStringProp3() {
        return (
            let
            {
                .ceylon.language.String $ceylontmp$20 = getBla$priv$();
            }
            returning $ceylontmp$20 != null ? $ceylontmp$20.toString() : null;
        );
    }
    private final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface prop3;
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface getProp3() {
        return this.prop3;
    }
    private final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface prop4;
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.interop.JavaOptionalInterface getProp4() {
        return this.prop4;
    }
    
    @.java.lang.Override
    public final .ceylon.language.Correspondence<? super .java.lang.Object, ? extends .java.lang.Object> getCorrespondence() {
        return (.ceylon.language.Correspondence<? super .java.lang.Object, ? extends .java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.OptionalInterface.class, $reified$X);
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Name("classSubClass")
@.org.eclipse.ceylon.compiler.java.metadata.Object
@.org.eclipse.ceylon.compiler.java.metadata.Class(extendsType = "org.eclipse.ceylon.compiler.java.test.interop::OptionalityClass")
final class classSubClass_ extends .org.eclipse.ceylon.compiler.java.test.interop.OptionalityClass implements .java.io.Serializable, .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType {
    
    private classSubClass_() {
        super();
        this.realClass = null;
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    private .java.lang.Object readResolve() {
        return .org.eclipse.ceylon.compiler.java.test.interop.classSubClass_.get_();
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.classSubClass_.class);
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.common.Nullable
    private final .org.eclipse.ceylon.compiler.java.test.interop.OptionalityClass realClass;
    
    @.org.eclipse.ceylon.common.Nullable
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("org.eclipse.ceylon.compiler.java.test.interop::OptionalityClass?")
    private final .org.eclipse.ceylon.compiler.java.test.interop.OptionalityClass getRealClass$priv$() {
        return this.realClass;
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.java.lang.Override
    @.org.eclipse.ceylon.common.NonNull
    @.org.eclipse.ceylon.compiler.java.metadata.Transient
    public final .java.lang.String getType() {
        return (
            let
            {
                .ceylon.language.String $ceylontmp$22 = (
                    let
                    {
                        .org.eclipse.ceylon.compiler.java.test.interop.OptionalityClass safe$21 = getRealClass$priv$();
                    }
                    returning safe$21 != null ? .ceylon.language.String.instance(safe$21.getType()) : null;
                );
            }
            returning $ceylontmp$22 != null ? $ceylontmp$22.toString() : null;
        );
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.java.lang.Override
    @.org.eclipse.ceylon.common.NonNull
    public final .java.lang.String typeMethod() {
        return (
            let
            {
                .ceylon.language.String $ceylontmp$24 = (
                    let
                    {
                        .org.eclipse.ceylon.compiler.java.test.interop.OptionalityClass safe$23 = getRealClass$priv$();
                    }
                    returning safe$23 != null ? .ceylon.language.String.instance(safe$23.getType()) : null;
                );
            }
            returning $ceylontmp$24 != null ? $ceylontmp$24.toString() : null;
        );
    }
    private static final .org.eclipse.ceylon.compiler.java.test.interop.classSubClass_ $object$;
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    private static volatile boolean $init$$object$ = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            $object$ = new .org.eclipse.ceylon.compiler.java.test.interop.classSubClass_();
            .org.eclipse.ceylon.compiler.java.test.interop.classSubClass_.$init$$object$ = true;
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            $object$ = null;
            .org.eclipse.ceylon.compiler.java.test.interop.classSubClass_.$init$$object$ = false;
        }
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.common.NonNull
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("org.eclipse.ceylon.compiler.java.test.interop::classSubClass")
    static .org.eclipse.ceylon.compiler.java.test.interop.classSubClass_ get_() {
        if (.org.eclipse.ceylon.compiler.java.test.interop.classSubClass_.$init$$object$) {
            return .org.eclipse.ceylon.compiler.java.test.interop.classSubClass_.$object$;
        } else {
            if ($initException$ != null) .org.eclipse.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'classSubClass\' before it was set");
        }
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.interop.classSubClass_.$TypeDescriptor$;
    }
}