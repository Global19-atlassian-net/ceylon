package org.eclipse.ceylon.compiler.java.test.statement.conditional;

class MethodIfNonEmptySequence implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MethodIfNonEmptySequence() {
    }
    
    public final long m(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x) {
        .ceylon.language.Sequential<? extends .ceylon.language.Integer> x$1;
        if ((x$1 = x) instanceof .ceylon.language.Sequence) {
            final .ceylon.language.Sequence<? extends .ceylon.language.Integer> x$2 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)x$1;
            final .ceylon.language.Sequence<? extends .ceylon.language.Integer> s = x$2;
            return ((.ceylon.language.Integer)(.java.lang.Object)x$2.getFirst()).longValue();
        }
        final .ceylon.language.Empty x$3 = (.ceylon.language.Empty)(.ceylon.language.Sequential)x;
        return 0L;
    }
    
    public final long mvar(final .ceylon.language.Sequential<? extends .ceylon.language.Integer> x) {
        .ceylon.language.Sequential<? extends .ceylon.language.Integer> s$5;
        if ((s$5 = x) instanceof .ceylon.language.Sequence) {
            final .ceylon.language.Sequence<? extends .ceylon.language.Integer> s$6 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)s$5;
            return ((.ceylon.language.Integer)(.java.lang.Object)s$6.getFirst()).longValue();
        }
        return 0L;
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.statement.conditional.MethodIfNonEmptySequence.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.statement.conditional.MethodIfNonEmptySequence.class);
}