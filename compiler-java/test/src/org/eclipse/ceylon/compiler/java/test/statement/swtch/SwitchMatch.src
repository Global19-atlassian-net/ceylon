package org.eclipse.ceylon.compiler.java.test.statement.swtch;

abstract class SwitchMatchTop implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    SwitchMatchTop() {
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop.class);
}
final class switchMatch_foo_ extends .org.eclipse.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop implements .java.io.Serializable {
    
    private switchMatch_foo_() {
        super();
    }
    
    private .java.lang.Object readResolve() {
        return .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.get_();
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.class);
    private static final .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_ $object$;
    private static volatile boolean $init$$object$ = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            $object$ = new .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_();
            .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.$init$$object$ = true;
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            $object$ = null;
            .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.$init$$object$ = false;
        }
    }
    
    static .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_ get_() {
        if (.org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.$init$$object$) {
            return .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.$object$;
        } else {
            if ($initException$ != null) .org.eclipse.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'switchMatch_foo\' before it was set");
        }
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.$TypeDescriptor$;
    }
}
final class switchMatch_bar_ extends .org.eclipse.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop implements .java.io.Serializable {
    
    private switchMatch_bar_() {
        super();
    }
    
    private .java.lang.Object readResolve() {
        return .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_.get_();
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_.class);
    private static final .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_ $object$;
    private static volatile boolean $init$$object$ = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            $object$ = new .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_();
            .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_.$init$$object$ = true;
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            $object$ = null;
            .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_.$init$$object$ = false;
        }
    }
    
    static .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_ get_() {
        if (.org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_.$init$$object$) {
            return .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_.$object$;
        } else {
            if ($initException$ != null) .org.eclipse.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'switchMatch_bar\' before it was set");
        }
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_.$TypeDescriptor$;
    }
}
class SwitchMatch implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    SwitchMatch() {
    }
    
    private final void onObject$priv$() {
        final .org.eclipse.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop fb = .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.get_();
        {
            .org.eclipse.ceylon.compiler.java.test.statement.swtch.SwitchMatchTop sel$0 = fb;
            if (sel$0 == .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_foo_.get_()) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("foo"));
            } else if (sel$0 == .org.eclipse.ceylon.compiler.java.test.statement.swtch.switchMatch_bar_.get_()) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("bar"));
            } else throw new .org.eclipse.ceylon.compiler.java.language.EnumeratedTypeError("Supposedly exhaustive switch was not exhaustive");
        }
    }
    
    private final void onBoolean$priv$() {
        final boolean b = true;
        {
            boolean sel$1 = b;
            if (sel$1 == true) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("true"));
            } else if (sel$1 == false) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("false"));
            } else throw new .org.eclipse.ceylon.compiler.java.language.EnumeratedTypeError("Supposedly exhaustive switch was not exhaustive");
        }
    }
    
    private final <T>T box$priv$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final T t) {
        return t;
    }
    
    private final void onBoxedBoolean$priv$() {
        final boolean b = true;
        {
            .ceylon.language.Boolean sel$2 = <.ceylon.language.Boolean>box$priv$(.ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.instance(b));
            if (sel$2.booleanValue() == true) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("true"));
            } else if (sel$2.booleanValue() == false) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("false"));
            } else throw new .org.eclipse.ceylon.compiler.java.language.EnumeratedTypeError("Supposedly exhaustive switch was not exhaustive");
        }
    }
    
    private final void onNullableType$priv$() {
        final .ceylon.language.Boolean b = .ceylon.language.Boolean.instance(true);
        {
            .ceylon.language.Boolean sel$3 = b;
            if (sel$3 == null) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("null"));
            } else if (sel$3.booleanValue() == true) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("true"));
            } else if (sel$3.booleanValue() == false) {
                .ceylon.language.print_.print(.ceylon.language.String.instance("false"));
            } else throw new .org.eclipse.ceylon.compiler.java.language.EnumeratedTypeError("Supposedly exhaustive switch was not exhaustive");
        }
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.statement.swtch.SwitchMatch.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.statement.swtch.SwitchMatch.class);
}