package org.eclipse.ceylon.compiler.java.test.structure.method;

@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.TypeParameters({@.org.eclipse.ceylon.compiler.java.metadata.TypeParameter(
        value = "S",
        variance = .org.eclipse.ceylon.compiler.java.metadata.Variance.NONE,
        satisfies = {},
        caseTypes = {})})
@.org.eclipse.ceylon.compiler.java.metadata.Class(constructors = true)
class StaticMethod<S> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S;
    
    @.ceylon.language.StaticAnnotation$annotation$
    @.org.eclipse.ceylon.common.NonNull
    private static final <S>.java.lang.String nonSharedStat$priv$(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S) {
        return "I\'m static";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final <S, T>.java.lang.String sharedStat(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s$0 = .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.<S, T>sharedStat$s($reified$S, $reified$T);
                T $ceylontmp$t$1 = .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.<S, T>sharedStat$t($reified$S, $reified$T, $ceylontmp$s$0);
            }
            returning <S, T>sharedStat$canonical$($reified$S, $reified$T, $ceylontmp$s$0, $ceylontmp$t$1);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final <S, T>.java.lang.String sharedStat$s(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        return "";
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final <S, T>.java.lang.String sharedStat(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .java.lang.String s) {
        return (
            let
            {
                T $ceylontmp$t$2 = .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.<S, T>sharedStat$t($reified$S, $reified$T, s);
            }
            returning <S, T>sharedStat$canonical$($reified$S, $reified$T, s, $ceylontmp$t$2);
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final <S, T>T sharedStat$t(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .java.lang.String s) {
        return null;
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    private static <S, T>.java.lang.String sharedStat$canonical$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, final .java.lang.String s, final T t) {
        return "I\'m static";
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.StaticAnnotation$annotation$
    @.org.eclipse.ceylon.common.NonNull
    @.org.eclipse.ceylon.compiler.java.metadata.TypeParameters({@.org.eclipse.ceylon.compiler.java.metadata.TypeParameter(
            value = "T",
            variance = .org.eclipse.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    public static final <S, T>.java.lang.String sharedStat(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Name("s")
    @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
    @.org.eclipse.ceylon.common.NonNull
    final .java.lang.String s, @.org.eclipse.ceylon.compiler.java.metadata.Name("t")
    @.org.eclipse.ceylon.compiler.java.metadata.Defaulted
    @.org.eclipse.ceylon.common.Nullable
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T?")
    final T t) {
        return <S, T>sharedStat$canonical$($reified$S, $reified$T, s, t);
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.StaticAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("S")
    public static final <S>S generic(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S) {
        return (S)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    public StaticMethod(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$S) {
        this.$reified$S = $reified$S;
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.class, $reified$S);
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Method
final class staticMethod_ {
    
    private staticMethod_() {
    }
    
    static void staticMethod() {
        .java.lang.String s = .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.<.ceylon.language.String, .ceylon.language.Integer>sharedStat(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$);
        s = (
            let
            {
                .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor arg$3$reified$0 = .ceylon.language.String.$TypeDescriptor$;
                .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor arg$3$reified$1 = .ceylon.language.Integer.$TypeDescriptor$;
                .java.lang.String arg$3$0 = .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.sharedStat$s(arg$3$reified$0, arg$3$reified$1);
                .ceylon.language.Integer arg$3$1 = .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.sharedStat$t(arg$3$reified$0, arg$3$reified$1, arg$3$0);
            }
            returning .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.<.ceylon.language.String, .ceylon.language.Integer>sharedStat(arg$3$reified$0, arg$3$reified$1, arg$3$0, arg$3$1);
        );
        s = (
            let
            {
                .java.lang.String arg$4$0 = "";
                .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor arg$4$reified$0 = .ceylon.language.String.$TypeDescriptor$;
                .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor arg$4$reified$1 = .ceylon.language.Integer.$TypeDescriptor$;
                .ceylon.language.Integer arg$4$1 = .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.sharedStat$t(arg$4$reified$0, arg$4$reified$1, arg$4$0);
            }
            returning .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.<.ceylon.language.String, .ceylon.language.Integer>sharedStat(arg$4$reified$0, arg$4$reified$1, arg$4$0, arg$4$1);
        );
        s = (
            let
            {
                .java.lang.String arg$5$0 = "";
                .ceylon.language.Integer arg$5$1 = .ceylon.language.Integer.instance(1L);
                .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor arg$5$reified$0 = .ceylon.language.String.$TypeDescriptor$;
                .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor arg$5$reified$1 = .ceylon.language.Integer.$TypeDescriptor$;
            }
            returning .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.<.ceylon.language.String, .ceylon.language.Integer>sharedStat(arg$5$reified$0, arg$5$reified$1, arg$5$0, arg$5$1);
        );
        final .ceylon.language.Callable<? extends .ceylon.language.String> ref = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$)), "String(String=, Integer?=)", (short)-1){
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.String $call$() {
                final .java.lang.String s = .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.sharedStat$s(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$);
                final .ceylon.language.Integer t = .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.sharedStat$t(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, s);
                return $calltyped$(s, t);
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.String $call$(final .java.lang.Object $param$0) {
                final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                final .ceylon.language.Integer t = .org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.sharedStat$t(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, s);
                return $calltyped$(s, t);
            }
            
            @.java.lang.Override
            @.org.eclipse.ceylon.compiler.java.metadata.Ignore
            public .ceylon.language.String $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                final .ceylon.language.Integer t = (.ceylon.language.Integer)$param$1;
                return $calltyped$(s, t);
            }
            
            private .ceylon.language.String $calltyped$(final .java.lang.String s, final .ceylon.language.Integer t) {
                return .ceylon.language.String.instance(.org.eclipse.ceylon.compiler.java.test.structure.method.StaticMethod.sharedStat(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$, s, t));
            }
        };
        ref.$call$((.java.lang.Object).ceylon.language.String.instance(""), .ceylon.language.Integer.instance(1L));
        final .java.lang.Object i = (
            let
            {
                .java.lang.String arg$6$0 = "123";
                long arg$6$1 = .ceylon.language.Integer.parse$radix(arg$6$0);
            }
            returning .ceylon.language.Integer.parse(arg$6$0, arg$6$1);
        );
    }
}