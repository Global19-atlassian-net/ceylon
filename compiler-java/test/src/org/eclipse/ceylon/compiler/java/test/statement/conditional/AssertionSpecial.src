package org.eclipse.ceylon.compiler.java.test.statement.conditional;

final class assertionSpecial_ {
    
    private assertionSpecial_() {
    }
    
    static void assertionSpecial() {
        final .java.lang.Object v1 = .ceylon.language.Integer.instance(5L);
        final long a1$1;
        .java.lang.Object a1$0 = null;
        if ((a1$0 = v1) instanceof .ceylon.language.Integer) {
            a1$1 = ((.ceylon.language.Integer)a1$0).longValue();
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Integer a1 = v1") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(false, .ceylon.language.Integer.$TypeDescriptor$, a1$0));
        }
        .ceylon.language.print_.print(.ceylon.language.Integer.instance(-a1$1));
        final .ceylon.language.String v2 = .ceylon.language.String.instance("X");
        final .java.lang.String a2$3;
        .ceylon.language.String a2$2 = null;
        if ((a2$2 = v2) != null) {
            a2$3 = a2$2.toString();
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "exists a2 = v2"));
        }
        .ceylon.language.print_.print(.ceylon.language.Integer.instance(.ceylon.language.String.getSize(a2$3)));
        final .ceylon.language.Sequential<? extends .ceylon.language.Integer> v3 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L)});
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> a3$5;
        .ceylon.language.Sequential<? extends .ceylon.language.Integer> a3$4 = null;
        if ((a3$4 = v3) instanceof .ceylon.language.Sequence) {
            a3$5 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)a3$4;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nonempty a3 = v3"));
        }
        .ceylon.language.print_.print(.ceylon.language.Integer.instance(a3$5.getSize()));
        final .ceylon.language.Sequence<? extends .ceylon.language.Integer> v3$7;
        .ceylon.language.Sequential<? extends .ceylon.language.Integer> v3$6 = null;
        if ((v3$6 = v3) instanceof .ceylon.language.Sequence) {
            v3$7 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>)(.ceylon.language.Sequence)v3$6;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "nonempty v3"));
        }
        final .java.lang.String v2$9;
        .ceylon.language.String v2$8 = null;
        if ((v2$8 = v2) != null) {
            v2$9 = v2$8.toString();
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "exists v2"));
        }
        final long v1$11;
        .java.lang.Object v1$10 = null;
        if ((v1$10 = v1) instanceof .ceylon.language.Integer) {
            v1$11 = ((.ceylon.language.Integer)v1$10).longValue();
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Integer v1") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(false, .ceylon.language.Integer.$TypeDescriptor$, v1$10));
        }
    }
}