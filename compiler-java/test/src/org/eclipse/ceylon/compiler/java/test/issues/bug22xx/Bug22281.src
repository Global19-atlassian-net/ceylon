package org.eclipse.ceylon.compiler.java.test.issues.bug22xx;

@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Method
final class bug2228Shit_ {
    
    private bug2228Shit_() {
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.TypeParameters({
            @.org.eclipse.ceylon.compiler.java.metadata.TypeParameter(
                    value = "T",
                    variance = .org.eclipse.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {"Element[]"},
                    caseTypes = {}),
            @.org.eclipse.ceylon.compiler.java.metadata.TypeParameter(
                    value = "Element",
                    variance = .org.eclipse.ceylon.compiler.java.metadata.Variance.NONE,
                    satisfies = {},
                    caseTypes = {})})
    static <T extends .ceylon.language.Sequential<? extends Element>, Element>void bug2228Shit(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.ceylon.language.Sequence<? extends .java.lang.Object>>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tupleWithRest($reified$T, $reified$Element, 2, .ceylon.language.Integer.$TypeDescriptor$), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}),
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.Integer.instance(2L)})}, .ceylon.language.empty_.get_()));
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.ceylon.language.Sequence<? extends .java.lang.Object>>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}),
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.Integer.instance(2L)}),
                (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.String.instance("a")})}, .ceylon.language.empty_.get_()));
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Method
final class bug2228Method_ {
    
    private bug2228Method_() {
    }
    
    static void bug2228Method() {
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.ceylon.language.Sequential<? extends .ceylon.language.Integer>>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Integer.$TypeDescriptor$), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.empty_.get_(),
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}),
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.Integer.instance(2L)})}, .ceylon.language.empty_.get_()));
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.ceylon.language.Sequence<? extends .ceylon.language.Integer>>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequence.class, .ceylon.language.Integer.$TypeDescriptor$), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}),
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.Integer.instance(2L)})}, .ceylon.language.empty_.get_()));
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.ceylon.language.Sequence<? extends .ceylon.language.Integer>>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{(.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)})}, .ceylon.language.empty_.get_()));
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.java.lang.Object>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.Integer.$TypeDescriptor$), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}),
                .ceylon.language.empty_.get_()}, .ceylon.language.empty_.get_()));
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.java.lang.Object>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.empty_.get_(),
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}),
                (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.String.instance("a")})}, .ceylon.language.empty_.get_()));
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.ceylon.language.Sequence<? extends .java.lang.Object>>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}),
                (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.String.instance("a")})}, .ceylon.language.empty_.get_()));
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.ceylon.language.Sequence<? extends .java.lang.Object>>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{(.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.String.instance("a")})}, .ceylon.language.empty_.get_()));
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.ceylon.language.Sequence<? extends .java.lang.Object>>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, 1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Boolean.$TypeDescriptor$), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Integer.instance(1L)}),
                (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.String.instance("a")}),
                (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.true_.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.String.instance("a"),
                        .ceylon.language.Boolean.instance(true)}),
                (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.true_.$TypeDescriptor$, .ceylon.language.false_.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.String.instance("a"),
                        .ceylon.language.Boolean.instance(true),
                        .ceylon.language.Boolean.instance(false)})}, .ceylon.language.empty_.get_()));
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Test_.<.ceylon.language.Sequence<? extends .java.lang.Object>>bug2228Test(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, true, -1, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.Object.$TypeDescriptor$, new .java.lang.Object[]{
                (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.String.instance("a")}),
                (.ceylon.language.Sequence<? extends .java.lang.Object>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), new .java.lang.Object[]{
                        .ceylon.language.Integer.instance(1L),
                        .ceylon.language.String.instance("a"),
                        .ceylon.language.String.instance("b")})}, .ceylon.language.empty_.get_()));
        .org.eclipse.ceylon.compiler.java.test.issues.bug22xx.bug2228Shit_.<.ceylon.language.Sequential<? extends .ceylon.language.Integer>, .ceylon.language.Integer>bug2228Shit(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.Integer.$TypeDescriptor$), .ceylon.language.Integer.$TypeDescriptor$);
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Method
final class bug2228Test_ {
    
    private bug2228Test_() {
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    static <T>void bug2228Test(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        (
            let
            {
                .ceylon.language.Sequential<? extends .java.lang.Object> $ceylontmp$args$9 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                <T>bug2228Test($reified$T, $ceylontmp$args$9);
            }
            returning null;
        );
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.TypeParameters({@.org.eclipse.ceylon.compiler.java.metadata.TypeParameter(
            value = "T",
            variance = .org.eclipse.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {},
            caseTypes = {})})
    static <T>void bug2228Test(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Name("args")
    @.org.eclipse.ceylon.compiler.java.metadata.Sequenced
    @.org.eclipse.ceylon.common.NonNull
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Object[]")
    final .ceylon.language.Sequential<? extends .java.lang.Object> args) {
        .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append("Testing with ").append(((.ceylon.language.meta.model.Type<? extends T>)(.ceylon.language.meta.model.Type<? extends T>).ceylon.language.meta.typeLiteral_.typeLiteral($reified$T)).toString()).toString()));
        final .ceylon.language.Iterable<? extends .java.lang.Object, ? extends .java.lang.Object> iterable$2 = args;
        final boolean isTuple$3 = iterable$2 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$2).$getArray$() != null;
        .java.lang.Object elem$1 = null;
        int i$4 = 0;
        final int length$5;
        if (isTuple$3) {
            length$5 = (int)iterable$2.getSize();
        } else {
            length$5 = 0;
        }
        .ceylon.language.Iterator<? extends .java.lang.Object> arg$iterator$$6 = isTuple$3 ? null : iterable$2.iterator();
        loop_0: while (isTuple$3 ? i$4 < length$5 : !((elem$1 = arg$iterator$$6.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$3) elem$1 = iterable$2.getFromFirst(i$4++);
            final .java.lang.Object arg = elem$1;
            .ceylon.language.print_.print(.ceylon.language.String.instance(new .java.lang.StringBuilder().append(" value ").append(arg.toString()).toString()));
            final T arg$8;
            .java.lang.Object arg$7 = null;
            if (.org.eclipse.ceylon.compiler.java.Util.isReified(arg$7 = arg, $reified$T)) {
                arg$8 = (T)arg$7;
            } else {
                throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is T arg") + .org.eclipse.ceylon.compiler.java.Util.assertIsFailed(false, $reified$T, arg$7));
            }
        }
    }
}