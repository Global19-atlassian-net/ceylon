package org.eclipse.ceylon.compiler.java.test.interop;

final class staticRefs_ {
    
    private staticRefs_() {
    }
    
    static void staticRefs() {
        final .java.lang.Runtime runtime = .org.eclipse.ceylon.compiler.java.Util.checkNull(.java.lang.Runtime.getRuntime());
        final .java.io.PrintStream stdout = .org.eclipse.ceylon.compiler.java.Util.checkNull(.java.lang.System.out);
        final .java.io.PrintStream stderr = .org.eclipse.ceylon.compiler.java.Util.checkNull(.java.lang.System.err);
        final .java.lang.Thread.State runnableState = .java.lang.Thread.State.RUNNABLE;
        final .ceylon.language.Callable<? extends .java.lang.Object> exitRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Integer.$TypeDescriptor$), "Anything(Integer)", (short)-1){
            
            @.java.lang.Override
            public .java.lang.Object $call$(final .java.lang.Object $param$0) {
                final int arg0 = .org.eclipse.ceylon.compiler.java.Util.toInt(((.ceylon.language.Integer)$param$0).longValue());
                return (
                    let
                    {
                        .java.lang.System.exit(arg0);
                    }
                    returning null;
                );
            }
        };
        final .ceylon.language.Callable<? extends .ceylon.language.Integer> compareRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Boolean.$TypeDescriptor$, .ceylon.language.Boolean.$TypeDescriptor$), "Integer(Boolean, Boolean)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Integer $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final boolean arg0 = ((.ceylon.language.Boolean)$param$0).booleanValue();
                final boolean arg1 = ((.ceylon.language.Boolean)$param$1).booleanValue();
                return .ceylon.language.Integer.instance(.java.lang.Boolean.compare(arg0, arg1));
            }
        };
        final .ceylon.language.Callable<? extends .java.io.File[]> fsRootsRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.java.io.File[]>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.language.ObjectArray.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.io.File.class)), .ceylon.language.Empty.$TypeDescriptor$, "ObjectArray<File>()", (short)-1){
            
            @.java.lang.Override
            public .java.io.File[] $call$() {
                return .java.io.File.listRoots();
            }
        };
        final .ceylon.language.Callable<? extends .java.util.Locale.Builder> localeBuilderRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.java.util.Locale.Builder>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.util.Locale.class), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.util.Locale.Builder.class)), .ceylon.language.Empty.$TypeDescriptor$, "Locale.Builder()", (short)-1){
            
            @.java.lang.Override
            public .java.util.Locale.Builder $call$() {
                return new .java.util.Locale.Builder();
            }
        };
        final long procs = .org.eclipse.ceylon.compiler.java.Util.checkNull(.java.lang.Runtime.getRuntime()).availableProcessors();
        .java.lang.System.out.flush();
        .java.lang.System.err.flush();
        .java.lang.System.exit(0);
        final long cmp = .java.lang.Boolean.compare(true, false);
        final .java.io.File[] roots = .org.eclipse.ceylon.compiler.java.Util.checkNull(.java.io.File.listRoots());
        final .java.util.Locale.Builder localeBuilder = new .java.util.Locale.Builder();
        final .java.lang.management.MemoryMXBean memoryBean = .java.lang.management.ManagementFactory.getMemoryMXBean();
        final .java.lang.management.MemoryMXBean memoryBean2 = .java.lang.management.ManagementFactory.getMemoryMXBean();
        .org.eclipse.ceylon.compiler.java.Util.checkNull(.java.lang.management.ManagementFactory.getMemoryMXBean()).gc();
        final .java.lang.Class<.java.lang.management.MemoryMXBean> klass = (.java.lang.Class<.java.lang.management.MemoryMXBean>)(.java.lang.Object).ceylon.language.nothing_.get_();
        final .javax.management.ObjectName on = .org.eclipse.ceylon.compiler.java.Util.checkNull(.java.lang.management.ManagementFactory.<.java.lang.management.MemoryMXBean>getPlatformMXBean(klass)).getObjectName();
        final .org.eclipse.ceylon.compiler.java.test.interop.JavaWithStaticMembers a = .org.eclipse.ceylon.compiler.java.test.interop.JavaWithStaticMembers.getAttribute();
        final .org.eclipse.ceylon.compiler.java.test.interop.JavaWithStaticMembersSubClass a2 = .org.eclipse.ceylon.compiler.java.test.interop.JavaWithStaticMembersSubClass.getAttribute();
    }
}