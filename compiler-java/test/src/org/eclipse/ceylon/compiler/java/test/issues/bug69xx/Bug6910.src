package org.eclipse.ceylon.compiler.java.test.issues.bug69xx;

final class bug6910_ {
    
    private bug6910_() {
    }
    private static final .ceylon.language.Callable<? extends .ceylon.language.Sequence<? extends .ceylon.language.Boolean>> $object$;
    private static volatile boolean $init$$object$ = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            $object$ = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Sequence<? extends .ceylon.language.Boolean>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Boolean.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Boolean.$TypeDescriptor$), "[Boolean](Boolean)", (short)-1){
                
                @.java.lang.Override
                public .ceylon.language.Sequence<? extends .ceylon.language.Boolean> $call$(final .java.lang.Object $param$0) {
                    final boolean b = ((.ceylon.language.Boolean)$param$0).booleanValue();
                    return (
                        let
                        {
                            .ceylon.language.Sequence<? extends .ceylon.language.Boolean> $ceylontmp$ifResult$0;
                            if (b) {
                                $ceylontmp$ifResult$0 = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>)(.ceylon.language.Sequence)(.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.true_.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Boolean.instance(true)});
                            } else {
                                $ceylontmp$ifResult$0 = (.ceylon.language.Sequence<? extends .ceylon.language.Boolean>)(.ceylon.language.Sequence)(.ceylon.language.Sequence<? extends .ceylon.language.Boolean>).ceylon.language.Tuple.instance(.ceylon.language.false_.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.Boolean.instance(false)});
                            }
                        }
                        returning $ceylontmp$ifResult$0;
                    );
                }
            };
            .org.eclipse.ceylon.compiler.java.test.issues.bug69xx.bug6910_.$init$$object$ = true;
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            $object$ = null;
            .org.eclipse.ceylon.compiler.java.test.issues.bug69xx.bug6910_.$init$$object$ = false;
        }
    }
    
    public static .ceylon.language.Callable<? extends .ceylon.language.Sequence<? extends .ceylon.language.Boolean>> get_() {
        if (.org.eclipse.ceylon.compiler.java.test.issues.bug69xx.bug6910_.$init$$object$) {
            return .org.eclipse.ceylon.compiler.java.test.issues.bug69xx.bug6910_.$object$;
        } else {
            if ($initException$ != null) .org.eclipse.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'bug6910\' before it was set");
        }
    }
}