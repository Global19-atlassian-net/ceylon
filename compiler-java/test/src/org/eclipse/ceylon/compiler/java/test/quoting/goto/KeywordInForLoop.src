package org.eclipse.ceylon.compiler.java.test.quoting.$goto;

final class keywordInForLoop_ {
    
    private keywordInForLoop_() {
    }
    
    static void keywordInForLoop(final .ceylon.language.Sequence<? extends .ceylon.language.Integer> seq) {
        final int $ceylontmp$first$2 = 1;
        final int $ceylontmp$last$3 = 10;
        final boolean $ceylontmp$increasing$4 = .ceylon.language.Integer.offset($ceylontmp$last$3, $ceylontmp$first$2) >= 0;
        final int $ceylontmp$incr$5 = $ceylontmp$increasing$4 ? 1 : -1;
        int byte$8 = $ceylontmp$first$2;
        int $ceylontmp$element$7 = $ceylontmp$first$2;
        boolean $ceylontmp$f$6 = false;
        loop_0: do {
            if ($ceylontmp$f$6) $ceylontmp$element$7 += $ceylontmp$incr$5;
            $ceylontmp$f$6 = true;
            byte$8 = $ceylontmp$element$7;
            final int $byte = byte$8;
            $ceylontmp$continue$1: do {
                if ($byte > 5L) {
                }
            }             while (false);
        }         while ($ceylontmp$increasing$4 ? byte$8 - $ceylontmp$last$3 != 0 : byte$8 - $ceylontmp$last$3 != 0);
        boolean loopentered$10 = false;
        .java.lang.Object elem$11;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> $byte$iterator$$12 = seq.iterator();
        loop_1: while (!((elem$11 = $byte$iterator$$12.next()) instanceof .ceylon.language.Finished)) {
            loopentered$10 = true;
            final long $byte = ((.ceylon.language.Integer)elem$11).longValue();
            if ($byte > 5L) {
            }
        }
        if (!loopentered$10) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        boolean loopentered$14 = false;
        .java.lang.Object elem$15;
        .ceylon.language.Iterator<? extends .ceylon.language.String> $byte$iterator$$16 = new .org.eclipse.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, null, .ceylon.language.String.instance("aap"), .ceylon.language.String.instance("noot"), .ceylon.language.String.instance("mies")).iterator();
        loop_2: while (!((elem$15 = $byte$iterator$$16.next()) instanceof .ceylon.language.Finished)) {
            loopentered$14 = true;
            final .java.lang.String $byte = ((.ceylon.language.String)elem$15).toString();
        }
        if (!loopentered$14) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        boolean loopentered$17 = false;
        .java.lang.Object elem$18;
        .ceylon.language.Iterator<? extends .ceylon.language.String> $byte$iterator$$19 = new .org.eclipse.ceylon.compiler.java.language.LazyIterable<.ceylon.language.String, .java.lang.Object>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.null_.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 3, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.String.instance("aap");
                
                case 1: 
                    return null;
                
                case 2: 
                    return .ceylon.language.String.instance("mies");
                
                default: 
                    return null;
                
                }
            }
        }.iterator();
        loop_3: while (!((elem$18 = $byte$iterator$$19.next()) instanceof .ceylon.language.Finished)) {
            loopentered$17 = true;
            final .ceylon.language.String $byte = (.ceylon.language.String)elem$18;
        }
        if (!loopentered$17) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        boolean loopentered$20 = false;
        .java.lang.Object elem$21;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> $byte$iterator$$22 = new .org.eclipse.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, null, .ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L)).iterator();
        loop_4: while (!((elem$21 = $byte$iterator$$22.next()) instanceof .ceylon.language.Finished)) {
            loopentered$20 = true;
            final long $byte = ((.ceylon.language.Integer)elem$21).longValue();
        }
        if (!loopentered$20) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        boolean loopentered$23 = false;
        .java.lang.Object elem$24;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> $byte$iterator$$25 = new .org.eclipse.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Integer, .java.lang.Object>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.null_.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 3, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return .ceylon.language.Integer.instance(1L);
                
                case 1: 
                    return null;
                
                case 2: 
                    return .ceylon.language.Integer.instance(3L);
                
                default: 
                    return null;
                
                }
            }
        }.iterator();
        loop_5: while (!((elem$24 = $byte$iterator$$25.next()) instanceof .ceylon.language.Finished)) {
            loopentered$23 = true;
            final .ceylon.language.Integer $byte = (.ceylon.language.Integer)elem$24;
        }
        if (!loopentered$23) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        .java.lang.String s$27 = "wim";
        int length$28 = s$27.length();
        loop_6: for (int index$29 = 0; index$29 < length$28; ) {
            final int $byte = s$27.codePointAt(index$29);
            index$29 += .java.lang.Character.charCount($byte);
        }
        boolean loopentered$30 = false;
        .java.lang.Object elem$31;
        .ceylon.language.Iterator<? extends .ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String>> elem$31$iterator$ = new .org.eclipse.ceylon.compiler.java.language.LazyIterable<.ceylon.language.Entry<? extends .ceylon.language.Integer, ? extends .ceylon.language.String>, .java.lang.Object>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Entry.class, .ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, 3, false){
            
            @.java.lang.Override
            protected final .java.lang.Object $evaluate$(int $index$) {
                switch ($index$) {
                case 0: 
                    return new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(1L), .ceylon.language.String.instance("a"));
                
                case 1: 
                    return new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(2L), .ceylon.language.String.instance("b"));
                
                case 2: 
                    return new .ceylon.language.Entry<.ceylon.language.Integer, .ceylon.language.String>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.instance(3L), .ceylon.language.String.instance("c"));
                
                default: 
                    return null;
                
                }
            }
        }.iterator();
        loop_7: while (!((elem$31 = elem$31$iterator$.next()) instanceof .ceylon.language.Finished)) {
            loopentered$30 = true;
            final long $byte = ((.ceylon.language.Integer)((.ceylon.language.Entry)elem$31).getKey()).longValue();
            final .java.lang.String $long = ((.ceylon.language.String)((.ceylon.language.Entry)elem$31).getItem()).toString();
            if ($byte > 5L) {
            }
        }
        if (!loopentered$30) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
    }
}
public final class keywordInForLoop2_ {
    
    private keywordInForLoop2_() {
    }
    
    public static long keywordInForLoop2(final .ceylon.language.Sequence<? extends .ceylon.language.Integer> seq) {
        boolean doforelse$33 = true;
        boolean loopentered$34 = false;
        .java.lang.Object elem$35;
        .ceylon.language.Iterator<? extends .ceylon.language.Integer> $byte$iterator$$36 = seq.iterator();
        loop_8: while (!((elem$35 = $byte$iterator$$36.next()) instanceof .ceylon.language.Finished)) {
            loopentered$34 = true;
            final long $byte = ((.ceylon.language.Integer)elem$35).longValue();
            loop_9: while (true) {
                if (true) {
                    boolean doforelse$37 = true;
                    boolean loopentered$38 = false;
                    .java.lang.Object elem$39;
                    .ceylon.language.Iterator<? extends .ceylon.language.Integer> $long$iterator$$40 = seq.iterator();
                    loop_10: while (!((elem$39 = $long$iterator$$40.next()) instanceof .ceylon.language.Finished)) {
                        loopentered$38 = true;
                        final long $long = ((.ceylon.language.Integer)elem$39).longValue();
                        if ($byte > $long) {
                            doforelse$37 = false;
                            break loop_10;
                        }
                    }
                    if (!loopentered$38) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
                    if (doforelse$37) {
                        return 1L;
                    }
                    break loop_9;
                } else {
                    break loop_9;
                }
            }
            doforelse$33 = false;
            break loop_8;
        }
        if (!loopentered$34) throw new .ceylon.language.AssertionError("nonempty Iterable with initial \'finished\' element");
        if (doforelse$33) {
            return 0L;
        }
        return 2L;
    }
}
class KeywordInForLoop3 implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected KeywordInForLoop3() {
        super();
        this.age = 0L;
    }
    
    KeywordInForLoop3(final long age) {
        this.age = age;
        final .ceylon.language.Sequential<? extends .org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3> people = (.ceylon.language.Sequence<? extends .org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3>).ceylon.language.Tuple.instance(.org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3.$TypeDescriptor$, new .java.lang.Object[]{
                new .org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3(1L),
                new .org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3(18L)});
        final boolean minors;
        boolean minors$42 = false;
        boolean doforelse$43 = true;
        final .ceylon.language.Iterable<? extends .org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3, ? extends .java.lang.Object> iterable$46 = people;
        final boolean isTuple$47 = iterable$46 instanceof .ceylon.language.Tuple && ((.ceylon.language.Tuple)iterable$46).$getArray$() != null;
        .java.lang.Object elem$45 = null;
        int i$48 = 0;
        final int length$49;
        if (isTuple$47) {
            length$49 = (int)iterable$46.getSize();
        } else {
            length$49 = 0;
        }
        .ceylon.language.Iterator<? extends .org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3> $byte$iterator$$50 = isTuple$47 ? null : iterable$46.iterator();
        loop_11: while (isTuple$47 ? i$48 < length$49 : !((elem$45 = $byte$iterator$$50.next()) instanceof .ceylon.language.Finished)) {
            if (isTuple$47) elem$45 = iterable$46.getFromFirst(i$48++);
            final .org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3 $byte = (.org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3)elem$45;
            if ($byte.getAge() < 18L) {
                minors$42 = true;
                final boolean minors$52 = minors$42;
                doforelse$43 = false;
                break loop_11;
            }
        }
        if (doforelse$43) {
            minors$42 = false;
            final boolean minors$53 = minors$42;
        }
        minors = minors$42;
    }
    private final long age;
    
    public final long getAge() {
        return this.age;
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.quoting.$goto.KeywordInForLoop3.class);
}