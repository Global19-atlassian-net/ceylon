package org.eclipse.ceylon.compiler.java.test.structure.attribute;

class SmallConversion implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    protected SmallConversion() {
        super();
        this.big = 0L;
    }
    
    SmallConversion(final long big) {
        this.big = big;
    }
    private final long big;
    
    private final long getBig$priv$() {
        return this.big;
    }
    
    public int getAr() {
        return (int)getBig$priv$();
    }
    
    public int getAr2() {
        return (int)getBig$priv$();
    }
    
    public int mr() {
        return (int)getBig$priv$();
    }
    
    public int mr2() {
        return (int)(int)getBig$priv$();
    }
    
    private final void mp$priv$(final int p) {
    }
    
    public final void mpc() {
        mp$priv$((int)getBig$priv$());
        (
            let
            {
                int arg$0$0 = (int)getBig$priv$();
                mp$priv$(arg$0$0);
            }
            returning null;
        );
    }
    
    private final void locals$priv$() {
        final int sm = (int)getBig$priv$();
        
        final class sm2$getter$_ implements .org.eclipse.ceylon.compiler.java.language.GetterInt {
            
            private sm2$getter$_() {
            }
            
            public int get_() {
                return (int).org.eclipse.ceylon.compiler.java.test.structure.attribute.SmallConversion.this.getBig$priv$();
            }
        }
        final .org.eclipse.ceylon.compiler.java.language.GetterInt sm2$getter$_ = new sm2$getter$_();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.attribute.SmallConversion.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.attribute.SmallConversion.class);
}
class SmallConversion2 extends .org.eclipse.ceylon.compiler.java.test.structure.attribute.SmallConversion {
    
    protected SmallConversion2() {
        super();
        this.big = 0L;
        this.bigm = null;
        this.ar = 0;
    }
    
    SmallConversion2(final long big, final .ceylon.language.Callable<? extends .ceylon.language.Integer> bigm) {
        super(big);
        this.big = big;
        this.bigm = bigm;
        this.ar = (int)getBig$priv$();
    }
    private final long big;
    
    private final long getBig$priv$() {
        return this.big;
    }
    private final .ceylon.language.Callable<? extends .ceylon.language.Integer> bigm;
    
    private final long bigm$priv$() {
        return bigm.$call$().longValue();
    }
    private final int ar;
    
    @.java.lang.Override
    public final int getAr() {
        return this.ar;
    }
    
    @.java.lang.Override
    public final int getAr2() {
        return (int)getBig$priv$();
    }
    
    @.java.lang.Override
    public final int mr() {
        return (int)bigm$priv$();
    }
    
    @.java.lang.Override
    public final int mr2() {
        return (int)(int)getBig$priv$();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.attribute.SmallConversion2.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.attribute.SmallConversion2.class);
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Method
final class smallConversionToplvels_ {
    
    private smallConversionToplvels_() {
    }
    
    static void smallConversionToplvels() {
        .org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversion1_.set_((int).org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversionBig_.get_());
        .org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversion3_.set_((int).org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversionBig_.get_());
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Attribute
@.org.eclipse.ceylon.compiler.java.metadata.Name("smallConversionBig")
final class smallConversionBig_ {
    
    private smallConversionBig_() {
    }
    
    @.org.eclipse.ceylon.compiler.java.metadata.Transient
    public static long get_() {
        return 1L;
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Attribute
@.org.eclipse.ceylon.compiler.java.metadata.Name("smallConversion1")
final class smallConversion1_ {
    
    private smallConversion1_() {
    }
    private static int $object$;
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    private static volatile boolean $init$$object$ = false;
    private static final .java.lang.Throwable $initException$;
    static {
        try {
            .org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversion1_.$object$ = .org.eclipse.ceylon.compiler.java.Util.toInt(.org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversionBig_.get_());
            .org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversion1_.$init$$object$ = true;
            $initException$ = null;
        } catch (.java.lang.Throwable x) {
            $initException$ = x;
            .org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversion1_.$object$ = 0;
            .org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversion1_.$init$$object$ = false;
        }
    }
    
    @.ceylon.language.VariableAnnotation$annotation$
    @.ceylon.language.SmallAnnotation$annotation$
    public static int get_() {
        if (.org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversion1_.$init$$object$) {
            return .org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversion1_.$object$;
        } else {
            if ($initException$ != null) .org.eclipse.ceylon.compiler.java.Util.rethrow($initException$);
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'smallConversion1\' before it was set");
        }
    }
    
    public static void set_(@.org.eclipse.ceylon.compiler.java.metadata.Name("smallConversion1")
    final int smallConversion1) {
        if ($initException$ != null) .org.eclipse.ceylon.compiler.java.Util.rethrow($initException$);
        .org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversion1_.$object$ = smallConversion1;
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Attribute
@.org.eclipse.ceylon.compiler.java.metadata.Name("smallConversion2")
final class smallConversion2_ {
    
    private smallConversion2_() {
    }
    
    @.ceylon.language.SmallAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.Transient
    public static int get_() {
        return (int).org.eclipse.ceylon.compiler.java.test.structure.attribute.smallConversionBig_.get_();
    }
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Attribute
@.org.eclipse.ceylon.compiler.java.metadata.Name("smallConversion3")
final class smallConversion3_ {
    
    private smallConversion3_() {
    }
    
    @.ceylon.language.SmallAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.Transient
    public static int get_() {
        return 1;
    }
    
    public static void set_(@.org.eclipse.ceylon.compiler.java.metadata.Name("smallConversion3")
    final int smallConversion3) {
    }
}