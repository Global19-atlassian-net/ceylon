package org.eclipse.ceylon.compiler.java.test.expression.ref;

class ConstructorRef implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.unaryDefaulted_ $name$) {
        (
            let
            {
                .java.lang.String $ceylontmp$s$0 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$unaryDefaulted$s();
                this($name$, $ceylontmp$s$0);
            }
            returning null;
        );
    }
    
    ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.binaryDefaulted_ $name$) {
        (
            let
            {
                .java.lang.String $ceylontmp$s1$1 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$binaryDefaulted$s1();
                .java.lang.String $ceylontmp$s2$2 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$binaryDefaulted$s2($ceylontmp$s1$1);
                this($name$, $ceylontmp$s1$1, $ceylontmp$s2$2);
            }
            returning null;
        );
    }
    
    ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.binaryDefaulted_ $name$, final .java.lang.String s1$param$) {
        (
            let
            {
                .java.lang.String $ceylontmp$s2$3 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$binaryDefaulted$s2(s1$param$);
                this($name$, s1$param$, $ceylontmp$s2$3);
            }
            returning null;
        );
    }
    
    ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ternaryDefaulted_ $name$) {
        (
            let
            {
                .java.lang.String $ceylontmp$s1$4 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$ternaryDefaulted$s1();
                .java.lang.String $ceylontmp$s2$5 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$ternaryDefaulted$s2($ceylontmp$s1$4);
                .java.lang.String $ceylontmp$s3$6 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$ternaryDefaulted$s3($ceylontmp$s1$4, $ceylontmp$s2$5);
                this($name$, $ceylontmp$s1$4, $ceylontmp$s2$5, $ceylontmp$s3$6);
            }
            returning null;
        );
    }
    
    ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ternaryDefaulted_ $name$, final .java.lang.String s1$param$) {
        (
            let
            {
                .java.lang.String $ceylontmp$s2$7 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$ternaryDefaulted$s2(s1$param$);
                .java.lang.String $ceylontmp$s3$8 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$ternaryDefaulted$s3(s1$param$, $ceylontmp$s2$7);
                this($name$, s1$param$, $ceylontmp$s2$7, $ceylontmp$s3$8);
            }
            returning null;
        );
    }
    
    ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ternaryDefaulted_ $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        (
            let
            {
                .java.lang.String $ceylontmp$s3$9 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$ternaryDefaulted$s3(s1$param$, s2$param$);
                this($name$, s1$param$, s2$param$, $ceylontmp$s3$9);
            }
            returning null;
        );
    }
    
    ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.naryDefaulted_ $name$) {
        (
            let
            {
                .java.lang.String $ceylontmp$s1$10 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$naryDefaulted$s1();
                .java.lang.String $ceylontmp$s2$11 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$naryDefaulted$s2($ceylontmp$s1$10);
                .java.lang.String $ceylontmp$s3$12 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$naryDefaulted$s3($ceylontmp$s1$10, $ceylontmp$s2$11);
                .java.lang.String $ceylontmp$s4$13 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$naryDefaulted$s4($ceylontmp$s1$10, $ceylontmp$s2$11, $ceylontmp$s3$12);
                this($name$, $ceylontmp$s1$10, $ceylontmp$s2$11, $ceylontmp$s3$12, $ceylontmp$s4$13);
            }
            returning null;
        );
    }
    
    ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.naryDefaulted_ $name$, final .java.lang.String s1$param$) {
        (
            let
            {
                .java.lang.String $ceylontmp$s2$14 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$naryDefaulted$s2(s1$param$);
                .java.lang.String $ceylontmp$s3$15 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$naryDefaulted$s3(s1$param$, $ceylontmp$s2$14);
                .java.lang.String $ceylontmp$s4$16 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$naryDefaulted$s4(s1$param$, $ceylontmp$s2$14, $ceylontmp$s3$15);
                this($name$, s1$param$, $ceylontmp$s2$14, $ceylontmp$s3$15, $ceylontmp$s4$16);
            }
            returning null;
        );
    }
    
    ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.naryDefaulted_ $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        (
            let
            {
                .java.lang.String $ceylontmp$s3$17 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$naryDefaulted$s3(s1$param$, s2$param$);
                .java.lang.String $ceylontmp$s4$18 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$naryDefaulted$s4(s1$param$, s2$param$, $ceylontmp$s3$17);
                this($name$, s1$param$, s2$param$, $ceylontmp$s3$17, $ceylontmp$s4$18);
            }
            returning null;
        );
    }
    
    ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.naryDefaulted_ $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$) {
        (
            let
            {
                .java.lang.String $ceylontmp$s4$19 = .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ConstructorRef$naryDefaulted$s4(s1$param$, s2$param$, s3$param$);
                this($name$, s1$param$, s2$param$, s3$param$, $ceylontmp$s4$19);
            }
            returning null;
        );
    }
    
    protected ConstructorRef() {
        super();
        this.string = null;
    }
    private final .java.lang.String string;
    
    @.java.lang.Override
    public final .java.lang.String toString() {
        return this.string;
    }
    
    public ConstructorRef(final .java.lang.String s$param$) {
        string = new .java.lang.StringBuilder().append("default(").append(s$param$).append(")").toString();
    }
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.unary_ unary_ = null;
    
    public static final class unary_ {
        
        unary_() {
        }
    }
    
    public ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.unary_ $name$, final .java.lang.String s$param$) {
        string = new .java.lang.StringBuilder().append("unary(").append(s$param$).append(")").toString();
    }
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.binary_ binary_ = null;
    
    public static final class binary_ {
        
        binary_() {
        }
    }
    
    public ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.binary_ $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        string = new .java.lang.StringBuilder().append("binary(").append(s1$param$).append(",").append(s2$param$).append(")").toString();
    }
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ternary_ ternary_ = null;
    
    public static final class ternary_ {
        
        ternary_() {
        }
    }
    
    public ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ternary_ $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$) {
        string = new .java.lang.StringBuilder().append("ternary(").append(s1$param$).append(",").append(s2$param$).append(",").append(s3$param$).append(")").toString();
    }
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.nary_ nary_ = null;
    
    public static final class nary_ {
        
        nary_() {
        }
    }
    
    public ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.nary_ $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$, final .java.lang.String s4$param$) {
        string = new .java.lang.StringBuilder().append("nary(").append(s1$param$).append(",").append(s2$param$).append(",").append(s3$param$).append(",").append(s4$param$).append(")").toString();
    }
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.unaryDefaulted_ unaryDefaulted_ = null;
    
    public static final .java.lang.String ConstructorRef$unaryDefaulted$s() {
        return "s";
    }
    
    public static final class unaryDefaulted_ {
        
        unaryDefaulted_() {
        }
    }
    
    public ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.unaryDefaulted_ $name$, final .java.lang.String s$param$) {
        string = new .java.lang.StringBuilder().append("unaryDefaulted(").append(s$param$).append(")").toString();
    }
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.binaryDefaulted_ binaryDefaulted_ = null;
    
    public static final .java.lang.String ConstructorRef$binaryDefaulted$s1() {
        return "s1";
    }
    
    public static final .java.lang.String ConstructorRef$binaryDefaulted$s2(final .java.lang.String s1$param$) {
        return "s2";
    }
    
    public static final class binaryDefaulted_ {
        
        binaryDefaulted_() {
        }
    }
    
    public ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.binaryDefaulted_ $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        string = new .java.lang.StringBuilder().append("binaryDefaulted(").append(s1$param$).append(", ").append(s2$param$).append(")").toString();
    }
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ternaryDefaulted_ ternaryDefaulted_ = null;
    
    public static final .java.lang.String ConstructorRef$ternaryDefaulted$s1() {
        return "s1";
    }
    
    public static final .java.lang.String ConstructorRef$ternaryDefaulted$s2(final .java.lang.String s1$param$) {
        return "s2";
    }
    
    public static final .java.lang.String ConstructorRef$ternaryDefaulted$s3(final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        return "s3";
    }
    
    public static final class ternaryDefaulted_ {
        
        ternaryDefaulted_() {
        }
    }
    
    public ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ternaryDefaulted_ $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$) {
        string = new .java.lang.StringBuilder().append("ternaryDefaulted(").append(s1$param$).append(", ").append(s2$param$).append(", ").append(s3$param$).append(")").toString();
    }
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.naryDefaulted_ naryDefaulted_ = null;
    
    public static final .java.lang.String ConstructorRef$naryDefaulted$s1() {
        return "s1";
    }
    
    public static final .java.lang.String ConstructorRef$naryDefaulted$s2(final .java.lang.String s1$param$) {
        return "s2";
    }
    
    public static final .java.lang.String ConstructorRef$naryDefaulted$s3(final .java.lang.String s1$param$, final .java.lang.String s2$param$) {
        return "s3";
    }
    
    public static final .java.lang.String ConstructorRef$naryDefaulted$s4(final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$) {
        return "s4";
    }
    
    public static final class naryDefaulted_ {
        
        naryDefaulted_() {
        }
    }
    
    public ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.naryDefaulted_ $name$, final .java.lang.String s1$param$, final .java.lang.String s2$param$, final .java.lang.String s3$param$, final .java.lang.String s4$param$) {
        string = new .java.lang.StringBuilder().append("naryDefaulted(").append(s1$param$).append(", ").append(s2$param$).append(", ").append(s3$param$).append(", ").append(s4$param$).append(")").toString();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.class);
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.TypeParameters({@.org.eclipse.ceylon.compiler.java.metadata.TypeParameter(
        value = "T",
        variance = .org.eclipse.ceylon.compiler.java.metadata.Variance.NONE,
        satisfies = {"ceylon.language::Object"},
        caseTypes = {})})
@.org.eclipse.ceylon.compiler.java.metadata.Class(constructors = true)
class ConstructorRefTp<T> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    @.org.eclipse.ceylon.compiler.java.metadata.Jpa
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    protected ConstructorRefTp(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        super();
        this.$reified$T = $reified$T;
        this.string = null;
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T;
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.common.NonNull
    private final .java.lang.String string;
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.ActualAnnotation$annotation$
    @.java.lang.Override
    @.org.eclipse.ceylon.common.NonNull
    public final .java.lang.String toString() {
        return this.string;
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    public ConstructorRefTp(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Name("s")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s$param$) {
        this.$reified$T = $reified$T;
        string = new .java.lang.StringBuilder().append("defaultTp(").append(s$param$.toString()).append(")").toString();
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.unaryTp_ unaryTp_ = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("unaryTp")
    public static final class unaryTp_ {
        
        unaryTp_() {
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.Name("unaryTp")
    public ConstructorRefTp(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.unaryTp_ $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s$param$) {
        this.$reified$T = $reified$T;
        string = new .java.lang.StringBuilder().append("unaryTp(").append(s$param$.toString()).append(")").toString();
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.binaryTp_ binaryTp_ = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("binaryTp")
    public static final class binaryTp_ {
        
        binaryTp_() {
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.Name("binaryTp")
    public ConstructorRefTp(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.binaryTp_ $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s2$param$) {
        this.$reified$T = $reified$T;
        string = new .java.lang.StringBuilder().append("binaryTp(").append(s1$param$.toString()).append(",").append(s2$param$.toString()).append(")").toString();
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.ternaryTp_ ternaryTp_ = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("ternaryTp")
    public static final class ternaryTp_ {
        
        ternaryTp_() {
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.Name("ternaryTp")
    public ConstructorRefTp(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.ternaryTp_ $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s2$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s3")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s3$param$) {
        this.$reified$T = $reified$T;
        string = new .java.lang.StringBuilder().append("ternaryTp(").append(s1$param$.toString()).append(",").append(s2$param$.toString()).append(",").append(s3$param$.toString()).append(")").toString();
    }
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public static final .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.naryTp_ naryTp_ = null;
    
    @.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
            major = 8,
            minor = 1)
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    @.org.eclipse.ceylon.compiler.java.metadata.ConstructorName("naryTp")
    public static final class naryTp_ {
        
        naryTp_() {
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.org.eclipse.ceylon.compiler.java.metadata.Name("naryTp")
    public ConstructorRefTp(@.org.eclipse.ceylon.compiler.java.metadata.Ignore
    final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.naryTp_ $name$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s1")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s1$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s2")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s2$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s3")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s3$param$, @.org.eclipse.ceylon.compiler.java.metadata.Name("s4")
    @.org.eclipse.ceylon.compiler.java.metadata.TypeInfo("T")
    final T s4$param$) {
        this.$reified$T = $reified$T;
        string = new .java.lang.StringBuilder().append("naryTp(").append(s1$param$.toString()).append(",").append(s2$param$.toString()).append(",").append(s3$param$.toString()).append(",").append(s4$param$.toString()).append(")").toString();
    }
    
    @.java.lang.Override
    @.org.eclipse.ceylon.compiler.java.metadata.Ignore
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.class, $reified$T);
    }
}
final class constructorRef_ {
    
    private constructorRef_() {
    }
    
    static void constructorRef() {
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef> $default = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef>(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "ConstructorRef(String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef $call$(final .java.lang.Object $param$0) {
                final .java.lang.String $ceylontmp$s = ((.ceylon.language.String)$param$0).toString();
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef($ceylontmp$s);
            }
        };
        .ceylon.language.String lhs$20 = .ceylon.language.String.instance("default(s1)");
        .ceylon.language.String rhs$21 = .ceylon.language.String.instance($default.$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        if (lhs$20.equals(rhs$21)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"default(s1)\"==default(\"s1\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$20, rhs$21));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef> default2 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef>(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "ConstructorRef(String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef $call$(final .java.lang.Object $param$0) {
                final .java.lang.String $ceylontmp$s = ((.ceylon.language.String)$param$0).toString();
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef($ceylontmp$s);
            }
        };
        .ceylon.language.String lhs$22 = .ceylon.language.String.instance("default(s2)");
        .ceylon.language.String rhs$23 = .ceylon.language.String.instance(default2.$call$((.java.lang.Object).ceylon.language.String.instance("s2")).toString());
        if (lhs$22.equals(rhs$23)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"default(s2)\"==default2(\"s2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$22, rhs$23));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef> unary = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef>(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "ConstructorRef.unary(String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef $call$(final .java.lang.Object $param$0) {
                final .java.lang.String s$param$ = ((.ceylon.language.String)$param$0).toString();
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.unary_, s$param$);
            }
        };
        .ceylon.language.String lhs$24 = .ceylon.language.String.instance("unary(s2)");
        .ceylon.language.String rhs$25 = .ceylon.language.String.instance(unary.$call$((.java.lang.Object).ceylon.language.String.instance("s2")).toString());
        if (lhs$24.equals(rhs$25)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unary(s2)\"==unary(\"s2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$24, rhs$25));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef> unary2 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef>(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "ConstructorRef.unary(String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef $call$(final .java.lang.Object $param$0) {
                final .java.lang.String s$param$ = ((.ceylon.language.String)$param$0).toString();
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.unary_, s$param$);
            }
        };
        .ceylon.language.String lhs$26 = .ceylon.language.String.instance("unary(s3)");
        .ceylon.language.String rhs$27 = .ceylon.language.String.instance(unary2.$call$((.java.lang.Object).ceylon.language.String.instance("s3")).toString());
        if (lhs$26.equals(rhs$27)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unary(s3)\"==unary2(\"s3\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$26, rhs$27));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef> binary = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef>(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "ConstructorRef.binary(String, String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.binary_, s1$param$, s2$param$);
            }
        };
        .ceylon.language.String lhs$28 = .ceylon.language.String.instance("binary(s2,s3)");
        .ceylon.language.String rhs$29 = .ceylon.language.String.instance(binary.$call$((.java.lang.Object).ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3")).toString());
        if (lhs$28.equals(rhs$29)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binary(s2,s3)\"==binary(\"s2\", \"s3\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$28, rhs$29));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef> ternary = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef>(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "ConstructorRef.ternary(String, String, String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0).toString();
                final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$1).toString();
                final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$2).toString();
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.ternary_, s1$param$, s2$param$, s3$param$);
            }
        };
        .ceylon.language.String lhs$30 = .ceylon.language.String.instance("ternary(s2,s3,s4)");
        .ceylon.language.String rhs$31 = .ceylon.language.String.instance(ternary.$call$((.java.lang.Object).ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4")).toString());
        if (lhs$30.equals(rhs$31)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternary(s2,s3,s4)\"==ternary(\"s2\", \"s3\", \"s4\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$30, rhs$31));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef> nary = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef>(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "ConstructorRef.nary(String, String, String, String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef $call$(final .java.lang.Object... $param$0) {
                final .java.lang.String s1$param$ = ((.ceylon.language.String)$param$0[0]).toString();
                final .java.lang.String s2$param$ = ((.ceylon.language.String)$param$0[1]).toString();
                final .java.lang.String s3$param$ = ((.ceylon.language.String)$param$0[2]).toString();
                final .java.lang.String s4$param$ = ((.ceylon.language.String)$param$0[3]).toString();
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRef.nary_, s1$param$, s2$param$, s3$param$, s4$param$);
            }
        };
        .ceylon.language.String lhs$32 = .ceylon.language.String.instance("nary(s2,s3,s4,s5)");
        .ceylon.language.String rhs$33 = .ceylon.language.String.instance(nary.$call$((.java.lang.Object).ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), .ceylon.language.String.instance("s5")).toString());
        if (lhs$32.equals(rhs$33)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nary(s2,s3,s4,s5)\"==nary(\"s2\", \"s3\", \"s4\", \"s5\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$32, rhs$33));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>> defaultTp = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.class, .ceylon.language.String.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "ConstructorRefTp<String>(String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.String $ceylontmp$s = (.ceylon.language.String)$param$0;
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, $ceylontmp$s);
            }
        };
        .ceylon.language.String lhs$34 = .ceylon.language.String.instance("defaultTp(s1)");
        .ceylon.language.String rhs$35 = .ceylon.language.String.instance(defaultTp.$call$((.java.lang.Object).ceylon.language.String.instance("s1")).toString());
        if (lhs$34.equals(rhs$35)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"defaultTp(s1)\"==defaultTp(\"s1\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$34, rhs$35));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>> unaryTp = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.class, .ceylon.language.String.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "ConstructorRefTp<String>.unaryTp(String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                final .ceylon.language.String s$param$ = (.ceylon.language.String)$param$0;
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.unaryTp_, s$param$);
            }
        };
        .ceylon.language.String lhs$36 = .ceylon.language.String.instance("unaryTp(s2)");
        .ceylon.language.String rhs$37 = .ceylon.language.String.instance(unaryTp.$call$((.java.lang.Object).ceylon.language.String.instance("s2")).toString());
        if (lhs$36.equals(rhs$37)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unaryTp(s2)\"==unaryTp(\"s2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$36, rhs$37));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>> binaryTp = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.class, .ceylon.language.String.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "ConstructorRefTp<String>.binaryTp(String, String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String> $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                final .ceylon.language.String s1$param$ = (.ceylon.language.String)$param$0;
                final .ceylon.language.String s2$param$ = (.ceylon.language.String)$param$1;
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.binaryTp_, s1$param$, s2$param$);
            }
        };
        .ceylon.language.String lhs$38 = .ceylon.language.String.instance("binaryTp(s2,s3)");
        .ceylon.language.String rhs$39 = .ceylon.language.String.instance(binaryTp.$call$((.java.lang.Object).ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3")).toString());
        if (lhs$38.equals(rhs$39)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binaryTp(s2,s3)\"==binaryTp(\"s2\", \"s3\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$38, rhs$39));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>> ternaryTp = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.class, .ceylon.language.String.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "ConstructorRefTp<String>.ternaryTp(String, String, String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String> $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                final .ceylon.language.String s1$param$ = (.ceylon.language.String)$param$0;
                final .ceylon.language.String s2$param$ = (.ceylon.language.String)$param$1;
                final .ceylon.language.String s3$param$ = (.ceylon.language.String)$param$2;
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.ternaryTp_, s1$param$, s2$param$, s3$param$);
            }
        };
        .ceylon.language.String lhs$40 = .ceylon.language.String.instance("ternaryTp(s2,s3,s4)");
        .ceylon.language.String rhs$41 = .ceylon.language.String.instance(ternaryTp.$call$((.java.lang.Object).ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4")).toString());
        if (lhs$40.equals(rhs$41)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternaryTp(s2,s3,s4)\"==ternaryTp(\"s2\", \"s3\", \"s4\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$40, rhs$41));
        }
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>> naryTp = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.class, .ceylon.language.String.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "ConstructorRefTp<String>.naryTp(String, String, String, String)", (short)-1){
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String> $call$(final .java.lang.Object... $param$0) {
                final .ceylon.language.String s1$param$ = (.ceylon.language.String)$param$0[0];
                final .ceylon.language.String s2$param$ = (.ceylon.language.String)$param$0[1];
                final .ceylon.language.String s3$param$ = (.ceylon.language.String)$param$0[2];
                final .ceylon.language.String s4$param$ = (.ceylon.language.String)$param$0[3];
                return new .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.test.expression.ref.ConstructorRefTp.naryTp_, s1$param$, s2$param$, s3$param$, s4$param$);
            }
        };
        .ceylon.language.String lhs$42 = .ceylon.language.String.instance("naryTp(s2,s3,s4,s5)");
        .ceylon.language.String rhs$43 = .ceylon.language.String.instance(naryTp.$call$((.java.lang.Object).ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), .ceylon.language.String.instance("s5")).toString());
        if (lhs$42.equals(rhs$43)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryTp(s2,s3,s4,s5)\"==naryTp(\"s2\", \"s3\", \"s4\", \"s5\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$42, rhs$43));
        }
    }
}