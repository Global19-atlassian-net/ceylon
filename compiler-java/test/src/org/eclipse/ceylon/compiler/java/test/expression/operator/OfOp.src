package org.eclipse.ceylon.compiler.java.test.expression.operator;

abstract class OfOp implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.Summable<.org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp>, .java.io.Serializable {
    
    OfOp() {
    }
    
    private final void m$priv$() {
        final .ceylon.language.Summable<.org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp> comp = (.ceylon.language.Summable<.org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp>)(.java.lang.Object).ceylon.language.nothing_.get_();
        final .org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp foo = (.org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp)comp;
        final .java.lang.Object v = .ceylon.language.nothing_.get_();
        final .java.lang.Object x = v;
        final .org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp o = (.org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp)(.java.lang.Object).ceylon.language.nothing_.get_();
        final .java.lang.Object z = o;
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp.class);
}
abstract class OfOpA extends .org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp {
    
    OfOpA() {
        super();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.expression.operator.OfOpA.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.operator.OfOpA.class);
}
abstract class OfOpB extends .org.eclipse.ceylon.compiler.java.test.expression.operator.OfOp {
    
    OfOpB() {
        super();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.expression.operator.OfOpB.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.operator.OfOpB.class);
}