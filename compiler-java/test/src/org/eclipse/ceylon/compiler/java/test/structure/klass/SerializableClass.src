package org.eclipse.ceylon.compiler.java.test.structure.klass;

class SerializableClass implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable, .org.eclipse.ceylon.compiler.java.runtime.serialization.Serializable {
    
    public SerializableClass(final .org.eclipse.ceylon.compiler.java.runtime.serialization.$Serialization$ ignored) {
        this.sharedVariableInteger = 0L;
        this.sharedInteger = 0L;
        this.sharedOptionalInteger = null;
        this.sharedOptionalString = null;
        this.deferred = 0L;
    }
    
    SerializableClass() {
        this.sharedVariableInteger = 1L;
        this.sharedInteger = 1L;
        this.sharedOptionalInteger = null;
        this.sharedOptionalString = .ceylon.language.String.instance("");
        deferred = 1L;
    }
    private long sharedVariableInteger;
    
    public final long getSharedVariableInteger() {
        return this.sharedVariableInteger;
    }
    
    public final void setSharedVariableInteger(final long sharedVariableInteger) {
        this.sharedVariableInteger = sharedVariableInteger;
    }
    private final long sharedInteger;
    
    public final long getSharedInteger() {
        return this.sharedInteger;
    }
    private final .ceylon.language.Integer sharedOptionalInteger;
    
    public final .ceylon.language.Integer getSharedOptionalInteger() {
        return this.sharedOptionalInteger;
    }
    private final .ceylon.language.String sharedOptionalString;
    
    public final .ceylon.language.String getSharedOptionalString() {
        return this.sharedOptionalString;
    }
    private final long deferred;
    
    public final long getDeferred() {
        return this.deferred;
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableClass.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableClass.class);
    
    @.java.lang.Override
    public .java.util.Collection<.ceylon.language.serialization.ReachableReference> $references$() {
        .java.util.Collection<.ceylon.language.serialization.ReachableReference> reference = new .java.util.ArrayList<.ceylon.language.serialization.ReachableReference>();
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).org.eclipse.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "sharedVariableInteger")));
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).org.eclipse.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "sharedInteger")));
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).org.eclipse.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "sharedOptionalInteger")));
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).org.eclipse.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "sharedOptionalString")));
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).org.eclipse.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableClass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "deferred")));
        return reference;
    }
    
    @.java.lang.Override
    public .java.lang.Object $get$(final .ceylon.language.serialization.ReachableReference reference) {
        switch (((.ceylon.language.serialization.Member)reference).getAttribute().getQualifiedName()) {
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableClass.sharedVariableInteger": 
            return .ceylon.language.Integer.instance(this.sharedVariableInteger);
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableClass.sharedInteger": 
            return .ceylon.language.Integer.instance(this.sharedInteger);
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableClass.sharedOptionalInteger": 
            return this.sharedOptionalInteger;
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableClass.sharedOptionalString": 
            return this.sharedOptionalString;
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableClass.deferred": 
            return .ceylon.language.Integer.instance(this.deferred);
        
        default: 
            throw new .java.lang.RuntimeException("unknown attribute");
        
        }
    }
    
    @.java.lang.Override
    public void $set$(final .ceylon.language.serialization.ReachableReference reference, final .java.lang.Object instance) {
        final .java.lang.invoke.MethodHandles.Lookup lookup = .java.lang.invoke.MethodHandles.lookup();
        if (reference instanceof .ceylon.language.serialization.Member) switch (((.ceylon.language.serialization.Member)reference).getAttribute().getQualifiedName()) {
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableClass.sharedVariableInteger": 
            this.sharedVariableInteger = ((.ceylon.language.Integer)instance).longValue();
            break;
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableClass.sharedInteger": 
            .org.eclipse.ceylon.compiler.java.Util.setter(lookup, "sharedInteger").invokeExact(this, (long)((.ceylon.language.Integer)instance).longValue());
            break;
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableClass.sharedOptionalInteger": 
            .org.eclipse.ceylon.compiler.java.Util.setter(lookup, "sharedOptionalInteger").invokeExact(this, (.ceylon.language.Integer)(.ceylon.language.Integer)instance);
            break;
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableClass.sharedOptionalString": 
            .org.eclipse.ceylon.compiler.java.Util.setter(lookup, "sharedOptionalString").invokeExact(this, (.ceylon.language.String)(.ceylon.language.String)instance);
            break;
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableClass.deferred": 
            .org.eclipse.ceylon.compiler.java.Util.setter(lookup, "deferred").invokeExact(this, (long)((.ceylon.language.Integer)instance).longValue());
            break;
        
        default: 
            throw new .java.lang.RuntimeException("unknown attribute");
        
        } else throw new .ceylon.language.AssertionError("unexpected reachable reference " + reference);
    }
}
class SerializableSubclass extends .org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableClass implements .org.eclipse.ceylon.compiler.java.runtime.serialization.Serializable {
    
    public SerializableSubclass(final .org.eclipse.ceylon.compiler.java.runtime.serialization.$Serialization$ ignored) {
        super(ignored);
        this.variablePartner = null;
        this.partner = null;
        this.variableInteger = 0L;
        this.$init$variableInteger = false;
        this.integer = 0L;
        this.$init$integer = false;
    }
    
    SerializableSubclass() {
        super();
        this.$init$variableInteger = false;
        this.$init$integer = false;
    }
    private .org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass variablePartner;
    
    public final .org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass getVariablePartner() {
        if (this.variablePartner != null) {
            return this.variablePartner;
        } else {
            throw new .ceylon.language.InitializationError("Accessing uninitialized \'late\' attribute \'variablePartner\'");
        }
    }
    
    public final void setVariablePartner(final .org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass variablePartner) {
        this.variablePartner = variablePartner;
    }
    private .org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass partner;
    
    public final .org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass getPartner() {
        if (this.partner != null) {
            return this.partner;
        } else {
            throw new .ceylon.language.InitializationError("Accessing uninitialized \'late\' attribute \'partner\'");
        }
    }
    
    public final void setPartner(final .org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass partner) {
        if (this.partner == null) {
            this.partner = partner;
        } else {
            throw new .ceylon.language.InitializationError("Re-initialization of \'late\' attribute");
        }
    }
    private long variableInteger;
    private volatile transient boolean $init$variableInteger = false;
    
    public final long getVariableInteger() {
        if (this.$init$variableInteger) {
            return this.variableInteger;
        } else {
            throw new .ceylon.language.InitializationError("Accessing uninitialized \'late\' attribute \'variableInteger\'");
        }
    }
    
    public final void setVariableInteger(final long variableInteger) {
        this.variableInteger = variableInteger;
        this.$init$variableInteger = true;
    }
    private long integer;
    private volatile transient boolean $init$integer = false;
    
    public final long getInteger() {
        if (this.$init$integer) {
            return this.integer;
        } else {
            throw new .ceylon.language.InitializationError("Accessing uninitialized \'late\' attribute \'integer\'");
        }
    }
    
    public final void setInteger(final long integer) {
        if (!this.$init$integer) {
            this.integer = integer;
            this.$init$integer = true;
        } else {
            throw new .ceylon.language.InitializationError("Re-initialization of \'late\' attribute");
        }
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class);
    
    @.java.lang.Override
    public .java.util.Collection<.ceylon.language.serialization.ReachableReference> $references$() {
        .java.util.Collection<.ceylon.language.serialization.ReachableReference> reference = super.$references$();
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).org.eclipse.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "variablePartner")));
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).org.eclipse.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "partner")));
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).org.eclipse.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "variableInteger")));
        reference.add(new .ceylon.language.impl.MemberImpl(((.ceylon.language.meta.declaration.ClassOrInterfaceDeclaration).org.eclipse.ceylon.compiler.java.runtime.metamodel.Metamodel.getOrCreateMetamodel(.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass.class)).<.ceylon.language.meta.declaration.ValueDeclaration>getDeclaredMemberDeclaration(.ceylon.language.meta.declaration.ValueDeclaration.$TypeDescriptor$, "integer")));
        return reference;
    }
    
    @.java.lang.Override
    public .java.lang.Object $get$(final .ceylon.language.serialization.ReachableReference reference) {
        switch (((.ceylon.language.serialization.Member)reference).getAttribute().getQualifiedName()) {
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableSubclass.variablePartner": 
            if (this.variablePartner == null) return .ceylon.language.serialization.uninitializedLateValue_.get_();
            return this.getVariablePartner();
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableSubclass.partner": 
            if (this.partner == null) return .ceylon.language.serialization.uninitializedLateValue_.get_();
            return this.getPartner();
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableSubclass.variableInteger": 
            if (!this.$init$variableInteger) return .ceylon.language.serialization.uninitializedLateValue_.get_();
            return .ceylon.language.Integer.instance(this.getVariableInteger());
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableSubclass.integer": 
            if (!this.$init$integer) return .ceylon.language.serialization.uninitializedLateValue_.get_();
            return .ceylon.language.Integer.instance(this.getInteger());
        
        default: 
            return super.$get$(reference);
        
        }
    }
    
    @.java.lang.Override
    public void $set$(final .ceylon.language.serialization.ReachableReference reference, final .java.lang.Object instance) {
        if (reference instanceof .ceylon.language.serialization.Member) switch (((.ceylon.language.serialization.Member)reference).getAttribute().getQualifiedName()) {
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableSubclass.variablePartner": 
            if (instance instanceof .ceylon.language.serialization.UninitializedLateValue) break;
            this.setVariablePartner((.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass)instance);
            break;
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableSubclass.partner": 
            if (instance instanceof .ceylon.language.serialization.UninitializedLateValue) break;
            this.setPartner((.org.eclipse.ceylon.compiler.java.test.structure.klass.SerializableSubclass)instance);
            break;
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableSubclass.variableInteger": 
            if (instance instanceof .ceylon.language.serialization.UninitializedLateValue) break;
            this.setVariableInteger(((.ceylon.language.Integer)instance).longValue());
            break;
        
        case "org.eclipse.ceylon.compiler.java.test.structure.klass::SerializableSubclass.integer": 
            if (instance instanceof .ceylon.language.serialization.UninitializedLateValue) break;
            this.setInteger(((.ceylon.language.Integer)instance).longValue());
            break;
        
        default: 
            super.$set$(reference, instance);
        
        } else throw new .ceylon.language.AssertionError("unexpected reachable reference " + reference);
    }
}