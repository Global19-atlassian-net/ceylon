package org.eclipse.ceylon.compiler.java.test.issues.bug08xx;

interface Bug866_Visitable<Visited extends .org.eclipse.ceylon.compiler.java.test.issues.bug08xx.Bug866_Visitable<Visited>> extends .ceylon.language.Iterable<.java.lang.Object, .java.lang.Object> {
    
    public .org.eclipse.ceylon.compiler.java.test.issues.bug08xx.Bug866_Visitable$impl<Visited> $org$eclipse$ceylon$compiler$java$test$issues$bug08xx$Bug866_Visitable$impl();
    
    public abstract .java.lang.String getDescription();
    
    public void visitPrefix(final .ceylon.language.Callable<? extends .java.lang.Object> f);
    
    public void visitPostfix(final .ceylon.language.Callable<? extends .java.lang.Object> f);
}
final class Bug866_Visitable$impl<Visited extends .org.eclipse.ceylon.compiler.java.test.issues.bug08xx.Bug866_Visitable<Visited>> {
    
    Bug866_Visitable$impl(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedVisited, .org.eclipse.ceylon.compiler.java.test.issues.bug08xx.Bug866_Visitable<Visited> $this) {
        this.$reifiedVisited = $reifiedVisited;
        this.$this = $this;
    }
    private .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedVisited;
    private final .org.eclipse.ceylon.compiler.java.test.issues.bug08xx.Bug866_Visitable<Visited> $this;
    
    public void $refine(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reifiedVisited) {
        this.$reifiedVisited = $reifiedVisited;
    }
    
    private void visitChildren$priv(final .ceylon.language.Callable<? extends .java.lang.Object> f, final .ceylon.language.Callable<? extends .java.lang.Object> dispatcher) {
        .java.lang.Object $elem$0;
        for (.ceylon.language.Iterator<? extends .java.lang.Object> $child$iter$1 = ((Visited)$this).iterator(); !(($elem$0 = $child$iter$1.next()) instanceof .ceylon.language.Finished); ) {
            final .java.lang.Object child = (.java.lang.Object)$elem$0;
            .java.lang.Object $child$3;
            if (($child$3 = child) instanceof .ceylon.language.Integer) {
                final long $child$7 = ((.ceylon.language.Integer)$child$3).longValue();
                f.$call(.ceylon.language.Integer.instance($child$7));
            } else {
                .java.lang.Object $child$5;
                if (!(($child$5 = child) instanceof .ceylon.language.Integer)) {
                    final Visited $child$6 = (Visited)$child$5;
                    dispatcher.$call($child$6);
                }
            }
        }
    }
    
    public void visitPrefix(final .ceylon.language.Callable<? extends .java.lang.Object> f) {
        f.$call((Visited)$this);
        visitChildren$priv(f, new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, $reifiedVisited, $reifiedVisited, .ceylon.language.Empty.$TypeDescriptor), "Anything(Visited)", (short)-1){
            
            @.java.lang.Override
            public .java.lang.Object $call(final .java.lang.Object $param$0) {
                final Visited child = (Visited)$param$0;
                return (
                    let
                    {
                        child.visitPrefix(f);
                    }
                    returning null;
                );
            }
        });
    }
    
    public void visitPostfix(final .ceylon.language.Callable<? extends .java.lang.Object> f) {
        visitChildren$priv(f, new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Tuple.class, $reifiedVisited, $reifiedVisited, .ceylon.language.Empty.$TypeDescriptor), "Anything(Visited)", (short)-1){
            
            @.java.lang.Override
            public .java.lang.Object $call(final .java.lang.Object $param$0) {
                final Visited child = (Visited)$param$0;
                return (
                    let
                    {
                        child.visitPostfix(f);
                    }
                    returning null;
                );
            }
        });
        f.$call((Visited)$this);
    }
}