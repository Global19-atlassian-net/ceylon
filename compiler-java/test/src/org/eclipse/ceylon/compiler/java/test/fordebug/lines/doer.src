package org.eclipse.ceylon.compiler.java.test.fordebug.lines; // line 1
 // line 1
class Doer implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable { // line 1
     // line 1
    protected Doer() { // line 1
        super();
    }
     // line 1
    Doer(final .ceylon.language.Callable<? extends .java.lang.Object> $do) { // line 1
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.fordebug.lines.Doer.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.fordebug.lines.Doer.class);
}
final class id_ {
     // line 2
    private id_() { // line 2
    }
    private static final .org.eclipse.ceylon.compiler.java.test.fordebug.lines.Doer $object$; // line 2
    private static volatile boolean $init$$object$ = false; // line 2
    private static final .java.lang.Throwable $initException$; // line 2
    static { // line 2
        try { // line 2
            $object$ = ( // line 2
                let
                {
                    .ceylon.language.Callable arg$0$0 = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.java.lang.Object>(.ceylon.language.Anything.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.Anything.$TypeDescriptor$), "Anything(Anything)", (short)-1){ // line 3
                         // line 3
                        @.java.lang.Override // line 3
                        public .java.lang.Object $call$(final .java.lang.Object $param$0) { // line 3
                            final .java.lang.Object t = $param$0; // line 3
                            .ceylon.language.print_.print(t); // line 4
                            return t; // line 5
                        }
                    };
                }
                returning new .org.eclipse.ceylon.compiler.java.test.fordebug.lines.Doer(arg$0$0); // line 2, 3
            );
            .org.eclipse.ceylon.compiler.java.test.fordebug.lines.id_.$init$$object$ = true; // line 2
            $initException$ = null; // line 2
        } catch (.java.lang.Throwable x) { // line 2
            $initException$ = x; // line 2
            $object$ = null; // line 2
            .org.eclipse.ceylon.compiler.java.test.fordebug.lines.id_.$init$$object$ = false; // line 2
        }
    }
     // line 2
    public static .org.eclipse.ceylon.compiler.java.test.fordebug.lines.Doer get_() { // line 2
        if (.org.eclipse.ceylon.compiler.java.test.fordebug.lines.id_.$init$$object$) { // line 2
            return .org.eclipse.ceylon.compiler.java.test.fordebug.lines.id_.$object$; // line 2
        } else { // line 2
            if ($initException$ != null) .org.eclipse.ceylon.compiler.java.Util.rethrow($initException$); // line 2
            throw new .ceylon.language.InitializationError("Cyclic initialization trying to read the value of \'id\' before it was set"); // line 2
        }
    }
}