package org.eclipse.ceylon.compiler.java.test.structure.method;

class MRAVEC_Invariant<Element> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MRAVEC_Invariant(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
    }
    private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant.class, $reified$Element);
    }
}
class MRAVEC_Covariant<Element> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MRAVEC_Covariant(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
    }
    private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant.class, $reified$Element);
    }
}
class MRAVEC_Contravariant<Element> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MRAVEC_Contravariant(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
    }
    private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant.class, $reified$Element);
    }
}
class MRAVEC_Top<Element> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MRAVEC_Top(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element) {
        this.$reified$Element = $reified$Element;
    }
    private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$Element;
    
    public Element f() {
        return (Element)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    public .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant<Element> f2() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant<Element>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    public .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant<? extends Element> f3() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant<? extends Element>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    public .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant<? super Element> f4() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant<? super Element>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Top.class, $reified$Element);
    }
}
class MRAVEC_BottomNull extends .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Top<.java.lang.Object> {
    
    MRAVEC_BottomNull() {
        super(.ceylon.language.Null.$TypeDescriptor$);
    }
    
    @.java.lang.Override
    public final .java.lang.Object f() {
        return .ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant<.java.lang.Object> f2() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant<.java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant<? extends .java.lang.Object> f3() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant<? extends .java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant<? super .java.lang.Object> f4() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant<? super .java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_BottomNull.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_BottomNull.class);
}
class MRAVEC_BottomNothing extends .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Top<.java.lang.Object> {
    
    MRAVEC_BottomNothing() {
        super(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType);
    }
    
    @.java.lang.Override
    public final .java.lang.Object f() {
        return .ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant<.java.lang.Object> f2() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant<.java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant<? extends .java.lang.Object> f3() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant<? extends .java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant f4() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_BottomNothing.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_BottomNothing.class);
}
class MRAVEC_BottomAnything extends .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Top<.java.lang.Object> {
    
    MRAVEC_BottomAnything() {
        super(.ceylon.language.Anything.$TypeDescriptor$);
    }
    
    @.java.lang.Override
    public final .java.lang.Object f() {
        return .ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant<.java.lang.Object> f2() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant<.java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant<? extends .java.lang.Object> f3() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant<? extends .java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant<? super .java.lang.Object> f4() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant<? super .java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_BottomAnything.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_BottomAnything.class);
}
class MRAVEC_BottomErased extends .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Top<.java.lang.Object> {
    
    MRAVEC_BottomErased() {
        super(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Integer.$TypeDescriptor$));
    }
    
    @.java.lang.Override
    public final .java.lang.Object f() {
        return .ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant f2() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Invariant)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant f3() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Covariant)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public final .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant f4() {
        return (.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_Contravariant)(.java.lang.Object).ceylon.language.nothing_.get_();
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_BottomErased.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.structure.method.MRAVEC_BottomErased.class);
}