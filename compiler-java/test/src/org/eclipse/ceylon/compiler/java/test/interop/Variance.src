package org.eclipse.ceylon.compiler.java.test.interop;

final class variance_ {
    
    private variance_() {
    }
    
    static void variance() {
        final .org.eclipse.ceylon.compiler.java.test.interop.JavaVariance var = new .org.eclipse.ceylon.compiler.java.test.interop.JavaVariance();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> klass = var;
        final .org.eclipse.ceylon.compiler.java.test.interop.Interface<? extends .java.lang.Object> interf = var;
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.interop.Interface<? extends .java.lang.Object>> interfaceMethod = (
            let
            {
                final .org.eclipse.ceylon.compiler.java.test.interop.JavaVariance $instance$ = var;
            }
            returning new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.interop.Interface<? extends .java.lang.Object>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.Interface.class, new .org.eclipse.ceylon.compiler.java.metadata.Variance[]{.org.eclipse.ceylon.compiler.java.metadata.Variance.OUT}, .ceylon.language.Object.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.Interface.class, new .org.eclipse.ceylon.compiler.java.metadata.Variance[]{.org.eclipse.ceylon.compiler.java.metadata.Variance.OUT}, .ceylon.language.Object.$TypeDescriptor$))), "Interface<out Object>(Interface<out Object>?)", (short)-1){
                
                @.java.lang.Override
                public .org.eclipse.ceylon.compiler.java.test.interop.Interface<? extends .java.lang.Object> $call$(final .java.lang.Object $param$0) {
                    final .org.eclipse.ceylon.compiler.java.test.interop.Interface $ceylontmp$arg0 = (.org.eclipse.ceylon.compiler.java.test.interop.Interface<? extends .java.lang.Object>)(.org.eclipse.ceylon.compiler.java.test.interop.Interface)$param$0;
                    return $instance$.interfaceMethod($ceylontmp$arg0);
                }
            };
        );
        final .org.eclipse.ceylon.compiler.java.test.interop.Interface<? extends .java.lang.Object> ret1 = var.interfaceMethod(var);
        final .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object>> classMethod = (
            let
            {
                final .org.eclipse.ceylon.compiler.java.test.interop.JavaVariance $instance$ = var;
            }
            returning new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.Class.class, new .org.eclipse.ceylon.compiler.java.metadata.Variance[]{.org.eclipse.ceylon.compiler.java.metadata.Variance.OUT}, .ceylon.language.Object.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.Null.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.Class.class, new .org.eclipse.ceylon.compiler.java.metadata.Variance[]{.org.eclipse.ceylon.compiler.java.metadata.Variance.OUT}, .ceylon.language.Object.$TypeDescriptor$))), "Class<out Object>(Class<out Object>?)", (short)-1){
                
                @.java.lang.Override
                public .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> $call$(final .java.lang.Object $param$0) {
                    final .org.eclipse.ceylon.compiler.java.test.interop.Class $ceylontmp$arg0 = (.org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object>)(.org.eclipse.ceylon.compiler.java.test.interop.Class)$param$0;
                    return $instance$.classMethod($ceylontmp$arg0);
                }
            };
        );
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> ret2 = var.classMethod(var);
        final .org.eclipse.ceylon.compiler.java.test.interop.JavaVariance m = var.<.org.eclipse.ceylon.compiler.java.test.interop.JavaVariance>method(var);
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> v1 = var.roField;
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> v2 = var.rwField;
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> v3 = var.getRoProperty();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> v4 = var.getRwProperty();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> v5 = var.getRwCovariantProperty();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? super .org.eclipse.ceylon.compiler.java.test.interop.JavaVariance> v6 = var.getRwContravariantProperty();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> v7 = var.getRwRawProperty();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<.java.lang.Object> anythingClass = (.org.eclipse.ceylon.compiler.java.test.interop.Class<.java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<.ceylon.language.Integer> integerClass = (.org.eclipse.ceylon.compiler.java.test.interop.Class<.ceylon.language.Integer>)(.java.lang.Object).ceylon.language.nothing_.get_();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<.java.lang.Object> nothingClass = (.org.eclipse.ceylon.compiler.java.test.interop.Class<.java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<.java.lang.Object> outNothingClass = (.org.eclipse.ceylon.compiler.java.test.interop.Class<.java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<.java.lang.Object> inAnythingClass = (.org.eclipse.ceylon.compiler.java.test.interop.Class<.java.lang.Object>)(.java.lang.Object).ceylon.language.nothing_.get_();
        final .org.eclipse.ceylon.compiler.java.test.interop.Class inNothing1 = anythingClass;
        final .org.eclipse.ceylon.compiler.java.test.interop.Class inNothing2 = integerClass;
        final .org.eclipse.ceylon.compiler.java.test.interop.Class inNothing3 = nothingClass;
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> inAnything1 = anythingClass;
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> inAnything2 = integerClass;
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<? extends .java.lang.Object> inAnything3 = nothingClass;
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<.java.lang.Object> nothing1 = outNothingClass;
        final .org.eclipse.ceylon.compiler.java.test.interop.Class<.java.lang.Object> anything1 = inAnythingClass;
    }
}
abstract class MyMap implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.util.Map<.ceylon.language.String, .java.lang.Object>, .java.io.Serializable {
    
    MyMap() {
    }
    
    @.java.lang.Override
    public final void putAll(final .java.util.Map<? extends .ceylon.language.String, ? extends .java.lang.Object> map) {
    }
    
    @.java.lang.Override
    public abstract int hashCode();
    
    @.java.lang.Override
    public abstract boolean equals(final .java.lang.Object o);
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.interop.MyMap.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.interop.MyMap.class);
}