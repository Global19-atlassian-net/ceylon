package org.eclipse.ceylon.compiler.java.test.statement.conditional;

class AssertExists2dArray implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    AssertExists2dArray() {
    }
    
    private final void ints$priv$() {
        final .ceylon.language.Array<.ceylon.language.Array<.ceylon.language.Integer>> t = .ceylon.language.arrayOfSize_.<.ceylon.language.Array<.ceylon.language.Integer>>arrayOfSize(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Array.class, .ceylon.language.Integer.$TypeDescriptor$), 2L, .ceylon.language.arrayOfSize_.<.ceylon.language.Integer>arrayOfSize(.ceylon.language.Integer.$TypeDescriptor$, 2L, .ceylon.language.Integer.instance(0L)));
        final .ceylon.language.Array<.ceylon.language.Integer> r$1;
        .ceylon.language.Array<.ceylon.language.Integer> r$0 = null;
        if ((r$0 = t.getFromFirst(0L)) != null) {
            r$1 = r$0;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "exists r=t[0]"));
        }
        r$1.set(0L, .ceylon.language.Integer.instance(100L));
    }
    
    private final void strings$priv$() {
        final .ceylon.language.Array<.ceylon.language.Array<.ceylon.language.String>> t = .ceylon.language.arrayOfSize_.<.ceylon.language.Array<.ceylon.language.String>>arrayOfSize(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Array.class, .ceylon.language.String.$TypeDescriptor$), 2L, .ceylon.language.arrayOfSize_.<.ceylon.language.String>arrayOfSize(.ceylon.language.String.$TypeDescriptor$, 2L, .ceylon.language.String.instance("")));
        final .ceylon.language.Array<.ceylon.language.String> r$3;
        .ceylon.language.Array<.ceylon.language.String> r$2 = null;
        if ((r$2 = t.getFromFirst(0L)) != null) {
            r$3 = r$2;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "exists r=t[0]"));
        }
        r$3.set(0L, .ceylon.language.String.instance(""));
    }
    
    private final void nulls$priv$() {
        final .ceylon.language.Array<.ceylon.language.Array<.java.lang.Object>> t = .ceylon.language.arrayOfSize_.<.ceylon.language.Array<.java.lang.Object>>arrayOfSize(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Array.class, .ceylon.language.Null.$TypeDescriptor$), 2L, .ceylon.language.arrayOfSize_.<.java.lang.Object>arrayOfSize(.ceylon.language.Null.$TypeDescriptor$, 2L, null));
        final .ceylon.language.Array<.java.lang.Object> r$5;
        .ceylon.language.Array<.java.lang.Object> r$4 = null;
        if ((r$4 = t.getFromFirst(0L)) != null) {
            r$5 = r$4;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "exists r=t[0]"));
        }
        r$5.set(0L, null);
    }
    
    private final void objects$priv$(final .java.lang.Object obj) {
        final .ceylon.language.Array<.ceylon.language.Array<.java.lang.Object>> t = .ceylon.language.arrayOfSize_.<.ceylon.language.Array<.java.lang.Object>>arrayOfSize(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Array.class, .ceylon.language.Object.$TypeDescriptor$), 2L, .ceylon.language.arrayOfSize_.<.java.lang.Object>arrayOfSize(.ceylon.language.Object.$TypeDescriptor$, 2L, obj));
        final .ceylon.language.Array<.java.lang.Object> r$7;
        .ceylon.language.Array<.java.lang.Object> r$6 = null;
        if ((r$6 = t.getFromFirst(0L)) != null) {
            r$7 = r$6;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "exists r=t[0]"));
        }
        r$7.set(0L, obj);
    }
    
    private final void union$priv$(final .java.lang.Object obj) {
        final .ceylon.language.Array<.ceylon.language.Array<.java.lang.Object>> t = .ceylon.language.arrayOfSize_.<.ceylon.language.Array<.java.lang.Object>>arrayOfSize(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Array.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$)), 2L, .ceylon.language.arrayOfSize_.<.java.lang.Object>arrayOfSize(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.union(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Float.$TypeDescriptor$), 2L, obj));
        final .ceylon.language.Array r$9;
        .ceylon.language.Array r$8 = null;
        if ((r$8 = (.ceylon.language.Array<.java.lang.Object>)((.ceylon.language.List<? extends .ceylon.language.Array<.java.lang.Object>>)(.ceylon.language.List)t).getFromFirst(0L)) != null) {
            r$9 = r$8;
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "exists r=t[0]"));
        }
        r$9.set(0L, obj);
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.statement.conditional.AssertExists2dArray.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.statement.conditional.AssertExists2dArray.class);
}