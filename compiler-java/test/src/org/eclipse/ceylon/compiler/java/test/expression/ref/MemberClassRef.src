package org.eclipse.ceylon.compiler.java.test.expression.ref;

class MemberClassRef implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
    
    MemberClassRef() {
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nullary Nullary$new$() {
        return new Nullary();
    }
    
    public class Nullary implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected Nullary() {
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return "nullary()";
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nullary.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Unary Unary$new$(final .java.lang.String s) {
        return new Unary(s);
    }
    
    public class Unary implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected Unary(final .java.lang.String s) {
            this.s = s;
        }
        private final .java.lang.String s;
        
        private final .java.lang.String getS$priv$() {
            return this.s;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("unary(").append(getS$priv$()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Unary.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Binary Binary$new$(final .java.lang.String s1, final .java.lang.String s2) {
        return new Binary(s1, s2);
    }
    
    public class Binary implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected Binary(final .java.lang.String s1, final .java.lang.String s2) {
            this.s1 = s1;
            this.s2 = s2;
        }
        private final .java.lang.String s1;
        
        private final .java.lang.String getS1$priv$() {
            return this.s1;
        }
        private final .java.lang.String s2;
        
        private final .java.lang.String getS2$priv$() {
            return this.s2;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("binary(").append(getS1$priv$()).append(", ").append(getS2$priv$()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Binary.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Ternary Ternary$new$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return new Ternary(s1, s2, s3);
    }
    
    public class Ternary implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected Ternary(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
        }
        private final .java.lang.String s1;
        
        private final .java.lang.String getS1$priv$() {
            return this.s1;
        }
        private final .java.lang.String s2;
        
        private final .java.lang.String getS2$priv$() {
            return this.s2;
        }
        private final .java.lang.String s3;
        
        private final .java.lang.String getS3$priv$() {
            return this.s3;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("ternary(").append(getS1$priv$()).append(", ").append(getS2$priv$()).append(", ").append(getS3$priv$()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Ternary.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nary Nary$new$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
        return new Nary(s1, s2, s3, s4);
    }
    
    public class Nary implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected Nary(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
            this.s4 = s4;
        }
        private final .java.lang.String s1;
        
        private final .java.lang.String getS1$priv$() {
            return this.s1;
        }
        private final .java.lang.String s2;
        
        private final .java.lang.String getS2$priv$() {
            return this.s2;
        }
        private final .java.lang.String s3;
        
        private final .java.lang.String getS3$priv$() {
            return this.s3;
        }
        private final .java.lang.String s4;
        
        private final .java.lang.String getS4$priv$() {
            return this.s4;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("nary(").append(getS1$priv$()).append(", ").append(getS2$priv$()).append(", ").append(getS3$priv$()).append(", ").append(getS4$priv$()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nary.class));
        }
    }
    
    public final void simple() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nullary>> nullaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nullary>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nullary.class)), .ceylon.language.Empty.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.Nullary()(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nullary> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nullary>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nullary.class)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassRef.Nullary()", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nullary $call$() {
                        return $instance$.Nullary$new$();
                    }
                };
            }
        };
        .ceylon.language.String lhs$0 = .ceylon.language.String.instance("nullary()");
        .ceylon.language.String rhs$1 = .ceylon.language.String.instance(nullaryRef.$call$((.java.lang.Object)this).$call$().toString());
        if (lhs$0.equals(rhs$1)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullary()\" == nullaryRef(this)().string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$0, rhs$1));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Unary>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Unary>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Unary.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.Unary(String)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Unary> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Unary>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Unary.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.Unary(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Unary $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                        return $instance$.Unary$new$(s);
                    }
                };
            }
        };
        .ceylon.language.String lhs$2 = .ceylon.language.String.instance("unary(u)");
        .ceylon.language.String rhs$3 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("u")).toString());
        if (lhs$2.equals(rhs$3)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unary(u)\" == unaryRef(this)(\"u\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$2, rhs$3));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Binary>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Binary>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Binary.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.Binary(String, String)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Binary> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Binary>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Binary.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.Binary(String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Binary $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        return $instance$.Binary$new$(s1, s2);
                    }
                };
            }
        };
        .ceylon.language.String lhs$4 = .ceylon.language.String.instance("binary(b1, b2)");
        .ceylon.language.String rhs$5 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("b1"), .ceylon.language.String.instance("b2")).toString());
        if (lhs$4.equals(rhs$5)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binary(b1, b2)\" == binaryRef(this)(\"b1\", \"b2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$4, rhs$5));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Ternary>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Ternary>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Ternary.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.Ternary(String, String, String)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Ternary> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Ternary>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Ternary.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.Ternary(String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Ternary $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        return $instance$.Ternary$new$(s1, s2, s3);
                    }
                };
            }
        };
        .ceylon.language.String lhs$6 = .ceylon.language.String.instance("ternary(t1, t2, t3)");
        .ceylon.language.String rhs$7 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1"), .ceylon.language.String.instance("t2"), .ceylon.language.String.instance("t3")).toString());
        if (lhs$6.equals(rhs$7)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternary(t1, t2, t3)\" == ternaryRef(this)(\"t1\", \"t2\", \"t3\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$6, rhs$7));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nary>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nary>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nary.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.Nary(String, String, String, String)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nary> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nary>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nary.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.Nary(String, String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Nary $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return $instance$.Nary$new$(s1, s2, s3, s4);
                    }
                };
            }
        };
        .ceylon.language.String lhs$8 = .ceylon.language.String.instance("nary(n1, n2, n3, n4)");
        .ceylon.language.String rhs$9 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2"), .ceylon.language.String.instance("n3"), .ceylon.language.String.instance("n4")).toString());
        if (lhs$8.equals(rhs$9)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nary(n1, n2, n3, n4)\" == naryRef(this)(\"n1\", \"n2\", \"n3\", \"n4\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$8, rhs$9));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted UnaryDefaulted$new$(final .java.lang.String s) {
        return new UnaryDefaulted(s);
    }
    
    public final .java.lang.String $default$UnaryDefaulted$s() {
        return "s";
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted UnaryDefaulted$new$() {
        return (
            let
            {
                .java.lang.String $ceylontmp$s$10 = $default$UnaryDefaulted$s();
            }
            returning new UnaryDefaulted($ceylontmp$s$10);
        );
    }
    
    public class UnaryDefaulted implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected UnaryDefaulted(final .java.lang.String s) {
            this.s = s;
        }
        private final .java.lang.String s;
        
        private final .java.lang.String getS$priv$() {
            return this.s;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("unaryDefaulted(").append(getS$priv$()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted BinaryDefaulted$new$(final .java.lang.String s1, final .java.lang.String s2) {
        return new BinaryDefaulted(s1, s2);
    }
    
    public final .java.lang.String $default$BinaryDefaulted$s1() {
        return "s1";
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted BinaryDefaulted$new$() {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$11 = $default$BinaryDefaulted$s1();
                .java.lang.String $ceylontmp$s2$12 = $default$BinaryDefaulted$s2($ceylontmp$s1$11);
            }
            returning new BinaryDefaulted($ceylontmp$s1$11, $ceylontmp$s2$12);
        );
    }
    
    public final .java.lang.String $default$BinaryDefaulted$s2(final .java.lang.String s1) {
        return "s2";
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted BinaryDefaulted$new$(final .java.lang.String s1) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s2$13 = $default$BinaryDefaulted$s2(s1);
            }
            returning new BinaryDefaulted(s1, $ceylontmp$s2$13);
        );
    }
    
    public class BinaryDefaulted implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected BinaryDefaulted(final .java.lang.String s1, final .java.lang.String s2) {
            this.s1 = s1;
            this.s2 = s2;
        }
        private final .java.lang.String s1;
        
        private final .java.lang.String getS1$priv$() {
            return this.s1;
        }
        private final .java.lang.String s2;
        
        private final .java.lang.String getS2$priv$() {
            return this.s2;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("binaryDefaulted(").append(getS1$priv$()).append(", ").append(getS2$priv$()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted TernaryDefaulted$new$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return new TernaryDefaulted(s1, s2, s3);
    }
    
    public final .java.lang.String $default$TernaryDefaulted$s1() {
        return "s1";
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted TernaryDefaulted$new$() {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$14 = $default$TernaryDefaulted$s1();
                .java.lang.String $ceylontmp$s2$15 = $default$TernaryDefaulted$s2($ceylontmp$s1$14);
                .java.lang.String $ceylontmp$s3$16 = $default$TernaryDefaulted$s3($ceylontmp$s1$14, $ceylontmp$s2$15);
            }
            returning new TernaryDefaulted($ceylontmp$s1$14, $ceylontmp$s2$15, $ceylontmp$s3$16);
        );
    }
    
    public final .java.lang.String $default$TernaryDefaulted$s2(final .java.lang.String s1) {
        return "s2";
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted TernaryDefaulted$new$(final .java.lang.String s1) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s2$17 = $default$TernaryDefaulted$s2(s1);
                .java.lang.String $ceylontmp$s3$18 = $default$TernaryDefaulted$s3(s1, $ceylontmp$s2$17);
            }
            returning new TernaryDefaulted(s1, $ceylontmp$s2$17, $ceylontmp$s3$18);
        );
    }
    
    public final .java.lang.String $default$TernaryDefaulted$s3(final .java.lang.String s1, final .java.lang.String s2) {
        return "s3";
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted TernaryDefaulted$new$(final .java.lang.String s1, final .java.lang.String s2) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s3$19 = $default$TernaryDefaulted$s3(s1, s2);
            }
            returning new TernaryDefaulted(s1, s2, $ceylontmp$s3$19);
        );
    }
    
    public class TernaryDefaulted implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected TernaryDefaulted(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
        }
        private final .java.lang.String s1;
        
        private final .java.lang.String getS1$priv$() {
            return this.s1;
        }
        private final .java.lang.String s2;
        
        private final .java.lang.String getS2$priv$() {
            return this.s2;
        }
        private final .java.lang.String s3;
        
        private final .java.lang.String getS3$priv$() {
            return this.s3;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("ternaryDefaulted(").append(getS1$priv$()).append(", ").append(getS2$priv$()).append(", ").append(getS3$priv$()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted NaryDefaulted$new$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
        return new NaryDefaulted(s1, s2, s3, s4);
    }
    
    public final .java.lang.String $default$NaryDefaulted$s1() {
        return "s1";
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted NaryDefaulted$new$() {
        return (
            let
            {
                .java.lang.String $ceylontmp$s1$20 = $default$NaryDefaulted$s1();
                .java.lang.String $ceylontmp$s2$21 = $default$NaryDefaulted$s2($ceylontmp$s1$20);
                .java.lang.String $ceylontmp$s3$22 = $default$NaryDefaulted$s3($ceylontmp$s1$20, $ceylontmp$s2$21);
                .java.lang.String $ceylontmp$s4$23 = $default$NaryDefaulted$s4($ceylontmp$s1$20, $ceylontmp$s2$21, $ceylontmp$s3$22);
            }
            returning new NaryDefaulted($ceylontmp$s1$20, $ceylontmp$s2$21, $ceylontmp$s3$22, $ceylontmp$s4$23);
        );
    }
    
    public final .java.lang.String $default$NaryDefaulted$s2(final .java.lang.String s1) {
        return "s2";
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted NaryDefaulted$new$(final .java.lang.String s1) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s2$24 = $default$NaryDefaulted$s2(s1);
                .java.lang.String $ceylontmp$s3$25 = $default$NaryDefaulted$s3(s1, $ceylontmp$s2$24);
                .java.lang.String $ceylontmp$s4$26 = $default$NaryDefaulted$s4(s1, $ceylontmp$s2$24, $ceylontmp$s3$25);
            }
            returning new NaryDefaulted(s1, $ceylontmp$s2$24, $ceylontmp$s3$25, $ceylontmp$s4$26);
        );
    }
    
    public final .java.lang.String $default$NaryDefaulted$s3(final .java.lang.String s1, final .java.lang.String s2) {
        return "s3";
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted NaryDefaulted$new$(final .java.lang.String s1, final .java.lang.String s2) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s3$27 = $default$NaryDefaulted$s3(s1, s2);
                .java.lang.String $ceylontmp$s4$28 = $default$NaryDefaulted$s4(s1, s2, $ceylontmp$s3$27);
            }
            returning new NaryDefaulted(s1, s2, $ceylontmp$s3$27, $ceylontmp$s4$28);
        );
    }
    
    public final .java.lang.String $default$NaryDefaulted$s4(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return "s4";
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted NaryDefaulted$new$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return (
            let
            {
                .java.lang.String $ceylontmp$s4$29 = $default$NaryDefaulted$s4(s1, s2, s3);
            }
            returning new NaryDefaulted(s1, s2, s3, $ceylontmp$s4$29);
        );
    }
    
    public class NaryDefaulted implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected NaryDefaulted(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
            this.s4 = s4;
        }
        private final .java.lang.String s1;
        
        private final .java.lang.String getS1$priv$() {
            return this.s1;
        }
        private final .java.lang.String s2;
        
        private final .java.lang.String getS2$priv$() {
            return this.s2;
        }
        private final .java.lang.String s3;
        
        private final .java.lang.String getS3$priv$() {
            return this.s3;
        }
        private final .java.lang.String s4;
        
        private final .java.lang.String getS4$priv$() {
            return this.s4;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("naryDefaulted(").append(getS1$priv$()).append(", ").append(getS2$priv$()).append(", ").append(getS3$priv$()).append(", ").append(getS4$priv$()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted.class));
        }
    }
    
    public final void defaulted() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.UnaryDefaulted(String=)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.UnaryDefaulted(String=)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted $call$() {
                        final .java.lang.String s = $instance$.$default$UnaryDefaulted$s();
                        return $calltyped$(s);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s);
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryDefaulted $calltyped$(final .java.lang.String s) {
                        return $instance$.UnaryDefaulted$new$(s);
                    }
                };
            }
        };
        .ceylon.language.String lhs$30 = .ceylon.language.String.instance("unaryDefaulted(u)");
        .ceylon.language.String rhs$31 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("u")).toString());
        if (lhs$30.equals(rhs$31)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unaryDefaulted(u)\" == unaryRef(this)(\"u\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$30, rhs$31));
        }
        .ceylon.language.String lhs$32 = .ceylon.language.String.instance("unaryDefaulted(s)");
        .ceylon.language.String rhs$33 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$call$().toString());
        if (lhs$32.equals(rhs$33)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unaryDefaulted(s)\" == unaryRef(this)().string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$32, rhs$33));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.BinaryDefaulted(String=, String=)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.BinaryDefaulted(String=, String=)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted $call$() {
                        final .java.lang.String s1 = $instance$.$default$BinaryDefaulted$s1();
                        final .java.lang.String s2 = $instance$.$default$BinaryDefaulted$s2(s1);
                        return $calltyped$(s1, s2);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = $instance$.$default$BinaryDefaulted$s2(s1);
                        return $calltyped$(s1, s2);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        return $calltyped$(s1, s2);
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryDefaulted $calltyped$(final .java.lang.String s1, final .java.lang.String s2) {
                        return $instance$.BinaryDefaulted$new$(s1, s2);
                    }
                };
            }
        };
        .ceylon.language.String lhs$34 = .ceylon.language.String.instance("binaryDefaulted(b1, b2)");
        .ceylon.language.String rhs$35 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("b1"), .ceylon.language.String.instance("b2")).toString());
        if (lhs$34.equals(rhs$35)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binaryDefaulted(b1, b2)\" == binaryRef(this)(\"b1\", \"b2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$34, rhs$35));
        }
        .ceylon.language.String lhs$36 = .ceylon.language.String.instance("binaryDefaulted(b1, s2)");
        .ceylon.language.String rhs$37 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("b1")).toString());
        if (lhs$36.equals(rhs$37)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binaryDefaulted(b1, s2)\" == binaryRef(this)(\"b1\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$36, rhs$37));
        }
        .ceylon.language.String lhs$38 = .ceylon.language.String.instance("binaryDefaulted(s1, s2)");
        .ceylon.language.String rhs$39 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$call$().toString());
        if (lhs$38.equals(rhs$39)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binaryDefaulted(s1, s2)\" == binaryRef(this)().string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$38, rhs$39));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.TernaryDefaulted(String=, String=, String=)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.TernaryDefaulted(String=, String=, String=)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted $call$() {
                        final .java.lang.String s1 = $instance$.$default$TernaryDefaulted$s1();
                        final .java.lang.String s2 = $instance$.$default$TernaryDefaulted$s2(s1);
                        final .java.lang.String s3 = $instance$.$default$TernaryDefaulted$s3(s1, s2);
                        return $calltyped$(s1, s2, s3);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = $instance$.$default$TernaryDefaulted$s2(s1);
                        final .java.lang.String s3 = $instance$.$default$TernaryDefaulted$s3(s1, s2);
                        return $calltyped$(s1, s2, s3);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = $instance$.$default$TernaryDefaulted$s3(s1, s2);
                        return $calltyped$(s1, s2, s3);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        return $calltyped$(s1, s2, s3);
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryDefaulted $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
                        return $instance$.TernaryDefaulted$new$(s1, s2, s3);
                    }
                };
            }
        };
        .ceylon.language.String lhs$40 = .ceylon.language.String.instance("ternaryDefaulted(t1, t2, t3)");
        .ceylon.language.String rhs$41 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1"), .ceylon.language.String.instance("t2"), .ceylon.language.String.instance("t3")).toString());
        if (lhs$40.equals(rhs$41)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternaryDefaulted(t1, t2, t3)\" == ternaryRef(this)(\"t1\", \"t2\", \"t3\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$40, rhs$41));
        }
        .ceylon.language.String lhs$42 = .ceylon.language.String.instance("ternaryDefaulted(t1, t2, s3)");
        .ceylon.language.String rhs$43 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1"), .ceylon.language.String.instance("t2")).toString());
        if (lhs$42.equals(rhs$43)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternaryDefaulted(t1, t2, s3)\" == ternaryRef(this)(\"t1\", \"t2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$42, rhs$43));
        }
        .ceylon.language.String lhs$44 = .ceylon.language.String.instance("ternaryDefaulted(t1, s2, s3)");
        .ceylon.language.String rhs$45 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1")).toString());
        if (lhs$44.equals(rhs$45)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternaryDefaulted(t1, s2, s3)\" == ternaryRef(this)(\"t1\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$44, rhs$45));
        }
        .ceylon.language.String lhs$46 = .ceylon.language.String.instance("ternaryDefaulted(s1, s2, s3)");
        .ceylon.language.String rhs$47 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$call$().toString());
        if (lhs$46.equals(rhs$47)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternaryDefaulted(s1, s2, s3)\" == ternaryRef(this)().string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$46, rhs$47));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.NaryDefaulted(String=, String=, String=, String=)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, 0, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.NaryDefaulted(String=, String=, String=, String=)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted $call$() {
                        final .java.lang.String s1 = $instance$.$default$NaryDefaulted$s1();
                        final .java.lang.String s2 = $instance$.$default$NaryDefaulted$s2(s1);
                        final .java.lang.String s3 = $instance$.$default$NaryDefaulted$s3(s1, s2);
                        final .java.lang.String s4 = $instance$.$default$NaryDefaulted$s4(s1, s2, s3);
                        return $calltyped$(s1, s2, s3, s4);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = $instance$.$default$NaryDefaulted$s2(s1);
                        final .java.lang.String s3 = $instance$.$default$NaryDefaulted$s3(s1, s2);
                        final .java.lang.String s4 = $instance$.$default$NaryDefaulted$s4(s1, s2, s3);
                        return $calltyped$(s1, s2, s3, s4);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = $instance$.$default$NaryDefaulted$s3(s1, s2);
                        final .java.lang.String s4 = $instance$.$default$NaryDefaulted$s4(s1, s2, s3);
                        return $calltyped$(s1, s2, s3, s4);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .java.lang.String s4 = $instance$.$default$NaryDefaulted$s4(s1, s2, s3);
                        return $calltyped$(s1, s2, s3, s4);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = $param$0.length > 0 ? ((.ceylon.language.String)$param$0[0]).toString() : $instance$.$default$NaryDefaulted$s1();
                        final .java.lang.String s2 = $param$0.length > 1 ? ((.ceylon.language.String)$param$0[1]).toString() : $instance$.$default$NaryDefaulted$s2(s1);
                        final .java.lang.String s3 = $param$0.length > 2 ? ((.ceylon.language.String)$param$0[2]).toString() : $instance$.$default$NaryDefaulted$s3(s1, s2);
                        final .java.lang.String s4 = $param$0.length > 3 ? ((.ceylon.language.String)$param$0[3]).toString() : $instance$.$default$NaryDefaulted$s4(s1, s2, s3);
                        return $calltyped$(s1, s2, s3, s4);
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryDefaulted $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
                        return $instance$.NaryDefaulted$new$(s1, s2, s3, s4);
                    }
                };
            }
        };
        .ceylon.language.String lhs$48 = .ceylon.language.String.instance("naryDefaulted(n1, n2, n3, n4)");
        .ceylon.language.String rhs$49 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2"), .ceylon.language.String.instance("n3"), .ceylon.language.String.instance("n4")).toString());
        if (lhs$48.equals(rhs$49)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryDefaulted(n1, n2, n3, n4)\" == naryRef(this)(\"n1\", \"n2\", \"n3\", \"n4\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$48, rhs$49));
        }
        .ceylon.language.String lhs$50 = .ceylon.language.String.instance("naryDefaulted(n1, n2, n3, s4)");
        .ceylon.language.String rhs$51 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2"), .ceylon.language.String.instance("n3")).toString());
        if (lhs$50.equals(rhs$51)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryDefaulted(n1, n2, n3, s4)\" == naryRef(this)(\"n1\", \"n2\", \"n3\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$50, rhs$51));
        }
        .ceylon.language.String lhs$52 = .ceylon.language.String.instance("naryDefaulted(n1, n2, s3, s4)");
        .ceylon.language.String rhs$53 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2")).toString());
        if (lhs$52.equals(rhs$53)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryDefaulted(n1, n2, s3, s4)\" == naryRef(this)(\"n1\", \"n2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$52, rhs$53));
        }
        .ceylon.language.String lhs$54 = .ceylon.language.String.instance("naryDefaulted(n1, s2, s3, s4)");
        .ceylon.language.String rhs$55 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1")).toString());
        if (lhs$54.equals(rhs$55)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryDefaulted(n1, s2, s3, s4)\" == naryRef(this)(\"n1\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$54, rhs$55));
        }
        .ceylon.language.String lhs$56 = .ceylon.language.String.instance("naryDefaulted(s1, s2, s3, s4)");
        .ceylon.language.String rhs$57 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$call$().toString());
        if (lhs$56.equals(rhs$57)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"naryDefaulted(s1, s2, s3, s4)\" == naryRef(this)().string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$56, rhs$57));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced NullarySequenced$new$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return new NullarySequenced(s);
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced NullarySequenced$new$() {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$58 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new NullarySequenced($ceylontmp$s$58);
        );
    }
    
    public class NullarySequenced implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected NullarySequenced(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
            this.s = s;
        }
        private final .ceylon.language.Sequential<? extends .ceylon.language.String> s;
        
        private final .ceylon.language.Sequential<? extends .ceylon.language.String> getS$priv$() {
            return this.s;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("nullarySequenced(").append(getS$priv$().toString()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced UnarySequenced$new$(final .java.lang.String s1, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return new UnarySequenced(s1, s);
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced UnarySequenced$new$(final .java.lang.String s1) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$59 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new UnarySequenced(s1, $ceylontmp$s$59);
        );
    }
    
    public class UnarySequenced implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected UnarySequenced(final .java.lang.String s1, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
            this.s1 = s1;
            this.s = s;
        }
        private final .java.lang.String s1;
        
        private final .java.lang.String getS1$priv$() {
            return this.s1;
        }
        private final .ceylon.language.Sequential<? extends .ceylon.language.String> s;
        
        private final .ceylon.language.Sequential<? extends .ceylon.language.String> getS$priv$() {
            return this.s;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("unarySequenced(").append(getS1$priv$()).append("; ").append(getS$priv$().toString()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced BinarySequenced$new$(final .java.lang.String s1, final .java.lang.String s2, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return new BinarySequenced(s1, s2, s);
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced BinarySequenced$new$(final .java.lang.String s1, final .java.lang.String s2) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$60 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new BinarySequenced(s1, s2, $ceylontmp$s$60);
        );
    }
    
    public class BinarySequenced implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected BinarySequenced(final .java.lang.String s1, final .java.lang.String s2, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
            this.s1 = s1;
            this.s2 = s2;
            this.s = s;
        }
        private final .java.lang.String s1;
        
        private final .java.lang.String getS1$priv$() {
            return this.s1;
        }
        private final .java.lang.String s2;
        
        private final .java.lang.String getS2$priv$() {
            return this.s2;
        }
        private final .ceylon.language.Sequential<? extends .ceylon.language.String> s;
        
        private final .ceylon.language.Sequential<? extends .ceylon.language.String> getS$priv$() {
            return this.s;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("binarySequenced(").append(getS1$priv$()).append(", ").append(getS2$priv$()).append("; ").append(getS$priv$().toString()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced TernarySequenced$new$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return new TernarySequenced(s1, s2, s3, s);
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced TernarySequenced$new$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$61 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new TernarySequenced(s1, s2, s3, $ceylontmp$s$61);
        );
    }
    
    public class TernarySequenced implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected TernarySequenced(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
            this.s = s;
        }
        private final .java.lang.String s1;
        
        private final .java.lang.String getS1$priv$() {
            return this.s1;
        }
        private final .java.lang.String s2;
        
        private final .java.lang.String getS2$priv$() {
            return this.s2;
        }
        private final .java.lang.String s3;
        
        private final .java.lang.String getS3$priv$() {
            return this.s3;
        }
        private final .ceylon.language.Sequential<? extends .ceylon.language.String> s;
        
        private final .ceylon.language.Sequential<? extends .ceylon.language.String> getS$priv$() {
            return this.s;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("ternarySequenced(").append(getS1$priv$()).append(", ").append(getS2$priv$()).append(", ").append(getS3$priv$()).append("; ").append(getS$priv$().toString()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced.class));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced NarySequenced$new$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
        return new NarySequenced(s1, s2, s3, s4, s);
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced NarySequenced$new$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$s$62 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning new NarySequenced(s1, s2, s3, s4, $ceylontmp$s$62);
        );
    }
    
    public class NarySequenced implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected NarySequenced(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
            this.s4 = s4;
            this.s = s;
        }
        private final .java.lang.String s1;
        
        private final .java.lang.String getS1$priv$() {
            return this.s1;
        }
        private final .java.lang.String s2;
        
        private final .java.lang.String getS2$priv$() {
            return this.s2;
        }
        private final .java.lang.String s3;
        
        private final .java.lang.String getS3$priv$() {
            return this.s3;
        }
        private final .java.lang.String s4;
        
        private final .java.lang.String getS4$priv$() {
            return this.s4;
        }
        private final .ceylon.language.Sequential<? extends .ceylon.language.String> s;
        
        private final .ceylon.language.Sequential<? extends .ceylon.language.String> getS$priv$() {
            return this.s;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("narySequenced(").append(getS1$priv$()).append(", ").append(getS2$priv$()).append(", ").append(getS3$priv$()).append(", ").append(getS4$priv$()).append("; ").append(getS$priv$().toString()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced.class));
        }
    }
    
    public final void sequenced() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced>> nullaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.NullarySequenced(String*)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Sequential.class, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.NullarySequenced(String*)", (short)0){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $call$() {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0;
                        return $calltyped$(s);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$0}, .ceylon.language.empty_.get_());
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$0}, $param$1));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$0,
                                $param$1}, .ceylon.language.empty_.get_());
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1}, $param$2));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$0,
                                $param$1,
                                $param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 3, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$0,
                                (.ceylon.language.String)$param$1,
                                (.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $call$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0.length - 0, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        return $calltyped$($spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullarySequenced $calltyped$(final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return $instance$.NullarySequenced$new$(s);
                    }
                };
            }
        };
        .ceylon.language.String lhs$63 = .ceylon.language.String.instance("nullarySequenced([])");
        .ceylon.language.String rhs$64 = .ceylon.language.String.instance(nullaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        if (lhs$63.equals(rhs$64)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullarySequenced([])\" == nullaryRef(this)().string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$63, rhs$64));
        }
        .ceylon.language.String lhs$65 = .ceylon.language.String.instance("nullarySequenced([r1])");
        .ceylon.language.String rhs$66 = .ceylon.language.String.instance(nullaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("r1")}, .ceylon.language.empty_.get_())).toString());
        if (lhs$65.equals(rhs$66)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullarySequenced([r1])\" == nullaryRef(this)(\"r1\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$65, rhs$66));
        }
        .ceylon.language.String lhs$67 = .ceylon.language.String.instance("nullarySequenced([r1, r2])");
        .ceylon.language.String rhs$68 = .ceylon.language.String.instance(nullaryRef.$call$((.java.lang.Object)this).$callvariadic$((.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")}, .ceylon.language.empty_.get_())).toString());
        if (lhs$67.equals(rhs$68)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullarySequenced([r1, r2])\" == nullaryRef(this)(\"r1\", \"r2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$67, rhs$68));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.UnarySequenced(String, String*)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.UnarySequenced(String, String*)", (short)1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced $callvariadic$(final .ceylon.language.Sequential $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0.get(.ceylon.language.Integer.instance(0))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$0.spanFrom(.ceylon.language.Integer.instance(1));
                        return $calltyped$(s1, s);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$1;
                        return $calltyped$(s1, s);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$1}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$1}, $param$2));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                                $param$1,
                                $param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 2, new .java.lang.Object[]{
                                (.ceylon.language.String)$param$1,
                                (.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 1, $param$0.length - 1, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        return $calltyped$(s1, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 1, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnarySequenced $calltyped$(final .java.lang.String s1, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return $instance$.UnarySequenced$new$(s1, s);
                    }
                };
            }
        };
        .ceylon.language.String lhs$69 = .ceylon.language.String.instance("unarySequenced(s; [])");
        .ceylon.language.String rhs$70 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        if (lhs$69.equals(rhs$70)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unarySequenced(s; [])\" == unaryRef(this)(\"s\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$69, rhs$70));
        }
        .ceylon.language.String lhs$71 = .ceylon.language.String.instance("unarySequenced(s; [r1])");
        .ceylon.language.String rhs$72 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("r1")}, .ceylon.language.empty_.get_())).toString());
        if (lhs$71.equals(rhs$72)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unarySequenced(s; [r1])\" == unaryRef(this)(\"s\", \"r1\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$71, rhs$72));
        }
        .ceylon.language.String lhs$73 = .ceylon.language.String.instance("unarySequenced(s; [r1, r2])");
        .ceylon.language.String rhs$74 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")}, .ceylon.language.empty_.get_())).toString());
        if (lhs$73.equals(rhs$74)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unarySequenced(s; [r1, r2])\" == unaryRef(this)(\"s\", \"r1\", \"r2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$73, rhs$74));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.BinarySequenced(String, String, String*)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.BinarySequenced(String, String, String*)", (short)2){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced $callvariadic$(final .java.lang.Object $param$0, final .ceylon.language.Sequential $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1.get(.ceylon.language.Integer.instance(1))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$1.spanFrom(.ceylon.language.Integer.instance(2));
                        return $calltyped$(s1, s2, s);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s2, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$2;
                        return $calltyped$(s1, s2, s);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{$param$2}, .ceylon.language.empty_.get_());
                        return $calltyped$(s1, s2, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 0, 1, new .java.lang.Object[]{(.ceylon.language.String)$param$2}, $param$3));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 2, $param$0.length - 2, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        return $calltyped$(s1, s2, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 2, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinarySequenced $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return $instance$.BinarySequenced$new$(s1, s2, s);
                    }
                };
            }
        };
        .ceylon.language.String lhs$75 = .ceylon.language.String.instance("binarySequenced(s1, s2; [])");
        .ceylon.language.String rhs$76 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        if (lhs$75.equals(rhs$76)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binarySequenced(s1, s2; [])\" == binaryRef(this)(\"s1\", \"s2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$75, rhs$76));
        }
        .ceylon.language.String lhs$77 = .ceylon.language.String.instance("binarySequenced(s1, s2; [r1])");
        .ceylon.language.String rhs$78 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("r1")}, .ceylon.language.empty_.get_())).toString());
        if (lhs$77.equals(rhs$78)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binarySequenced(s1, s2; [r1])\" == binaryRef(this)(\"s1\", \"s2\", \"r1\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$77, rhs$78));
        }
        .ceylon.language.String lhs$79 = .ceylon.language.String.instance("binarySequenced(s1, s2; [r1, r2])");
        .ceylon.language.String rhs$80 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")}, .ceylon.language.empty_.get_())).toString());
        if (lhs$79.equals(rhs$80)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binarySequenced(s1, s2; [r1, r2])\" == binaryRef(this)(\"s1\", \"s2\", \"r1\", \"r2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$79, rhs$80));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.TernarySequenced(String, String, String, String*)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.TernarySequenced(String, String, String, String*)", (short)3){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .ceylon.language.Sequential $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2.get(.ceylon.language.Integer.instance(2))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$2.spanFrom(.ceylon.language.Integer.instance(3));
                        return $calltyped$(s1, s2, s3, s);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s$variadic$ = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                        return $calltyped$(s1, s2, s3, s$variadic$);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$3;
                        return $calltyped$(s1, s2, s3, s);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        return $calltyped$(s1, s2, s3, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 3, $param$0.length - 3, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        return $calltyped$(s1, s2, s3, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 3, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernarySequenced $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return $instance$.TernarySequenced$new$(s1, s2, s3, s);
                    }
                };
            }
        };
        .ceylon.language.String lhs$81 = .ceylon.language.String.instance("ternarySequenced(s1, s2, s3; [])");
        .ceylon.language.String rhs$82 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        if (lhs$81.equals(rhs$82)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternarySequenced(s1, s2, s3; [])\" == ternaryRef(this)(\"s1\", \"s2\", \"s3\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$81, rhs$82));
        }
        .ceylon.language.String lhs$83 = .ceylon.language.String.instance("ternarySequenced(s1, s2, s3; [r1])");
        .ceylon.language.String rhs$84 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("r1")}, .ceylon.language.empty_.get_())).toString());
        if (lhs$83.equals(rhs$84)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternarySequenced(s1, s2, s3; [r1])\" == ternaryRef(this)(\"s1\", \"s2\", \"s3\", \"r1\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$83, rhs$84));
        }
        .ceylon.language.String lhs$85 = .ceylon.language.String.instance("ternarySequenced(s1, s2, s3; [r1, r2])");
        .ceylon.language.String rhs$86 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")}, .ceylon.language.empty_.get_())).toString());
        if (lhs$85.equals(rhs$86)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternarySequenced(s1, s2, s3; [r1, r2])\" == ternaryRef(this)(\"s1\", \"s2\", \"s3\", \"r1\", \"r2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$85, rhs$86));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.NarySequenced(String, String, String, String, String*)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(true, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.NarySequenced(String, String, String, String, String*)", (short)4){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced $callvariadic$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2, final .ceylon.language.Sequential $param$3) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$1).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$2).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$3.get(.ceylon.language.Integer.instance(3))).toString();
                        final .ceylon.language.Sequential<? extends .ceylon.language.String> s = (.ceylon.language.Sequential<? extends .ceylon.language.String>)(.ceylon.language.Sequential)$param$3.spanFrom(.ceylon.language.Integer.instance(4));
                        return $calltyped$(s1, s2, s3, s4, s);
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced $call$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return $calltyped$(s1, s2, s3, s4, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 4, $param$0.length - 4, $param$0, .ceylon.language.empty_.get_()));
                    }
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced $callvariadic$(final .java.lang.Object... $param$0) {
                        final .java.lang.String s1 = ((.ceylon.language.String)$param$0[0]).toString();
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0[1]).toString();
                        final .java.lang.String s3 = ((.ceylon.language.String)$param$0[2]).toString();
                        final .java.lang.String s4 = ((.ceylon.language.String)$param$0[3]).toString();
                        return $calltyped$(s1, s2, s3, s4, $spreadVarargs$(.ceylon.language.String.$TypeDescriptor$, 4, $param$0));
                    }
                    
                    private .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NarySequenced $calltyped$(final .java.lang.String s1, final .java.lang.String s2, final .java.lang.String s3, final .java.lang.String s4, final .ceylon.language.Sequential<? extends .ceylon.language.String> s) {
                        return $instance$.NarySequenced$new$(s1, s2, s3, s4, s);
                    }
                };
            }
        };
        .ceylon.language.String lhs$87 = .ceylon.language.String.instance("narySequenced(s1, s2, s3, s4; [])");
        .ceylon.language.String rhs$88 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), (.ceylon.language.Sequential).ceylon.language.empty_.get_()).toString());
        if (lhs$87.equals(rhs$88)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"narySequenced(s1, s2, s3, s4; [])\" == naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$87, rhs$88));
        }
        .ceylon.language.String lhs$89 = .ceylon.language.String.instance("narySequenced(s1, s2, s3, s4; [r1])");
        .ceylon.language.String rhs$90 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{.ceylon.language.String.instance("r1")}, .ceylon.language.empty_.get_())).toString());
        if (lhs$89.equals(rhs$90)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"narySequenced(s1, s2, s3, s4; [r1])\" == naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\", \"r1\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$89, rhs$90));
        }
        .ceylon.language.String lhs$91 = .ceylon.language.String.instance("narySequenced(s1, s2, s3, s4; [r1, r2])");
        .ceylon.language.String rhs$92 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$callvariadic$((.java.lang.Object).ceylon.language.String.instance("s1"), .ceylon.language.String.instance("s2"), .ceylon.language.String.instance("s3"), .ceylon.language.String.instance("s4"), (.ceylon.language.Sequence).org.eclipse.ceylon.compiler.java.Util.sequentialCopy(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("r1"),
                .ceylon.language.String.instance("r2")}, .ceylon.language.empty_.get_())).toString());
        if (lhs$91.equals(rhs$92)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"narySequenced(s1, s2, s3, s4; [r1, r2])\" == naryRef(this)(\"s1\", \"s2\", \"s3\", \"s4\", \"r1\", \"r2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$91, rhs$92));
        }
    }
    
    public <T1>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<T1> NullaryParameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1) {
        return new NullaryParameterized<T1>($reified$T1);
    }
    
    public class NullaryParameterized<T1> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected NullaryParameterized(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1) {
            this.$reified$T1 = $reified$T1;
        }
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1;
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return "nullary()";
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized.class, $reified$T1));
        }
    }
    
    public <T1>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<T1> UnaryParameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final T1 s) {
        return new UnaryParameterized<T1>($reified$T1, s);
    }
    
    public class UnaryParameterized<T1> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected UnaryParameterized(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final T1 s) {
            this.$reified$T1 = $reified$T1;
            this.s = s;
        }
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1;
        private final T1 s;
        
        private final T1 getS$priv$() {
            return this.s;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("unary(").append(getS$priv$().toString()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized.class, $reified$T1));
        }
    }
    
    public <T1, T2>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryParameterized<T1, T2> BinaryParameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2, final T1 s1, final T2 s2) {
        return new BinaryParameterized<T1, T2>($reified$T1, $reified$T2, s1, s2);
    }
    
    public class BinaryParameterized<T1, T2> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected BinaryParameterized(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2, final T1 s1, final T2 s2) {
            this.$reified$T1 = $reified$T1;
            this.$reified$T2 = $reified$T2;
            this.s1 = s1;
            this.s2 = s2;
        }
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1;
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2;
        private final T1 s1;
        
        private final T1 getS1$priv$() {
            return this.s1;
        }
        private final T2 s2;
        
        private final T2 getS2$priv$() {
            return this.s2;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("binary(").append(getS1$priv$().toString()).append(", ").append(getS2$priv$().toString()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryParameterized.class, $reified$T1, $reified$T2));
        }
    }
    
    public <T1, T2, T3>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryParameterized<T1, T2, T3> TernaryParameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T3, final T1 s1, final T2 s2, final T3 s3) {
        return new TernaryParameterized<T1, T2, T3>($reified$T1, $reified$T2, $reified$T3, s1, s2, s3);
    }
    
    public class TernaryParameterized<T1, T2, T3> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected TernaryParameterized(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T3, final T1 s1, final T2 s2, final T3 s3) {
            this.$reified$T1 = $reified$T1;
            this.$reified$T2 = $reified$T2;
            this.$reified$T3 = $reified$T3;
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
        }
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1;
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2;
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T3;
        private final T1 s1;
        
        private final T1 getS1$priv$() {
            return this.s1;
        }
        private final T2 s2;
        
        private final T2 getS2$priv$() {
            return this.s2;
        }
        private final T3 s3;
        
        private final T3 getS3$priv$() {
            return this.s3;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("ternary(").append(getS1$priv$().toString()).append(", ").append(getS2$priv$().toString()).append(", ").append(getS3$priv$().toString()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryParameterized.class, $reified$T1, $reified$T2, $reified$T3));
        }
    }
    
    public <T1, T2, T3, T4>.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryParameterized<T1, T2, T3, T4> NaryParameterized$new$(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T3, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T4, final T1 s1, final T2 s2, final T3 s3, final T4 s4) {
        return new NaryParameterized<T1, T2, T3, T4>($reified$T1, $reified$T2, $reified$T3, $reified$T4, s1, s2, s3, s4);
    }
    
    public class NaryParameterized<T1, T2, T3, T4> implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected NaryParameterized(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T3, final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T4, final T1 s1, final T2 s2, final T3 s3, final T4 s4) {
            this.$reified$T1 = $reified$T1;
            this.$reified$T2 = $reified$T2;
            this.$reified$T3 = $reified$T3;
            this.$reified$T4 = $reified$T4;
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
            this.s4 = s4;
        }
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T1;
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T2;
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T3;
        private final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T4;
        private final T1 s1;
        
        private final T1 getS1$priv$() {
            return this.s1;
        }
        private final T2 s2;
        
        private final T2 getS2$priv$() {
            return this.s2;
        }
        private final T3 s3;
        
        private final T3 getS3$priv$() {
            return this.s3;
        }
        private final T4 s4;
        
        private final T4 getS4$priv$() {
            return this.s4;
        }
        
        @.java.lang.Override
        public final .java.lang.String toString() {
            return new .java.lang.StringBuilder().append("nary(").append(getS1$priv$().toString()).append(", ").append(getS2$priv$().toString()).append(", ").append(getS3$priv$().toString()).append(", ").append(getS4$priv$().toString()).append(")").toString();
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryParameterized.class, $reified$T1, $reified$T2, $reified$T3, $reified$T4));
        }
    }
    
    public final <X>void parameterizedMethod(final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$X, final X x) {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<.ceylon.language.String>>> nullaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<.ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized.class, .ceylon.language.String.$TypeDescriptor$)), .ceylon.language.Empty.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.NullaryParameterized<String>()(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<.ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized.class, .ceylon.language.String.$TypeDescriptor$)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassRef.NullaryParameterized<String>()", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<.ceylon.language.String> $call$() {
                        return $instance$.NullaryParameterized$new$(.ceylon.language.String.$TypeDescriptor$);
                    }
                };
            }
        };
        .ceylon.language.String lhs$93 = .ceylon.language.String.instance("nullary()");
        .ceylon.language.String rhs$94 = .ceylon.language.String.instance(nullaryRef.$call$((.java.lang.Object)this).$call$().toString());
        if (lhs$93.equals(rhs$94)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullary()\" == nullaryRef(this)().string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$93, rhs$94));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<X>>> nullaryXRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<X>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized.class, $reified$X)), .ceylon.language.Empty.$TypeDescriptor$), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.NullaryParameterized<X>()(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<X>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<X>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized.class, $reified$X)), .ceylon.language.Empty.$TypeDescriptor$, "MemberClassRef.NullaryParameterized<X>()", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NullaryParameterized<X> $call$() {
                        return $instance$.NullaryParameterized$new$($reified$X);
                    }
                };
            }
        };
        .ceylon.language.String lhs$95 = .ceylon.language.String.instance("nullary()");
        .ceylon.language.String rhs$96 = .ceylon.language.String.instance(nullaryXRef.$call$((.java.lang.Object)this).$call$().toString());
        if (lhs$95.equals(rhs$96)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nullary()\" == nullaryXRef(this)().string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$95, rhs$96));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<.ceylon.language.String>>> unaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<.ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.UnaryParameterized<String>(String)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<.ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<.ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized.class, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.UnaryParameterized<String>(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<.ceylon.language.String> $call$(final .java.lang.Object $param$0) {
                        final .ceylon.language.String s = (.ceylon.language.String)$param$0;
                        return $instance$.UnaryParameterized$new$(.ceylon.language.String.$TypeDescriptor$, s);
                    }
                };
            }
        };
        .ceylon.language.String lhs$97 = .ceylon.language.String.instance("unary(u)");
        .ceylon.language.String rhs$98 = .ceylon.language.String.instance(unaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("u")).toString());
        if (lhs$97.equals(rhs$98)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unary(u)\" == unaryRef(this)(\"u\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$97, rhs$98));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<X>>> unaryXRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<X>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized.class, $reified$X)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$X)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.UnaryParameterized<X>(X)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<X>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<X>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized.class, $reified$X)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, $reified$X), "MemberClassRef.UnaryParameterized<X>(X)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.UnaryParameterized<X> $call$(final .java.lang.Object $param$0) {
                        final X s = (X)$param$0;
                        return $instance$.UnaryParameterized$new$($reified$X, s);
                    }
                };
            }
        };
        .ceylon.language.String lhs$99 = .ceylon.language.String.instance("unary(foo)");
        .ceylon.language.String rhs$100 = .ceylon.language.String.instance(unaryXRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object)x).toString());
        if (lhs$99.equals(rhs$100)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"unary(foo)\" == unaryXRef(this)(x).string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$99, rhs$100));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryParameterized<.ceylon.language.String, .ceylon.language.String>>> binaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryParameterized<.ceylon.language.String, .ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryParameterized.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.BinaryParameterized<String,String>(String, String)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryParameterized<.ceylon.language.String, .ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryParameterized<.ceylon.language.String, .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryParameterized.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.BinaryParameterized<String,String>(String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.BinaryParameterized<.ceylon.language.String, .ceylon.language.String> $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1) {
                        final .ceylon.language.String s1 = (.ceylon.language.String)$param$0;
                        final .ceylon.language.String s2 = (.ceylon.language.String)$param$1;
                        return $instance$.BinaryParameterized$new$(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, s1, s2);
                    }
                };
            }
        };
        .ceylon.language.String lhs$101 = .ceylon.language.String.instance("binary(b1, b2)");
        .ceylon.language.String rhs$102 = .ceylon.language.String.instance(binaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("b1"), .ceylon.language.String.instance("b2")).toString());
        if (lhs$101.equals(rhs$102)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"binary(b1, b2)\" == binaryRef(this)(\"b1\", \"b2\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$101, rhs$102));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryParameterized<.ceylon.language.String, .ceylon.language.String, .ceylon.language.String>>> ternaryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryParameterized<.ceylon.language.String, .ceylon.language.String, .ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryParameterized.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.TernaryParameterized<String,String,String>(String, String, String)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryParameterized<.ceylon.language.String, .ceylon.language.String, .ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryParameterized<.ceylon.language.String, .ceylon.language.String, .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryParameterized.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.TernaryParameterized<String,String,String>(String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.TernaryParameterized<.ceylon.language.String, .ceylon.language.String, .ceylon.language.String> $call$(final .java.lang.Object $param$0, final .java.lang.Object $param$1, final .java.lang.Object $param$2) {
                        final .ceylon.language.String s1 = (.ceylon.language.String)$param$0;
                        final .ceylon.language.String s2 = (.ceylon.language.String)$param$1;
                        final .ceylon.language.String s3 = (.ceylon.language.String)$param$2;
                        return $instance$.TernaryParameterized$new$(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, s1, s2, s3);
                    }
                };
            }
        };
        .ceylon.language.String lhs$103 = .ceylon.language.String.instance("ternary(t1, t2, t3)");
        .ceylon.language.String rhs$104 = .ceylon.language.String.instance(ternaryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("t1"), .ceylon.language.String.instance("t2"), .ceylon.language.String.instance("t3")).toString());
        if (lhs$103.equals(rhs$104)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ternary(t1, t2, t3)\" == ternaryRef(this)(\"t1\", \"t2\", \"t3\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$103, rhs$104));
        }
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryParameterized<.ceylon.language.String, .ceylon.language.String, .ceylon.language.String, .ceylon.language.String>>> naryRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryParameterized<.ceylon.language.String, .ceylon.language.String, .ceylon.language.String, .ceylon.language.String>>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryParameterized.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$), "MemberClassRef.NaryParameterized<String,String,String,String>(String, String, String, String)(MemberClassRef)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryParameterized<.ceylon.language.String, .ceylon.language.String, .ceylon.language.String, .ceylon.language.String>> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryParameterized<.ceylon.language.String, .ceylon.language.String, .ceylon.language.String, .ceylon.language.String>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryParameterized.class, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.NaryParameterized<String,String,String,String>(String, String, String, String)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.NaryParameterized<.ceylon.language.String, .ceylon.language.String, .ceylon.language.String, .ceylon.language.String> $call$(final .java.lang.Object... $param$0) {
                        final .ceylon.language.String s1 = (.ceylon.language.String)$param$0[0];
                        final .ceylon.language.String s2 = (.ceylon.language.String)$param$0[1];
                        final .ceylon.language.String s3 = (.ceylon.language.String)$param$0[2];
                        final .ceylon.language.String s4 = (.ceylon.language.String)$param$0[3];
                        return $instance$.NaryParameterized$new$(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.$TypeDescriptor$, s1, s2, s3, s4);
                    }
                };
            }
        };
        .ceylon.language.String lhs$105 = .ceylon.language.String.instance("nary(n1, n2, n3, n4)");
        .ceylon.language.String rhs$106 = .ceylon.language.String.instance(naryRef.$call$((.java.lang.Object)this).$call$((.java.lang.Object).ceylon.language.String.instance("n1"), .ceylon.language.String.instance("n2"), .ceylon.language.String.instance("n3"), .ceylon.language.String.instance("n4")).toString());
        if (lhs$105.equals(rhs$106)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"nary(n1, n2, n3, n4)\" == naryRef(this)(\"n1\", \"n2\", \"n3\", \"n4\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$105, rhs$106));
        }
    }
    
    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner Inner$new$(final .java.lang.String s) {
        return new Inner(s);
    }
    
    public class Inner implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
        
        protected Inner(final .java.lang.String s) {
            this.s = s;
        }
        private final .java.lang.String s;
        
        private final .java.lang.String getS$priv$() {
            return this.s;
        }
        
        public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.M M$new$(final .java.lang.String s2) {
            return new M(s2);
        }
        
        public class M implements .org.eclipse.ceylon.compiler.java.runtime.model.ReifiedType, .java.io.Serializable {
            
            protected M(final .java.lang.String s2) {
                this.s2 = s2;
            }
            private final .java.lang.String s2;
            
            private final .java.lang.String getS2$priv$() {
                return this.s2;
            }
            
            @.java.lang.Override
            public final .java.lang.String toString() {
                return new .java.lang.StringBuilder().append("Inner(").append(getS$priv$()).append(").M(").append(getS2$priv$()).append(")").toString();
            }
            
            @.java.lang.Override
            public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
                return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.M.class));
            }
        }
        
        @.java.lang.Override
        public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
            return .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.class));
        }
    }
    
    public final void innerClass() {
        final .ceylon.language.Callable<? extends .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.M>> innerMRef = new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.M>>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Callable.class, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.M.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.class))), "MemberClassRef.Inner.M(String)(MemberClassRef.Inner)", (short)-1){
            
            @.java.lang.Override
            public .ceylon.language.Callable<? extends .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.M> $call$(final .java.lang.Object $param$0) {
                final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner $instance$ = (.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner)$param$0;
                return new .org.eclipse.ceylon.compiler.java.language.AbstractCallable<.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.M>(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$, .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.M.class)), .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.tuple(false, false, -1, .ceylon.language.String.$TypeDescriptor$), "MemberClassRef.Inner.M(String)", (short)-1){
                    
                    @.java.lang.Override
                    public .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.Inner.M $call$(final .java.lang.Object $param$0) {
                        final .java.lang.String s2 = ((.ceylon.language.String)$param$0).toString();
                        return $instance$.M$new$(s2);
                    }
                };
            }
        };
        .ceylon.language.String lhs$107 = .ceylon.language.String.instance("Inner(foo).M(bar)");
        .ceylon.language.String rhs$108 = .ceylon.language.String.instance(innerMRef.$call$((.java.lang.Object)Inner$new$("foo")).$call$((.java.lang.Object).ceylon.language.String.instance("bar")).toString());
        if (lhs$107.equals(rhs$108)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"Inner(foo).M(bar)\" == innerMRef(Inner(\"foo\"))(\"bar\").string") + .org.eclipse.ceylon.compiler.java.Util.assertBinOpFailed(lhs$107, rhs$108));
        }
    }
    
    @.java.lang.Override
    public .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.$TypeDescriptor$;
    }
    public static final .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .org.eclipse.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef.class);
}
@.org.eclipse.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.org.eclipse.ceylon.compiler.java.metadata.Method
final class memberClassRef_ {
    
    private memberClassRef_() {
    }
    
    static void memberClassRef() {
        final .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef mcr = new .org.eclipse.ceylon.compiler.java.test.expression.ref.MemberClassRef();
        mcr.simple();
        mcr.defaulted();
        mcr.sequenced();
        mcr.<.ceylon.language.String>parameterizedMethod(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.String.instance("foo"));
        mcr.innerClass();
    }
}